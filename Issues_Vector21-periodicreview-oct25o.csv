"k a","#pragma weak variables should get handled in coupling","VC-1010","Previously, VectorCAST/C++ ignored '#pragma weak' variables when doing coupling analysis.This problem has been resolved in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk - coupling analysis is not used.","No Risk"
"k a","Harness compilation error when anonymous structure used for sizeof in arraysize","75498","Previously, VectorCAST/C++ generated test harness code which did not compile when the source code had an array size containing a sizeof expression with an anonymous struct. This problem has been resolved in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and fixed by a developer.","No Risk"
"k a","Ada harness compile error when function returns FORWARD_ITERATOR or REVERSIBLE_ITERATOR","96348","In previous versions of VectorCAST/Ada, a harness compile error could occur for testable functions that returned an instantiation of the generic ADA.ITERATOR_INTERFACES.FORWARD_ITERATOR or ADA.ITERATOR_INTERFACES.REVERSIBLE_ITERATOR. This problem is fixed in VectorCAST version 2024 SP6. Such functions are no longer called in the harness from the test driver.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and fixed by a developer.","No Risk"
"k a","vcshell misinterpreting gcc's '--coverage' argument","97366","Previously, vcshell displayed the error message ""vcshell: --coverage_type supported only with instrument"" when processing a gcc command containing the '--coverage' argument while creating a vcshell database because it conflicted with the vcshell argument '--coverage_type'. This problem has been resolved in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This issue causes a build error which is easily detected by a developer.","No Risk"
"k a","Harness file is compiled twice when environment built with coverage","100241","In previous versions of VectorCAST/C++, building environments with coverage enabled would result in the B0000002.cpp harness file being compiled twice. This problem is fixed in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This is an efficiency issue that only impacts build time and does not affect the correctness of the final test binary or results.","No Risk"
"k a","Internal error when using void alias as function template function parameter","100358","Previously, VectorCAST/C++ aborted coverage instrumentation with the error ""Internal error loop: write_orig_source_line: could not find line"" for some source code using a void alias as a function template function parameter. This problem has been resolved in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This internal error is a build blocker and is easily detected by a developer.","No Risk"
"k a","Coverage metrics on unnecessary template function instantiations when option ""Instrument template instantiations"" is True","100450","In previous versions, with the coverage option ""Instrument template instantiations"" (VCAST_COVERAGE_FOR_TEMPLATE_INSTANTIATIONS) set to True, VectorCAST/Cover would instrument even those template function instantiations that the compiler did not compile and were not present in the object file. This problem has been fixed in VectorCAST version 2024 SP6 so that only the template function instantiations present in the object file are instrumented when the 'Template Instantiation Coverage' configuration option is enabled.","Correction in newer version (release notes)","NoRisk, It occurs in case of using ""source file"" as perspective coverage, we are using translation unit. Option is disabled.","No Risk"
"k a","Instrumentation point placed between #pragma unroll and following loop","100981","In previous versions of VectorCAST/C++, instrumenting a clang compiler specific '#pragma unroll' directive in a template function would result in an instrumented source file with syntax errors. This has been fixed in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This issue causes a syntax error which is easily detected by a developer.","No Risk"
"k a","Console Report prints output for Skipped Tests","101022","Previously, skipped tests would errantly show as passing in the Console Report, sometimes with missing or incorrect parent testcase information. This has been fixed in VectorCAST version 2024 SP6 and skipped tests are not displayed in the Console Report Output.","Correction in newer version (release notes)","""Console Report"" is something like a logfile, if this case, the test environment will show 0 test cases and this will be noticeable","No Risk"
"k a","Missing template parameters in Metrics report when option ""Instrument template instantiations"" is True","101150","In previous versions of VectorCAST Cover and VectorCAST/C++, enabling the coverage option ""Instrument template instantiations"" (VCAST_COVERAGE_FOR_TEMPLATE_INSTANTIATIONS) and instrumenting a template class which contained an anonymous non-type template parameter would result in those template parameters missing in the Coverage Viewer, the Aggregate Coverage report, and the DataAPI. This has been fixed in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. Missing variable of some special type.","No Risk"
"k a","Unstubbed entities log now identifies incomplete template arguments","101368","Previously, VectorCAST/C++ only gave the reason ""Function uses a template with an incomplete parameter type"" in the Unstubbed Entities Log, without specifying the incomplete type. Starting with VectorCAST version 2024 SP6, the incomplete type is noted in the Unstubbed Entities Log.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that provides more information for a known issue. It does not fix a correctness bug.","No Risk"
"k a","Invalid coverage instrumentation around __attribute__((fallthrough))","101378","In previous versions of VectorCAST/C++, attempting to instrument a statement which contained only an __attribute__ designation would result in an instrumented source file with syntax errors. This has been fixed in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This is a syntax error which is easily detected by a developer.","No Risk"
"k a","GUI shows error message about PATH, but runs command anyway","101418","In previous versions of VectorCAST, when executing external programs with a space in the file path, the message window would sometimes incorrectly indicate that the program could not be found or fail to indicate when the program could not be found. These problems are fixed in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI that does not affect test correctness.","No Risk"
"k a","Instrumentation causes compile error with TIC coverage","101473","In previous versions of VectorCAST/QA, attempting to instrument a lambda inside of an external template member function definition which has differing template parameter names from the member function's declaration would result in a syntax error in the instrumented source code when the ""Instrument template instantiations"" option was enabled. This problem has been fixed in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This bug causes a syntax error which is easily detected.","No Risk"
"k a","File Version Command section in Management report is empty with SFP set","101618","Previously, when generating the Management report in a Cover environment with the ""File version command"" option (VCAST_FILE_VERSION_COMMAND) set to a command as well as the ""Source File Perspective"" option (VCAST_COVERAGE_SOURCE_FILE_PERSPECTIVE) set to True, the file version information was missing from the report. This problem has been resolved in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. If required, version could be added manually.","No Risk"
"k a","Cleared file scope probe point does not remain deleted after re-opening environment","101666","In previous versions of VectorCAST/C++ and VectorCAST Cover, clearing a file scope probe point in the probe editor would not save the change if no other probe points had changed. This problem is fixed in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This is a minor usability bug. The fix prevents a configuration change from being lost but a developer would likely notice and correct this.","No Risk"
"k a","Coverage reports missing header files with SFP set","101703","In previous versions of VectorCAST/C++, Coverage reports could potentially be missing header coverage when the instrumented header contained source code that was not testable, when coverage option ""Source File Perspective"" (VCAST_COVERAGE_SOURCE_FILE_PERSPECTIVE) was set to True. This problem has been fixed in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No RIsk, this is a false positive, hiding coverage where there should be such. It is easily detected during test development.","No Risk"
"k a","Environment directory not deleted using File > Delete Environment in SFP","101733","Previously, when deleting a Cover environment using the File > Delete Environment menu item while the coverage option ""Source File Perspective"" (VCAST_COVERAGE_SOURCE_FILE_PERSPECTIVE) was set to True, a file was left behind, prohibiting the environment directory from being deleted. This problem has been resolved in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This is a minor file system cleanup issue that does not affect the correctness of the test results.","No Risk"
"k a","GNU target script 'execute_gdb.py --debug' not working","101742","Previously, when running the GNU target script 'execute_gdb.py --debug', VectorCAST RSP did not wait for the gdb session to be ended by the user and did not end the QEMU subprocess when the gdb session ended. These issues have been fixed in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This bug affects the debugging workflow not the correctness of the tests or reports.","No Risk"
"k a","Harness compile error when array sized by macro that matches enum in namespace","101744","Previously, VectorCAST/C++ displayed a compile error in the test harness for source code with an array sized by a macro with the same name as an enum in a namespace. This problem has been resolved in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and fixed by a developer.","No Risk"
"k a","Parse error 'no operator ""="" matches these operands'","101810","Previously, VectorCAST/C++ incorrectly gave the parse error 'no operator ""="" matches these operands' for some code that did compile successfully. This problem has been resolved in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Reserve NVLM floating license type before named user","101812","Previously, VectorCAST attempted to reserve named user NVLM licenses prior to floating licenses. Starting with version 2024 SP6, a reserve of a floating license is attempted first.","Correction in newer version (release notes)","No Risk. This is a licensing efficiency issue that does not affect test correctness.","No Risk"
"k a","Project tree still shows coverage after environment has been removed with SFP set","101823","In previous versions of VectorCAST Project, changes to the Project structure (such as compiler or testsuite deletions), could fail to refresh the Project level coverage when the coverage option ""Source File Perspective"" (SFP) was set to True. This problem has been resolved in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI. The data is still correct but the display is stale.","No Risk"
"k a","Compile errors using VCAST_ENABLE_DATA_CLEAR_API with MC/DC coverage in vcwrap workflow","101860","In previous versions of VectorCAST Cover, instrumenting a source file for MC/DC coverage with VCAST_ENABLE_DATA_CLEAR_API enabled could result in compile errors with the instrumented file when using the vcwrap workflow. This problem has been fixed in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This bug causes a compile error which is easily detected and fixed.","No Risk"
"k a","Compile error in test harness while stubbing extern template","101913","Previously, VectorCAST/C++ would fail to build the test harness with the error message ""error: specialization of âvoid std::allocator<"" while attempting to automatically generate a stub for an extern template. This problem has been resolved in VectorCAST version 2024 SP6. VectorCAST/C++ no longer attempts to stub such a template.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and fixed.","No Risk"
"k a","libVcRecorder.so is not thread safe","101924","Previously, vcshell did not support capturing compile commands that resulted in multiple spawns from threads (e.g., the Clang --offload-arch option). Support for this functionality has been added for Linux and Windows (but not Cygwin) in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk, vcshell is not used.","No Risk"
"k a","Incorrect MC/DC Equivalence report when generated with SFP set","101927","Previously, VectorCAST/C++ and VectorCAST Cover generated an incorrect MC/DC Equivalence report when both ""Simplified Condition Coverage"" (VCAST_SIMPLIFIED_CONDITION_COVERAGE) and ""Source File Perspective"" (VCAST_COVERAGE_SOURCE_FILE_PERSPECTIVE) options were set to True. This problem has been resolved in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk - SFP option is not used.","No Risk"
"k a","MC/DC Pairs information inadvertently displayed with simplified condition coverage and SFP set","101928","Previously, in VectorCAST Projects with the Coverage option ""Source File Perspective"" (SFP) set to True and with MC/DC or Statement+MC/DC coverage instrumented in environments, viewing coverage incorrectly displayed MC/DC Pairs information when the Coverage option ""Simplified Condition Coverage"" (VCAST_SIMPLIFIED_CONDITION_COVERAGE) was also set to True. This problem has been corrected in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This is a usability bug in the display of information and does not affect the correctness of the underlying coverage data.","No Risk"
"k a","Source column lines not calculated when MC/DC expression has a condition with macro and SFP is set","101947","Previously, in VectorCAST/C++ unit test environments and Cover environments with the coverage option ""Source File Perspective"" (SFP) set to True and instrumented with MC/DC or Statement+MC/DC coverage, if the source code contained macros within an MC/DC expression,VectorCAST's instrumenter would mistakenly display a database load warning on a line in the Coverage Viewer and Aggregate Coverage report and the conditions within the expression were not displayed properly. This problem has been fixed in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. The incorrect display of MC/DC conditions for a macro is shown together with a database warning. It is easily detectable druing test development.","No Risk"
"k a","Disabling unit options from build command interface (BCI) breaks GPGPU instrumentation","101977","In previous versions, when instrumenting with the vcwrap workflow, VectorCAST Cover might have ignored unit options specifying GPGPU device mode ('__CUDA_ARCH__','VCAST_GPGPU_DEVICE'), leading to instrumentation being incorrectly applied to host functions for the unit. Such incorrectly-applied instrumentation would generally compile and link correctly, and likely would only be detected at runtime when device coverage was missing. (Inspection of the instrumented source file would reveal incorrectly-placed instrumentation points.) This problem has been fixed in VectorCAST version 2024 SP6 such that GPGPU device mode unit options are honored with vcwrap and any GPGPU device mode functions are instrumented accordingly.","Correction in newer version (release notes)","No Risk. This bug could lead to incorrect instrumentation that compiles and links but fails to collect the necessary coverage data. This is a silent failure that is easily detectable during test development and is of no risk.","No Risk"
"k a","Parse error when taking address of Diab full-width bit fields","102008","Previously, VectorCAST/C++ incorrectly gave the error ""taking the address of a bitfield is not allowed"" when parsing Diab code which takes the address of a bit field. This problem has been resolved in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Environment build error when using parallel processing","VC-147","In previous versions of VectorCAST/C++, building an environment while the environment variable VCAST_NUM_JOBS was set to a number greater than 1 could cause arguments from the C_COMPILE_CMD to be incorrectly used for preprocessing, causing a compiler error in the test harness. This problem is fixed in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk. This bug causes a compile error which is easily detected by a developer.","No Risk"
"k a","VectorCAST Project not using source files in base directory when displayingimported results when SFP is set","VC-167","Previously, when the coverage option ""Source File Perspective"" was set to True, VectorCASTProject incorrectly relied on the original source file paths, instead of using the base directorypaths, when displaying execution and coverage data on the Files tab. The problem has been corrected in VectorCAST version 2024 SP6.","Correction in newer version (release notes)","No Risk - SourceFile Perspective is not used","No Risk"
"k a","Generating the MC/DC Test Case report fails when SFP set","93021","Previously, generating the MC/DC Test Cases report failed in a Cover environment with SourceFile Perspective (SFP) set. This problem has been resolved in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","NoRisk. SourceFile Perspective is not used.","No Risk"
"k a","Iterations in Nested Compounds Not Reported Correctly","97883","Previously, iterations for nested compound tests were incorrect in coverage reports. This has been fixed in VectorCAST version 2024 SP5. CORRECTION:This fix is for incorrectly numbered iterations for nested compound tests in execution reports, and not coverage reports as originally specified.","Correction in newer version (release notes)","NoRisk - We are using compund tests but only for internal usage, to test some features. It is not a part of official test reports.","No Risk"
"k a","MC/DC Pairs information inadvertently displayed with simplified condition coverage and SFP set","98976","Previously, in C/C++ Cover and unit test environments with the Coverage option ""Source File Perspective"" (SFP) set to True and with MC/DC or Statement+MC/DC coverage instrumented, the Aggregate Coverage report and the Coverage Viewer both incorrectly displayed MC/DC Pairs information when the Coverage option ""Simplified Condition Coverage"" (VCAST_SIMPLIFIED_CONDITION_COVERAGE) was also set to True. This problem has been corrected in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is a usability bug in the display of information and does not affect the correctness of the underlying coverage data.","No Risk"
"k a","Compile error in auto-generated concrete class when default function parameter references variable in different namespace","100187","Previously, VectorCAST/C++ generated default argument initializations for virtual method parameters when automatically generating concrete classes. This caused compile errors in the test harness if the initialization referenced a symbol in a different scope. This issue has been fixed in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and fixed by a developer.","No Risk"
"k a","Harness compile error due to use of deleted operator& instead ofvcast::addressof","100569","Previously, VectorCAST/C++ generated code that failed to compile for environments containing classes with deleted operator&. This issue has been fixed in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Stub fails to be created when base or member type has move constructor first","100832","In previous versions of VectorCAST/C++, a constructor could fail to be stubbed if a parent or member class declared a move or copy constructor before non-move and non-copy constructors, potentially resulting in a harness link error. This problem is fixed in VectorCAST 2024 SP5.","Correction in newer version (release notes)","No Risk. This is a linker error easily detected.","No Risk"
"k a","Harness compile error when struct field is a const pointer to std::array","100851","Previously, VectorCAST/C++ could not successfully compile the test harness when the source code under test included a const pointer to a std::array container, displaying an error message ""error: uninitialized const in 'new' of 'const struct std::array<..."". This problem has been resolved in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Move entire test to Unapplied Test Data if it has an import error and is disabled by a variant logic","100909","Previously, in a VectorCAST Project with an environment in two contexts due to symbolic constant settings and a variant logic setting that has disabled a test in one context but not the other, an unending back-and-forth loop occurred where the environment opened in one context caused the test script in the other environment to be out of date due to the data in the Unapplied Test Script node. This problem has been resolved in VectorCAST Project version 2024 SP5, where a test that is disabled by a variant logic and has expected import errors due to the settings of the symbolic constants is saved in whole in the Unapplied Test Data node. Upon closing the environment within the Project, the test script remains intact for use in the environment in the other context.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI that does not affect test correctness.","No Risk"
"k a","MC/DC Equivalence report missing notice about exceeding maximum subconditions in SFP","101001","Previously, in C/C++ Cover and unit test environments with the Coverage option ""Source File Perspective"" (SFP) set to True and with MC/DC or Statement+MC/DC coverage instrumented, when an expression contained more than 52 sub-conditions, the MC/DC Equivalence and Aggregate Coverage reports incorrectly omitted the notice ""MAX CONDITIONS EXCEEDED"". This problem has been resolved in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk - SourceFile Perspective is not used.","No Risk"
"k a","Instrumentation fails for a template function with no instantiations and an erroneous return type","101044","In previous versions of VectorCAST Cover, instrumenting a template function with no instantiations and an erroneous return type could result in an instrumentation error. This problem has been fixed in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Parser fails with internal error ""assertion failed""","101100","Previously, VectorCAST/C++ gave the error: 'Internal error: assertion failed at: ""lower_name.cpp"", line 6667 in mangled_encoding_for_expression_full' for some source code when the parser flag '--set_flag=no_ms_nonreal_base_classes' was not used during instrumentation. This problem has been resolved in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is an internal error and is easily detected as a build blocker.","No Risk"
"k a","Unstubbed Entities Log incorrectly reports base class as abstract when usable constructor not found","101254","In previous versions of VectorCAST/C++, the Unstubbed Entities Log incorrectly reported constructors as belonging to abstract classes in cases when they could not be called due to only having accessible constructors that take self-references (such as copy and move constructors). This has been fixed in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that provides more accurate information in a log file. It does not affect test correctness.","No Risk"
"k a","Constructors in headers displayed as ""<<INIT>>"" in Execution Results report","101353","Previously, VectorCAST/C++ recorded constructors declared only in a header file with the name '<<INIT>>' in the DataAPI functions list and then these constructors were given the subprogram name ""<<INIT>>"" in the Execution Results report. Beginning with VectorCAST version 2024 SP5, these constructors are now recorded in the DataAPI with their correct constructor name and reported with the same constructor name in the Execution Results report. In addition, the DataAPI has a new attribute,'is_testable', to allow scripts to distinguish between testable and non-testable constructors.","Correction in newer version (release notes)","No Risk. This is a reporting bug that is easily detected and does not affect the correctness of the test results themselves.","No Risk"
"k a","Internal build error when coded tests enabled with Visual Studio compiler set","101422","In previous versions of VectorCAST/C++, non-real class templates that used pointers to member functions were being unnecessarily added to the environment file named 'needed.xml', sometimes leading to a build failure, such as when coded tests were enabled with the Visual Studio compiler specified. This problem has been fixed in VectorCAST version 2024 SP5. Non-real templates are no longer added to the needed.xml file.","Correction in newer version (release notes)","No Risk. This is a build error that is easily detected and fixed by a developer.","No Risk"
"k a","Lamba not instrumented when initialized in member variable declaration","101449","In previous versions of VectorCAST/C++, source code with a lambda which was passed as a constructor parameter to an object which was defined anywhere except for inside of another function was not instrumented. This problem has been fixed in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This bug leads to missing code coverage for lambdas which a developer could easily detect by checking the instrumented source file. ","No Risk"
"k a","Environment build error: ""use of deleted function""","101509","Previously, VectorCAST/C++ could not successfully compile the test harness when the source code under test included a class having member data of a type of a class with a deleted copy constructor, displaying the error message ""error: use of deleted function"". This problem has been resolved in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","VectorCAST slow to create/open test case with numerous globals","101521","Previously, the VectorCAST user interface was very slow to respond when inserting or opening a test case in the Test Case Editor when the source code included tens of thousands of global variables. This problem has been resolved in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is a performance issue that does not affect test correctness.","No Risk"
"k a","Incorrect stub behavior in stdout mode for C++ test cases that call constructors","101539","Previously, VectorCAST/C++ created a test harness which returned the wrong stub value for some tests calling constructors when the configuration option VCAST_NO_STDIN was set to true and the configuration option VCAST_ALWAYS_DO_STUB_PROCESSING_IN_TI was set to false. This problem has been resolved in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk, this is relevant for integration tests only, in case if test object can not be changed after its initialization","No Risk"
"k a","Display an error when generating a report in SFP when the environment contains basis path instrumentation","101555","Reporting with basis paths instrumentation is incompatible with Source File Perspective (SFP).In VectorCAST version 2024 SP5, the option to enable basis path instrumentation is disabled when using SFP. To use basis path instrumentation, switch SFP mode off.","Correction in newer version (release notes)","No Risk. This is a usability change that prevents a user from making an incompatible configuration. It does not fix a correctness bug.","No Risk"
"k a","Environment build should fail when environment file copy fails","101561","In previous versions of VectorCAST/C++ and VectorCAST/Ada, environment builds would not abort when files listed in the VCAST_ENVIRONMENT_FILES option could not be copied. In VectorCAST version 2024 SP5, failure to copy a file results in an error message and termination of the build process.","Correction in newer version (release notes)","No Risk. The previous behavior would likely cause an obvious build or runtime failure which is easily detected.","No Risk"
"k a","Aggregate Coverage and Metrics reports fail to generate for Probe Point instrumentation with SFP set","101568","Previously, when the Coverage option ""Source File Perspective"" (SFP) was set to True, VectorCAST Cover could not correctly generate the Aggregate Coverage report or Metrics report when Probe Point coverage type was instrumented in the environment. This problem hasbeen fixed in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","NoRisk , ""Source File Perspective"" is not used","No Risk"
"k a","Ignore VCAST_SHOW_INLINES_COVERED_IN_ALL_UNITS option in SourceFile Perspective (SFP)","101592","Previously, if the option VCAST_SHOW_INLINES_COVERED_IN_ALL_UNITS was set and theenvironment was using Source File Perspective, coverage for header files could be incorrect. In VectorCAST version 2024 SP5, the option is disabled in the GUI when in SFP mode, the option is ignored when adding results, and the help topic for the option is updated.","Correction in newer version (release notes)","No Risk. Is easily detectable as coverage data for header files could be checked. ","No Risk"
"k a","Update NVLM coupling product names and numbers","101599","In VectorCAST version 2024 SP5 with NVLM licensing, the Coupling product names and ID numbers have changed. When available, Coupling products are now displayed in the diagnostic report as the following, where ""DE"" stands for ""Desktop Edition"" and ""SE"" stands for ""Server Edition"": Option VectorCAST/Coupling DEOption VectorCAST/Coupling SE","Correction in newer version (release notes)","No Risk. This is a licensing update.","No Risk"
"k a","Rebuilding VectorCAST Project environment in GUI should not relinquish license","101602","Previously, the VectorCAST GUI released the FlexNET edition license upon Project open and checked it out again when doing an environment rebuild, update, or open of another environment of the same language. Starting with VectorCAST version 2024 SP5, the license is retained.","Correction in newer version (release notes)","No Risk. This is a usability/performance enhancement related to licensing.","No Risk"
"k a","VC/QA Data Summary Report causes GUI crash when an instrumented file has no functions","101640","Previously, VectorCAST would crash when attempting to display unit-level Code Coverage Summary Report if one of the units did not contain any functions. This is fixed in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is a GUI crash which is an easily detectable usability bug that does not affect test correctness.","No Risk"
"k a","Harness compile error when std::array element type has deleted move constructor or deleted move assignment operator","101699","Previously, VectorCAST/C++ created test harness code that did not compile for std::array types where the element type had a deleted move constructor or a deleted move assignment operator. This problem has been resolved in VectorCAST version 2024 SP5. Such types will have read-only support in the test case editor's Parameter Tree.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Template function lacks SBF when a sibling member is defined in separate unit","101701","Starting with VectorCAST version 2021 SP7, VectorCAST/C++ did not stub by function template functions when a sibling member function was defined in a separate unit. This problem has been resolved in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. It is a lack of SBF capability but measures could be taken to overcome this problem.","No Risk"
"k a","Harness compile error due to redeclaration of inline friend lacking constexprspecifier","101714","In previous versions of VectorCAST/C++, the 'constexpr' keyword was not being printed for constexpr inline friend function declarations, resulting in a test harness compile error. This problem is fixed in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Instrumentation crash for some initialization statements when using --nvidia parser flag","101734","Previously, VectorCAST/C++ crashed when instrumenting some initialization statements when the --nvidia parser flag was used. This problem has been resolved in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is an instrumentation crash which is a build blocker and easily detected by a developer.","No Risk"
"k a","Probe point apply places stub-by-function modifications incorrectly for some template functions","101747","Previously, VectorCAST/C++ placed stub-by-function modifications in the wrong locations for some template functions during application of probe points, causing a compile error. This problem has been resolved in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This bug causes a compile error easily detected.","No Risk"
"k a","Parse failure: ""no suitable user-defined conversion""","VC-116","In previous versions of VectorCAST/C++, a ""no suitable user-defined conversion"" error could incorrectly occur for some code which compiled correctly. This problem is fixed in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Full Status report missing coverage data from imported results when SFP set","VC-168","Previously, VectorCAST Project's Status reports were failing to include metrics from imported results when the coverage option ""Source File Perspective"" (SFP) was set to True. This problem has been resolved in VectorCAST version 2024 SP5.","Correction in newer version (release notes)","No Risk. This is easily detected issue and which does not affect test correctness.","No Risk"
"k a","Parse error for __declspec(interrupt) for CodeWarrior","69930","Previously, VectorCAST/C++ gave an error for CodeWarrior code containing the __declspec keyword. This problem has been resolved in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Parser given ""--tasking --tasking_version=tricore flags"" uses GNU predefinedmacros","82224","Previously, VectorCAST/C++ predefined the GNU macros __GNUC__, __GNUC_MINOR__, and __GNUC_PATCHLEVEL__ when parsing or preprocessing in some Tasking modes. In VectorCAST version 2024 SP4, these macros are no longer predefined in any Tasking mode.","Correction in newer version (release notes)","NoRisk, we are not using GNU compiler","No Risk"
"k a","Parse error for #pragma statements with nested parentheses","93469","Previously, VectorCAST/C++ gave the parse error ""expected a string literal"" for #pragma statements with nested parentheses. This problem has been resolved in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","IAR parse error ""invalid type conversion"" for __section_end() builtin onreinterpret_cast","96243","Previously, VectorCAST incorrectly gave an error when parsing some IAR code with the section operators __section_end, __section_begin, __segment_begin, __segment_end, __sfe,and __sfb. This problem has been resolved in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Parse error related to template-dependent function when using --auto_builtins flag","98038","Previously, VectorCAST/C++ incorrectly gave the parse error 'operator -> or ->* applied to ""int"" instead of to a pointer type' for some template functions when the parser flag --auto_builtins was used. This problem has been resolved in VectorCAST version 2024 SP4. Starting with that version, VectorCAST no longer attempts automatic builtin function detection in template-dependent functions.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Parse error for Keil ARM code using ""__asm__ volatile""","99814","Previously, VectorCAST/C++ gave the error message 'expected a ""(""' for __asm__volatile statements when using the --arm parser flag. This problem has been resolved in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Incorrect message ""intex command failed"" when link command fails toproduce harness","100856","Previously, VectorCAST/C++ would erroneously report ""Intex command failed"" when a link command returned exit status 0 but failed to produce the expected output file. In VectorCAST version 2024 SP4, the error message instead indicates that the link failed.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that provides a more helpful error message for an easily detectable failure.","No Risk"
"k a","Reports should indicate ""Unknown Requirement"" instead of insertingTraceback","100859","Previously, generating a Test Case Data or Full Report for an environment with requirements that did not exist would return a Python stack trace error. In VectorCAST version 2024 SP4, any unmatched requirement IDs get an 'Unknown' requirement identifier added to allow the lists of requirements to work as before. the rows with a T or F Result, thus further filtering what was originally selected in the ""Coverable Section."" Multi-selecting of rows and columns in various widgets is supported.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that provides a cleaner report for an easily detectable error.","No Risk"
"k a","Output file created in wrong location if directory exists with same name asthe output filename","100935","Previously, when using an MSVC compiler in a Cover environment with the vcwrap workflow, if the compile command specified an output file and there existed a directory with the same name as the output file, VectorCAST would create the output file in that directory. This problem has been corrected in VectorCAST version 2024 SP4, where the output file is correctly created in the appropriate directory.","Correction in newer version (release notes)","No Risk. This bug would likely lead to a build failure which is easily detected.","No Risk"
"k a","DOORS executable path does not show error if path is invalid","100970","Previously, VectorCAST did not display any error message if the DOORS client executable path was invalid. This problem is fixed in VectorCAST version 2024 SP4. A red outline is shown around the error value and an error pop-up dialog is shown.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that provides clearer feedback for a configuration error.","No Risk"
"k a","GUI unresponsive after probe point apply is complete","101052","Previously, the VectorCAST GUI could become unresponsive when working with large source files, particularly those containing a significant number of subprograms, and using the probe point editor. This problem has been resolved in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a performance issue that does not affect test correctness.","No Risk"
"k a","Metrics and Aggregate reports are empty for Cover environments containingAda source files in SFP","101057","Previously, in C/C++ Cover environments containing Ada source files with the Coverage option ""Source File Perspective"" (SFP) set to True, the Metrics report and Aggregate Coverage report omitted coverage information for the Ada files. This problem has been fixed in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","NoRisk, ""Source File Perspective"" is not used.","No Risk"
"k a","Basis Path analysis fails silently when function has very high complexity","101076","In previous versions of VectorCAST/C++, basis path analysis could silently abort when processing functions with very high complexity. In VectorCAST version 2024 SP4, an error message is displayed indicating the failure and a suggestion on avoiding the problem by increasing the value of the environment variable VCAST_RECURSION_DEPTH.","Correction in newer version (release notes)","No Risk, not using Basis Path Analyse or MC/DC Path Analyse in not in OB scope of work.","No Risk"
"k a","Manage Incremental Rebuild Report displays incorrect totals summary row","101122","In previous versions of VectorCAST Project, the Manage Incremental Rebuild Report would tally totals incorrectly when the project contained both Cover and C++ unit test environments. This problem has been fixed in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk, we are not using incremental build, also CI not, clean and build is prescribed","No Risk"
"k a","Clicast tools execute_commands concatenates arguments from separatelines","101159","In previous versions of VectorCAST/QA, a 'clicast tools execute_commands' command would fail when the given commands file contained multiple 'cover report' subcommands. This problem is fixed in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a command-line bug that would result in an easily detected error.","No Risk"
"k a","Parse error due to initialization of constexpr value","101246","Previously, VectorCAST/C++ incorrectly gave the parse error ""expression must have a constant value"" for some initializations of constexpr values. This problem has been resolved in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Handle double dependency flags with and without spaces with GNU","101280","Previously, when using the vcwrap workflow, VectorCAST Cover would incorrectly handle a build command with a dependency option such as -MF when used without a space with the gcc compiler. VectorCAST version 2024 SP4 fixes this issue such that the dependency option is handled correctly when used with or without a space.","Correction in newer version (release notes)","No Risk. This bug would likely lead to an obvious build failure easily detected by a developer.","No Risk"
"k a","Some C++ examples do not compile with newer C++ standards","101282","In previous versions of VectorCAST/C++, the STL and Exceptions example environments would not build with the latest C++ standards due to the use of obsolete throw specifications. In VectorCAST version 2024 SP4, the examples have been changed to no longer use throw specifications in function prototypes.","Correction in newer version (release notes)","No Risk. This bug affects example environments which do not impact the correctness of user's test.","No Risk"
"k a","Set '-ftrack-macro-expansion' macro only for appropriate gnu versions","101301","Previously, VectorCAST Cover incorrectly added the '-ftrack-macro-expansion=0' macro to the preprocess command for all versions of the gcc compiler, rather than gcc version 4.7 and higher. This problem has been fixed in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk, from VectorCAST default preprocess, compile and link options will be overwritten with options which are used in OB projects","No Risk"
"k a","Environment builder crash when using parallel processing and DONT_STUBunit contains template alias","101334","Previously, when using parallel processing, where VCAST_NUM_JOBS is set to a number greater than 1, VectorCAST/C++ would potentially fail to build environments for C++17 code containing alias templates in DONT_STUB units. This issue has been fixed in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a builder crash which is an obvious build blocker.","No Risk"
"k a","Handle a compiler mismatch due to different path separators in vcwrap","101362","Previously, vcwrap would not instrument source files if the build command contained a compiler path that differs only in path separators from the compiler path configured in the Cover environment. This problem has been fixed in VectorCAST Cover 2024 SP4 so that the source files are now instrumented correctly.","Correction in newer version (release notes)","No Risk. This bug would prevent instrumentation which would be an obvious build blocker.","No Risk"
"k a","VectorCAST Project gives no indication of a problem when running a --clicast-args command on an unbuilt environment","101415","Previously, no error was given when the user entered a '--clicast-args <args>' command on a VectorCAST Project where one or more environments were not built. This problem is fixed in VectorCAST version 2024 SP4, where a message is displayed indicating that any unbuilt environments were unable to be opened.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that provides better feedback for an obvious problem.","No Risk"
"k a","Instrumentation data failed to load","101441","In previous versions of VectorCAST/C++, instrumenting a source file which contains a lambda inside a template specialization member function would result in an instrumentation failure.This has been fixed in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is an instrumentation failure which would be a build blocker.","No Risk"
"k a","Clicast commands that call clicover require 2 NVLM licenses in Debian-basedsystems","101471","Previously, VectorCAST manage commands that called clicast or clicast commands which called either clicover or the environment builder incorrectly required two NVLM licenses on Debian-based Linux systems. This problem has been resolved in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a licensing issue that does not affect test correctness.","No Risk"
"k a","Logic Assignment window should allow flexible column widths","101476","Previously, when using the Variant Logic feature in a C/C++ unit test environment, the Logic Assignment Editor did not permit resizing of the columns. This functionality is now supported in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a usability bug.","No Risk"
"k a","Coded test link failure when environment is configured for STDOUT mode","101502","In previous versions of VectorCAST/C++, coded test environments with VCAST_NO_STDIN:TRUE would fail to link when executing the harness for range data collection. This problem is fixed in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a linker error easily detected.","No Risk"
"k a","Applying a corrected probe point after a compile error causes crash or blankcoverage viewer","101508","Previously, VectorCAST/C++ crashed or displayed a blank coverage viewer after the user had applied an ill-formed probe point which caused a compile error, corrected it, and then re- applied the probe point. This problem has been resolved in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This bug causes an obvious crash or blank screen which is easily detected.","No Risk"
"k a","Metrics report is empty in SFP for UNIT environments without coverageinformation","101529","Previously in Source File Perspective (SFP) VectorCAST the Metrics Report would be empty for Unit environments without instrumentation data. In VectorCAST version 2024 SP4 the report shows source files and subprograms if complexity information is present. This maintains the behavior present for Translation Unit Perspective (TUP).","Correction in newer version (release notes)","No Risk. An empty report would be recognized easily.","No Risk"
"k a","Parse error in g++ mode when template argument deduction used for aliastemplates","101534","Previously, VectorCAST/C++ would fail to parse some g++ code that utilized class template argument deduction for alias templates. This problem has been fixed in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","manage command '--cfg-to-compiler' gives unhelpful error when --levelspecified","101535","In previous versions of VectorCAST Project, an erroneous error message would be displayed when the --level argument was given along with --cfg-to-compiler. This problem has been resolved in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a usability bug with a command-line argument.","No Risk"
"k a","SFP aggregate report shows incorrect messages for uninstrumented files when VCAST_DISPLAY_EMPTY_COVERAGE = TRUE","101538","Previously, if using Source File Perspective and the option VCAST_DISPLAY_EMPTY_COVERAGE=TRUE, the Aggregate Coverage Report would display incorrect messages for source files without any instrumentation. This problem has been fixed in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a false positive incorrect message, which when noticed could be inspected.","No Risk"
"k a","Full Report incorrectly shows ""No Coverage Results Exist"" in the Overall Results section","101541","Previously, the Full Report in a VectorCAST/C++ unit test environment incorrectly displayed the text ""No Coverage Results Exist"" instead of ""0 / x (0%)"" when the coverage option ""Source File Perspective"" (VCAST_COVERAGE_SOURCE_FILE_PERSPECTIVE) was set to True. When the option was set to False, meaning Translation Unit Perspective was in use, the Overall Results section was correct. This problem has been corrected in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This is a minor reporting bug which happens only when 0% coverage is present.","No Risk"
"k a","Covered By Analysis Report with SFP set displays coverage using bothregular result and CBA result","101564","Previously, when the coverage option ""Source File Perspective"" (SFP) was set to True and the Cover environment contained both a Covered by Analysis (CBA) result and an execution result of the same name, the CBA report displayed coverage information that combined both results, when only the CBA result should have been used. This problem has been resolved in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk , ""Source File Perspective"" is not used.","No Risk"
"k a","MC/DC decisions are missing from the Aggregate Coverage report formember initializers with SFP set","101576","Previously, in C/C++ unit test environments and Cover environments with the Coverage option ""Source File Perspective"" (SFP) set to True and coverage type MC/DC or Statement+MC/DC, the Aggregate Coverage report omitted MC/DC decisions within member initializers. This problem has been fixed in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk , ""Source File Perspective"" is not used.","No Risk"
"k a","MC/DC tables are missing from SFP reports for decisions within memberinitializations","101593","Previously, in C/C++ unit test environments and cover environments with the Coverage option ""Source File Perspective"" (SFP) set to True and coverage type MC/DC or Statement+MC/DC, the Aggregate Coverage report and the MC/DC Equivalence Tables report omitted the MC/DC Equivalence tables for decisions within member initializations. This problem has been fixed in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk , ""Source File Perspective"" is not used.","No Risk"
"k a","Loading staged instrumentation produces database load errors if thesymlinked header no longer exists","101608","Previously, when using the vcwrap workflow to create a Cover environment, and a symlink is used in the path to the source files while the canonical path is specified in the base directory, a warning was displayed when loading the staged instrumentation. This problem has been fixed in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This bug would be easily detected by a developer.","No Risk"
"k a","Unable to build migrated environment with a relative path to the VariantLogics file","VC-85","Previously, an environment using Test Case Variants failed to build when imported to a VectorCAST Project and then migrated if the path given for VARIANT_LOGICS_PATH was relative. Furthermore, if the user tried to solve the problem by initiating an interactive build, the wizard could not find the variant logics file and was in an error state. These problems have been resolved in VectorCAST version 2024 SP4.","Correction in newer version (release notes)","No Risk. This bug causes an obvious build error easily detected.","No Risk"
"k a","Add support for interrupt keyword for Code Warrior MPC target","34538","Previously, VectorCAST/C++ returned an error when parsing CodeWarrior MPC code containing the interrupt keyword. This problem has been resolved in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Handle Tasking Tricore keyword __syscallfunc","37123","Previously, VectorCAST/C++ generated an error when parsing Tasking Tricore source code containing the keyword __syscallfunc. This problem has been resolved in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Parse error comparing enum and int for --lynxos C++ code if gnu_version is40300 or earlier","89602","Previously, VectorCAST/C++ gave the error message 'more than one operator ""==""matches these operands' for comparisons between int and enum values in LynxOS C++code if the --gnu_version parser flag was set to 40300 or earlier. This problem has been resolved in VectorCAST version 2024 SP3 when using the --lynxos parser flag.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Compile error in harness for Microchip when stubbed object uses__attribute__","90393","Previously, when using the Microchip compiler, VectorCAST RSP incorrectly generated the test harness for source code containing '__attribute__', substituting '__attribute' instead, causing a compile error. This problem has been resolved in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","""Assertion failed"" error message when entering 'clicast -e <env> get_option","98415","LIBRARY_INCLUDE_DIR' Previously, calling the command 'clicast get_option LIBARAY_INCLUDE_DIR' command with an environment specified (-e <env>) caused the command to crash. This problem has been resolved in VectorCAST version 2024 SP3. Note that the specified environment is ignored, and the option's value is read from the CCAST_.CFG file as usual.","Correction in newer version (release notes)","No Risk. This is a GUI crash which is an easily detectable usability bug that does not affect test correctness.","No Risk"
"k a","Stack trace when getting results from source in DataAPI","100550","In previous versions of VectorCAST, accessing vector.apps.DataAPI.cover_api.SourceFile.results metrics returned a stack trace when a Project was set to Source File Perspective mode. This issue has been resolved in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This bug causes a visible stack trace which is easily detected and would be an obvious sign of a problem.","No Risk"
"k a","Environment builder crashes for some source code with template functionscontaining recursive calls","100651","In previous versions of VectorCAST/C++, the environment builder could crash when checking whether a template-based function should be testable if the function was recursive. This problem is fixed in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a builder crash which is an obvious build blocker.","No Risk"
"k a","Incorrect instrumentation point(s) on conditional statements","100972","In previous versions of VectorCAST Cover and VectorCAST/C++, instrumenting a conditional operator with operands defined in an anonymous struct, union, or class could result in an error in the instrumented file when instrumenting for Branch-based coverage types. This problem has been fixed in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is an instrumentation error that would result in a compile error which is easily detected.","No Risk"
"k a","Detect std:: exceptions without user code","100990","Previously, types defined in the std:: namespace could only be detected and caught via User Code in a VectorCAST/C++ unit test environment. VectorCAST version 2024 SP3 makes such types available in the Parameter Tree, supporting detecting and catching std:: exceptions without the need for user code.","Correction in newer version (release notes)","This is a feature.","No Risk"
"k a","Constant template argument to standard library container can cause a crash","101051","Previously, VectorCAST/C++ could crash during environment build if the source code under test specified the second template argument to a standard library container such as std::map as a constant. This problem has been resolved in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a build crash which is an obvious build blocker.","No Risk"
"k a","Ada floating point comparison fails when tolerance extends outside therange of the type","101082","In previous versions of VectorCAST/Ada, using a floating point tolerance could cause a value comparison to fail if the tolerance range boundary was outside the range of the type and the actual value was near the range boundary of the type. This problem is fixed in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk, VectorCAST/Ada is not used","No Risk"
"k a","Coverage analysis lost when placed on multi-line macro","101109","VectorCAST version 2024 SP3 fixes a problem where CBA failed to import correctly for macros containing more than one coverable item of the same coverage type resulting in missing coverage analysis.","Correction in newer version (release notes)","No Risk. This bug results in missing coverage analysis - a false positive which is easily detectable during test creation.","No Risk"
"k a","The clicast help output is not helpful when name matches multiple options","101189","In previous versions of VectorCAST, clicast help for an option whose name is a prefix of another option (e.g., C_COMPILE_CMD is a prefix of C_COMPILE_CMD_FLAG) would not provide detailed help for the specified option. This has been fixed in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a usability bug in the command-line help.","No Risk"
"k a","Project hangs if env var mistakenly changed to match base_dir root","101205","Previously, the VectorCAST project could become unresponsive if an existing environment variable matches a base directory name. This problem is resolved in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a usability bug (a freeze or hang) that does not affect test correctness.","No Risk"
"k a","Parse error when the ""ext_vector_type"" attribute appears outside of atypedef","101214","VectorCAST/C++ incorrectly gave the error 'the ""ext_vector_type"" attribute may appear only in a typedef' for some usages of the __attribute__ ext_vector_type outside of typedefs. This problem has been resolved in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","RGW file selector popup clears text field when window is canceled","101243","Previously, when using VectorCAST RGW, canceling the file dialog for the DOORS client executable wiped the contents of the following RGW fields: > Doors (Authentication Tab): DOORS Client Executable > Visure (Authentication Tab): Visure Client Installation Directory This problem is fixed in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI.","No Risk"
"k a","Provide a return code for a push failure when using TESTinsights","101259","Previously, when a push action encountered an error when using TESTinsights, the return code was 0, incorrectly indicating success. To be consistent with other TESTinsights commands, VectorCAST version 2024 SP3 provides a non-zero return code in this situation, and also displays information about the arguments used in the failed push command.","Correction in newer version (release notes)","No Risk. This is a usability bug with the command-line interface. The problem would be easily detected by the lack of a successful push.","No Risk"
"k a","Small degradation in environment build performance in unit testenvironments with many source files and coverage instrumented","101267","VectorCAST/C++ version 2024 SP3 improves performance when building C/C++ unit test environments with a large number of units under test and coverage enabled, fixing a small regression introduced in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a performance issue that does not affect test correctness.","No Risk"
"k a","When using NVLM, setting product mode to Ada Target does not updateADACAST_.CFG file","101275","When using VectorCAST/Ada with NVLM licensing, selecting File->Set Product Mode->Ada Target Unit Test Environment and then clicking the Create New Environment button caused subsequent environments to be built with Ada Host settings, instead of Ada Target settings due to incorrect information in the ADACAST_.CFG file. This problem has been resolved in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI that would likely lead to an obvious build failure.","No Risk"
"k a","Class not testable when it contains member that is shared_ptr of an abstractwith a template-based field","101325","In previous versions of VectorCAST/C++, classes with a member where a template parameter was an abstract type were sometimes not considered testable. This problem has been fixed in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. The issue is easily detectable and thus the method that is not testable with VectorCAST could be tested another way.","No Risk"
"k a","Corrupt environment database when building C++ environment withoverloaded constructors when using parallel processing","101328","Previously, when using parallel processing, where VCAST_NUM_JOBS is set to a number greater than 1, VectorCAST/C++ encountered internal errors when building some environments containing overloaded constructors, leading to environment database corruption. This issue has been fixed in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","The build process fails or terminates abnormally due to the internal error. As a result, the test environment is not successfully created, and no test execution can occur. This is easily detected and thus of no risk.","No Risk"
"k a","'atg' executable now uses desktop or server edition licenses","101352","Starting with VectorCAST version 2024 SP3, the 'atg' executable uses a Desktop Edition license rather than a Server Edition license when the environment variables VCAST_USE_CI_LICENSES and VCAST_USING_HEADLESS_MODE are not set.","Correction in newer version (release notes)","No Risk. This is a licensing update.","No Risk"
"k a","Preprocessing error in VectorCAST 2024 SP2 environments when optionC_PREPROCESS_FILE is set","101374","In VectorCAST/C++ and VectorCAST/QA version 2024 SP2, configurations using a non-empty value for the C_PREPROCESS_FILE option would fail after preprocessing with no details in the error message. This problem is fixed in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a preprocessing error which is a build blocker and easily detected.","No Risk"
"k a","Parse error ""integer conversion results in truncation"" can occur duringtemplate instantiation with __attribute__ enable_if","101380","Previously, VectorCAST/C++ incorrectly gave the parse error ""integer conversion results in truncation"" for some assignments in functions modified by __attribute__ enable_if during template instantiation. This problem has been resolved in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Slow instrumentation when option ""Instrument template instantiations"" isTrue","VC-103","Previously, under some circumstances, source file instrumentation in a VectorCAST Cover environment could be slow when the option ""Instrument template instantiations"" (VCAST_COVERAGE_FOR_TEMPLATE_INSTANTIATIONS) was set to True. This problem has been resolved in VectorCAST version 2024 SP3.","Correction in newer version (release notes)","No Risk. This is a performance issue that does not affect test correctness.","No Risk"
"k a","Support _amemd8 and _memd8 intrinsics for Code Composer","23653","Previously, VectorCAST RSP incorrectly gave errors for source code containing the Code Composer intrinsics _amemd8 and _memd8. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","This is a feature for Code Composer Studio.","No Risk"
"k a","Logical expressions in rvalue assignments should be included in MC/DC tests","50643","Previously, VectorCAST/C++ did not include tests for boolean operators in rvalue assignments when generating MC/DC tests. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","Potential Risk. This bug leads to missing MC/DC coverage. The report may look fine but the tool is silently failing to generate the required tests. This is a severe risk to regulatory compliance.
A problem solving process has been initiated to investigate the impact of these problems/bugs on medical devices already developed with the software tool.","Risk exists"
"k a","Renesas asm statement incorrectly treated as function call when callcoverage enabled","65891","In previous versions of VectorCAST RSP, the Renesas asm keyword was not recognized, causing a compile error in the test harness when instrumenting function call coverage. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Issues applying Startup file changes to project","88232","In previous versions of VectorCAST Project, changes to the Startup Files option (VCAST_STARTUP_FILE) such as adding or removing a file from the list could be lost when applying changes from an environment back to the Project. These issues have been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No risk, only impact on usability.","No Risk"
"k a","Macro value used in testcase is incorrect when the value is a cast to a float","89009","Previously, VectorCAST/C++ used incorrect macro values in testcases when the macro value in the source code was cast to a float, such as '#define IntCastToFloat (float)3'. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk, there is no further information, probably it can be a silent error in SFP Mode, in Translation Unit all used macros will be resolved with real code.","No Risk"
"k a","Parse error for designator for an anonymous union member when using Tasking compiler","89067","Previously, VectorCAST RSP gave the error ""a designator for an anonymous union member can only appear within braces corresponding to that anonymous union"" for some designators when using the Tasking compiler. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Incorrect error message on script import error when VALUE_USER_CODE isused for a return value instead of STUB_VAL_USER_CODE","90377","Previously, VectorCAST/C++ incorrectly gave the error ""Expected data not allowed for 'return' value in stub"" when the 'VALUE_USER_CODE' command was used in a test script for a return value of a stub instead of the command 'STUB_VAL_USER_CODE' after an expected value command in the script. Starting with VectorCAST version 2024 SP2, the 'VALUE_USER_CODE' command in that case is treated as if it were 'STUB_VAL_USER_CODE', and when exported, contains the corrected command.","Correction in newer version (release notes)","No Risk. This is a usability bug with a command-line script. The error is obvious and easily corrected.","No Risk"
"k a","Parse error for clang code with __attribute__ pass_object_size","90738","Previously, VectorCAST RSP incorrectly gave an error for some clang code with __attribute__ pass_object_size. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","IEC-62304 Class C (Medical) Coverage should not use simplified condition coverage by default","91235","Previously, setting the VectorCAST Industry mode to IEC-62304 and the Coverage type to Class C (Medical) Coverage would incorrectly enable the simplified condition coverage option, VCAST_SIMPLIFIED_CONDITON_COVERAGE. This problem is fixed in VectorCAST version 2024 SP2. The IEC-62304 Class C (Medical) coverage type does not use simplified MC/DC condition coverage.","Correction in newer version (release notes)","No Risk, this option is not used.","No Risk"
"k a","Test harness does not compile for classes containing maps of forward declared types","94403","Previously, VectorCAST/C++ generated test harness code that did not compile for source code with classes containing std::map or std::multimap fields with forward declared contents. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Harness compile error on generated interface file when template staticmember specialized","95178","Previously in VectorCAST/C++, in environments with split user code (that is, the Build option VCAST_SPLIT_UC_FILES was set to True) or built with Object Testing mode, a harness compile error would occur when the UUT contained a template static array member that was specialized. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Parse error for GNU C constant aggregate variables in initializers of static-lifetime variables","96675","Previously, VectorCAST/C++ incorrectly gave the error ""expression must have a constant value"" for GNU C code with constant aggregate variables in initializers of static-lifetime variables. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Improve information provided by 'clicast cover base_dir status'","97076","VectorCAST Cover version 2024 SP2 includes an improved base directory status report, providing better readability by organizing files under the corresponding base directories and reducing long file path names. clicast -e <env> Cover Base_dir Status","Correction in newer version (release notes)","No Risk. This is a usability enhancement that improves report readability.","No Risk"
"k a","Executing ""clicast execute batch"" command with -u parameter should onlyrun the tests in the specified unit","97229","Previously, the clicast ""execute batch"" command ran tests for the entire environment if a unit but not a subprogram was specified. Starting with VectorCAST version 2024 SP2, the command only runs the tests for the given unit. The compound and initialization tests are treated as if they belong to the first unit under test.","Correction in newer version (release notes)","No Risk. This bug could lead to additional tests being run.","No Risk"
"k a","vcshell should handle compile commands followed by -Wp,-I<include dir>","97375","In previous versions of VectorCAST/C++, include directories that bypassed the compiler and were passed directly through to the preprocessor (i.e., -Wp,-I<dir>) when creating the vcshell database were absent from subsequent vcdb queries. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This bug would likely result in an obvious build failure easily detected.","No Risk"
"k a","'clicast help option <option>' command fails when called without languagespecifier","98175","Previously, the 'clicast help option' command in VectorCAST/C++ and VectorCAST/Ada gave the error ""Did not understand category"" when called with an option specific to either C or Ada, but without the language flag (-lc or -lada). This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a usability bug with a command-line interface.","No Risk"
"k a","Elements of char and unsigned char arrays incorrectly shown in report asstring type","98777","Previously, when building a test case in a C++ unit test environment with an unsigned char array in the Parameter Tree, VectorCAST/C++ properly displayed the type as unsigned char. However, when the test was executed, the Execution report incorrectly displayed the type as a string for both Input and Expected Values. This problem is fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. Replacing char array with string data types in a report could be misleading but is easily detectable and does not affect harness build.","No Risk"
"k a","VectorCAST fails to stub function and incorrectly reporting ""Function has areturn type which cannot be copied""","99466","Previously, VectorCAST/C++ incorrectly treated return types with defaulted copy constructors as not copyable if they inherited from classes with private copy constructors made accessible through friendship. This problem caused link errors due to VectorCAST's refusal to stub functions returning these types. This issue has been fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. The inability to stub a function is a build blocker which is easily detected.","No Risk"
"k a","Handle compiler version in vcwrap BCIs for C source files(C_ALT_EDG_FLAGS)","99669","Previously, when using the vcwrap workflow in a C++ environment with C source files,VectorCAST Cover would use the compiler version specified in C_EDG_FLAGS even when the compiler in the build command matched the compiler in C_ALT_COMPILE_CMD. This behavior has been modified in VectorCAST version 2024 SP2, such that in this case vcwrap uses the compiler version specified in C_ALT_EDG_FLAGS.","Correction in newer version (release notes)","No Risk, Mixed C/C++ OB project are devide into 2 VectorCAST compiler","No Risk"
"k a","DataAPI error when GUI or clicast ""tools execute_commands"" is used todelete all tests prior to test import and execution","99875","Previously, the DataAPI error of the type ""AttributeError: 'NoneType' object has no attribute 'parent_id'"" sometimes occurred when the GUI or clicast ""tools execute_commands"" was used to delete all tests prior to test import and execution. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. An API error that prevents test import/deletion could break an automated workflow. The error is obvious and thus consequent measures can be taken into account.","No Risk"
"k a","Include both stdout and stderr in VectorCAST Project during environmentbuild and execute","99889","In previous versions of VectorCAST Project, commands executed during environment build and execute would omit logging stderr messages. This problem has been fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a usability enhancement. It does not affect test correctness.","No Risk"
"k a","Set Product Mode doesn't change mode if wizard had previously been opened","99925","Previously, File -> Set Product Mode had no effect if a mode was previously selected by bringing up the new environment wizard. Starting with VectorCAST version 2024 SP2, the product mode will always change.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI.","No Risk"
"k a","Handle /Fe and /Fo simultaneously in a Compile & Link MSVC command","100059","Previously, the vcwrap workflow was generating the instrumented files in the wrong directory for MSVC compile and link commands when a directory was specified with a /Fo option. VectorCAST Cover version 2024 SP2 resolves this issue and the instrumented files are now generated in the correct directory.","Correction in newer version (release notes)","No Risk. This bug would likely cause an obvious build failure.","No Risk"
"k a","Incorrect settings in compiler templates for ARM Clang","100080","In previous versions of VectorCAST RSP, the ARM Clang compiler templates incorrectly set two compiler options, namely ""Collapse expanded header files"" (VCAST_COLLAPSE_STD_HEADERS) and ""Add a GNU system header marker"" (VCAST_GNU_SYSTEM_MARKER), causing compile errors in the test harness related to the system library. In addition, the templates lacked options in the linker command for generating the vcast.map file. These problems are resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This bug would likely cause an obvious build failure.","No Risk"
"k a","Error instrumenting MCDC coverage for a scoped class member variableinside of a condition","100100","In previous versions of VectorCAST/C++, instrumenting a scoped class member variable inside of a condition with MCDC coverage enabled could result in a syntax error in the instrumented file. This has been resolved in VectorCAST/C++ version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is an instrumentation error that causes a compile error which is easily detected.","No Risk"
"k a","Harness compile error when VCAST_NO_MALLOC enabled and pointer sizelarger than a long","100217","In previous versions of VectorCAST RSP, a compile error in the test harness could occur in a Target environment with Target options VCAST_NO_MALLOC or VCAST_NO_STDLIB set to TRUE when the specified compiler's pointer size was larger than a long. This problem is fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Parse error with code using _Float32 when --gnu_version under 130000","100222","Previously, VectorCAST/C++ gave parse errors for GNU code containing _Floatn types such as _Complex _Float32. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","""Fail if no expected return"" should not fail tests with an Expected returnvalue that is a struct field or array element","100227","Previously, VectorCAST/C++ and VectorCAST/Ada incorrectly considered tests with a struct field return Expected Value or array element return Expected Value as having no Expected return value, and thus did not execute the tests when the Execute option ""Fail if no expected return"" (VCAST_TESTCASE_FAIL_ON_NO_EXP_RETURN) was set to True. The tests were incorrectly reported as failed. Starting with VectorCAST version 2024 SP2, those tests are executed.","Correction in newer version (release notes)","No Risk. This bug causes a test to be incorrectly reported as failed which is easily detected.","No Risk"
"k a","Eliminate warnings for unused labels and local variables","100235","In previous versions of VectorCAST/C++, harness compile warnings occurred in some configurations due to unused labels and local variables. These warnings are fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a code quality improvement that does not affect test correctness.","No Risk"
"k a","Assist user in identifying why a source file is not being instrumented whenusing vcwrap workflow","100274","Previously, VectorCAST Cover's vcwrap workflow did not display a helpful user message if a source file was not instrumented because it was deny-listed in the Cover environment, making it difficult to know exactly why it wasn't instrumented. This problem has been resolved in VectorCAST Cover version 2024 SP2. A helpful message is displayed and other user messages have also been updated.","Correction in newer version (release notes)","No Risk. This is a usability enhancement.","No Risk"
"k a","Reduce use of VCAST_strlen and VCAST_memset","100305","In VectorCAST/C++ version 2024 SP2, the unit test harness has been updated to make fewer calls to VCAST_strlen and VCAST_memset, resulting in a modest performance improvement.","Correction in newer version (release notes)","No Risk. This is a performance enhancement that does not affect test correctness.","No Risk"
"k a","Show NVLM license ID in diagnostic report for products currently reserved","100440","Starting with VectorCAST version 2024 SP2, the license ID of the currently-reserved NVLM licenses are displayed in the Available Licenses report or that section within the Diagnostic Report when NVLM licensing is in use. To generate the report:Help > Available Licenses or Help > Diagnostics > Create Diagnostic Report with ""Check License"" selected. clicast -lc|-lada REports Diagnostic [<outputfile>]","Correction in newer version (release notes)","No Risk. This is a usability enhancement for troubleshooting licensing issues.","No Risk"
"k a","Have --ignore-level be able to ignore a specific environment","100531","Previously, when using the command line for VectorCAST Project (manage), the ""--ignore-level"" argument only allowed a compiler or test suite level to be specified for reporting,building, and executing. VectorCAST version 2024 SP2 updates this argument and allows more values from the project tree, down to the environment level as a valid argument input.","Correction in newer version (release notes)","No Risk. This is a usability enhancement.","No Risk"
"k a","Incorrect output generated for dependency command when using thevcwrap workflow","100533","Previously, VectorCAST Cover's vcwrap workflow would generate the wrong name for a dependency file when a build command contained dependency file generation options such as -MD, but no dependency file is specified and an output file is specified without a file extension. This issue has been fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This bug would likely cause a build failure easily detected by a developer.","No Risk"
"k a","Better error needed when ""Preprocess file"" option is invalid","100554","In previous versions of VectorCAST/C++, invalid values for the ""Preprocess file"" option (C_PREPROCESS_FILE) would result in unclear error messages. In VectorCAST version 2024 SP2, the error message has been improved to indicate that the option's value must contain a '?'.","Correction in newer version (release notes)","No Risk. This is a usability enhancement.","No Risk"
"k a","Incorrect translation when converting empty values for file pathconfiguration items","100556","In previous versions of VectorCAST, when an empty configuration value was set in the Project for the following items: VCAST_STARTUP_FILE, VARIANT_LOGICS_PATH, VCDB_FILENAME, VCAST_TEST_VALUES_DICTIONARY, the value would be erroneously interpreted when building the environment. This issue has been fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This bug would likely cause an obvious build failure easily detected by a developer.","No Risk"
"k a","Support case-insensitive file extensions on Windows when using the vcwrapworkflow","100638","Previously, the vcwrap workflow did not support case-insensitive source file extensions on Windows with a python BCI. This problem is fixed in VectorCAST Cover version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a usability enhancement.","No Risk"
"k a","Parser errors after globals with tic ( ' ) in their type","100647","Previous versions of VectorCAST/Ada would incorrectly parse global variable declarations with a tic ( ' ) in the type, treating subsequent code as a list of more globals. This is fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","File -> Set Product Mode -> Coverage Environment puts us in system testingmode","100670","Previously, File -> Set Product Mode -> Coverage Environment put VectorCAST in system testing mode, causing the new system testing wizard to appear if the New Environment button was clicked. Starting with VectorCAST version 2024 SP2, selecting File -> Set Product Mode -> Coverage Environment puts VectorCAST into coverage environment mode.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI.","No Risk"
"k a","Problem selecting coverage in Library Interface Mode environment","100682","Previously, VectorCAST/C++ was not able to re-select coverage results for executed tests in an environment that was built in Library Interface Testing mode with a coverage-instrumented library. The checkbox for selecting and deselecting the result would also not respond to mouse clicks. This problem is fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI.","No Risk"
"k a","Test-specific user code repeatedly compiled if an Auto Initialization testexists","100687","In previous versions of VectorCAST/C++, the presence of an <<INIT>> testcase set to be an automatic initialization or automatic finalization test could cause test-specific user code to be repeatedly compiled before each test execution. This problem is fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a performance issue that does not affect test correctness.","No Risk"
"k a","File -> Set Product Mode -> Ada Target Unit Test Environment puts us inAda Host mode","100697","Previously, selecting File -> Set Product Mode -> Ada Target Unit Test Environment put VectorCAST into Ada Host mode. Starting with VectorCAST version 2024 SP2, selecting an Ada Target will put VectorCAST into the Ada Target mode, causing a checkout of the target license.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI.","No Risk"
"k a","Instrumentation points do not merge on expended macros","100722","Previously, when using the coverage option ""Source File Perspective"" (SFP) and source files with complex macros, the Coverage viewer displayed one part of an expression as covered by variants, while the other parts were displayed as uninstrumented. VectorCAST would also not properly display coverage results for this code. These problems are resolved in VectorCAST/C++ and VectorCAST Cover version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a false positive issue where an expression is being covered but the coverage information is incorrect - it is easily detectable during test development.","No Risk"
"k a","Handle preprocess command for gcc in JIT","100730","Previously, the vcwrap workflow would incorrectly identify a preprocess command for the gcc compiler as a compile and link command. VectorCAST Cover version 2024 SP2 fixes this issue so that a preprocess command is correctly identified as one and the command will be executed without any modifications.","Correction in newer version (release notes)","No Risk. This bug would likely lead to an obvious build failure.","No Risk"
"k a","Handle preprocess command for MSVC in vcwrap workflow","100731","Previously, the vcwrap workflow incorrectly identified a preprocess command for the MSVC compiler as a compile and link command. This resulted in incorrectly preprocessing the instrumented source file. This issue is fixed in VectorCAST Cover version 2024 SP2 and the preprocess command is correctly identified as one and the command executed without any modifications.","Correction in newer version (release notes)","No Risk. This bug leads to an obvious build failure.","No Risk"
"k a","Handle preprocess command for GHS in vcwrap workflow","100732","Previously, when using the vcwrap workflow, VectorCAST Cover would incorrectly identify a preprocess command for the Green Hills compiler (GHS) as a compile and link command. VectorCAST Cover version 2024 SP2 fixes this issue so that a preprocess command is correctly identified as such and the command will be executed without any modifications.","Correction in newer version (release notes)","No Risk. This bug leads to an obvious build failure.","No Risk"
"k a","Instrumented file is incorrectly named when using MS Visual C++ with thevcwrap workflow","100738","Previously, VectorCAST Cover would incorrectly name the instrumented file for a MicrosoftVisual C++ compile and link command with a single source file when an object file was specified with a /Fo option when using the vcwrap workflow. This problem is fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This bug causes an obvious build failure.","No Risk"
"k a","Handle preprocess command for Clang in vcwrap workflow","100743","Previously, the vcwrap workflow would incorrectly identify a preprocess command for Clang compiler as a compile and link command. VectorCAST Cover version 2024 SP2 fixes this issue so that a preprocess command is correctly identified as such and the command is executed without modification.","Correction in newer version (release notes)","No Risk. This bug leads to an obvious build failure.","No Risk"
"k a","Handle preprocess command for TASKING with vcwrap workflow","100744","Previously, when using the vcwrap workflow, VectorCAST Cover would incorrectly identify a preprocess command for the TASKING compiler as a compile and link command instead. VectorCAST Cover version 2024 SP2 fixes this issue so that a preprocess command is correctly identified as such and the command is executed without any modifications.","Correction in newer version (release notes)","No Risk. This bug leads to an obvious build failure.","No Risk"
"k a","VectorCAST sometimes unable to open environments after building andexecuting in GUI when NVLM licensing used","100756","Previously, when using NVLM licensing, VectorCAST was sometimes unable to open environments after building and executing within a VectorCAST Project in vcastqt. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI.","No Risk"
"k a","Test data is lost when shared between environments with different accessibility of test case parameters","100771","Previously, in a VectorCAST Project containing two environments with accessible or inaccessible portions of source code depending on their symbolic constant configurations, test script data that was held in the Unnapplied Test Data node was not correctly re-applied when the environment where that data was accessible was opened, causing test data loss. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","NoRisk, lost test data can be recovered from GIT.","No Risk"
"k a","Parse error in keil mode with functions overloaded on const vs non-constreference","100833","Previously, VectorCAST/C++ gave the parse error ""invalid redeclaration of member function"" with Keil code where overloaded functions had parameter types that differed only by const vs non-const reference. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Keil parse error for reinterpret_cast for a __packed struct","100837","Previously, VectorCAST/C++ incorrectly returned an error ""reinterpret_cast cannot cast away const or other type qualifiers"" for Keil code with a reinterpret cast of a __packed type. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Automatic refresh of Variants Logics file does not work when specified withrelative path","100841","Previously, the Variants Logics file was not refreshed after being modified outside of a VectorCAST/C++ unit test environment if it had been specified with a relative path, causing test case status to be out of date. Since the Variant Logics file should be automatically refreshed prior to test case execution but wasn't, the wrong test cases were executed. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk, it is a user error not an application error.","No Risk"
"k a","Parse error on call to __atomic_fetch_add with parameter value which haspointer to double type","100865","VectorCAST/C++ incorrectly returned an error ""first argument must be a pointer to integer or enum type"" when parsing Clang code containing calls to __atomic_fetch_add where the first parameter has a pointer to double type. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Compound slot iteration editor very sluggish when there are thousands ofsymbolic constants","100870","Previously, while the user was editing the Iterations cell for a slot in the Compound test case editor in an environment with a very large number of symbolic constants, the VectorCAST/C++ main window became unresponsive. This problem has been fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a performance issue that does not affect test correctness.","No Risk"
"k a","Remove boolean expressions report","100934","VectorCAST version 2024 SP2 removes the deprecated clicast-only commands to generate a list of boolean expressions in the source files of a VectorCAST/C++ or VectorCAST Cover environment. The following commands have been removed:clicast -e <cover env> cover report functions clicast -e <env> report functions","Correction in newer version (release notes)","No Risk. This is a usability change that removes a deprecated feature.","No Risk"
"k a","Harness code to allow type support on some const* types doesn't compilewith keil compilers","100959","In previous versions of VectorCAST/C++ a compiler error of the form ""argument of type ""const char*"" is incompatible with parameter of type ""char*"" sometimes occurred for a generated harness file for some C compilers. This problem is resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Parse error ""an initializer cannot be specified for a flexible array member""given for valid IAR code","100976","Previously, VectorCAST RSP incorrectly gave the error ""an initializer cannot be specified for a flexible array member"" when parsing some IAR code containing initializations of unconstrained arrays. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Test's string value that is the same as a macro gets replaced with the macrovalue during test execution","100987","In previous versions of VectorCAST/C++, test cases with string values saved as literal values which matched macro names would incorrectly have the literal value replaced with the macro value at test execution time. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","Risk or Minor Risk, but not High Risk because probability of occurrence is very low. 
A problem solving process has been initiated to investigate the impact of these problems/bugs on medical devices already developed with the software tool.","Risk exists"
"k a","VectorCAST crashes when coded test file with Chinese characters is loaded","101013","Previously, VectorCAST/C++ would crash on certain systems when loading a Coded Tests file containing international (UTF-8) characters. This problem has been fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a crash which is an easily detected usability bug that does not affect test correctness.","No Risk"
"k a","Quickparse fails with IAR compiler tag if directory has multiple spaces andmultiple units present","101036","In previous versions of VectorCAST RSP, environment builds could fail during ""Quickparse"" when the compiler was IAR and a source directory path contained spaces and multiple units were in use. This problem is fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a build failure which is easily detected.","No Risk"
"k a","Parse error ""expression must have a constant value"" incorrectly given forsome assignments of const values","101049","Previously, VectorCAST/C++ incorrectly gave the parser error ""expression must have a constant value"" for some assignments of const values in the source code under test during environment build. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Harness compile error due to duplicate parameter names for parameter packargs","101060","In previous versions of VectorCAST/C++, a harness compile error could occur when harness code was generated for a function using a parameter pack and a non-pack parameter whose type was an alias. This problem is fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Constraint error displayed when executing a subprogram's coded tests","101117","Previously, when using the command line to execute all coded tests for a specified subprogram after reloading the coded tests driver subsequent to a modification, VectorCAST/C++ would display a constraint error after execution. This problem has been resolved in VectorCAST version 2024 SP2. For example: clicast -e <env> -u <unit> -s coded_tests_driver EXecute Batch","Correction in newer version (release notes)","No Risk. This is a usability bug in the command-line interface. The error is obvious and easily corrected.","No Risk"
"k a","Parse failure with g++ 13 typedefs for _Float128","101120","Previously, VectorCAST/C++ incorrectly generated an error for GNU system headers containing ""typedef __float128 _Float128;"". This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Use C_PREPROCESS_CMD for C++11 check","101138","Previously, VectorCAST/C++ did not correctly determine that an environment's configuration was not suitable to support Coded Tests if the Compiler option ""Preprocessor command"" (C_PREPROCESS_CMD) did not support C++11 or greater, thus allowing the environment to build when it should have been prevented. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This bug would lead to an obvious build failure which is easily detected.","No Risk"
"k a","Parse error with clang builtin type trait __is_trivially_equality_comparable","101154","Previously, VectorCAST/C++ incorrectly gave the error ""type name is not allowed"" for Clang code containing the type trait helper __is_trivially_equality_comparable. This problem has been resolved in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","FLT_EPSILON can conflict with system/compiler definition","101187","Previously, when Coded Tests support (VCAST_CODED_TESTS_SUPPORT) was enabled, the vUnit framework would provide a conflicting definition for FLT_EPSILON for systems with that constant defined. In VectorCAST/C++ version 2024 SP2, the vUnit framework only provides a definition for FLT_EPSILON when an existing definition does not exist.","Correction in newer version (release notes)","NoRisk, vUnit framework is not used.","No Risk"
"k a","Environment build error ""Internal error loop: write_orig_source_line: couldnot find line""","101204","VectorCAST/C++ version 2024 SP1 did not correctly build some environments with source code using templates and a Library Stub set, causing a catastrophic build error with the error message ""Internal error loop: write_orig_source_line: could not find line"". This problem is fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","No Risk. This is a build error easily detected.","No Risk"
"k a","Distinct globals lost when usingVCAST_ONLY_SHOW_GLOBAL_OBJECTS_IN_ONE_UNIT","VC-20","In previous versions of VectorCAST/C++, a static variable appearing in multiple units would incorrectly be treated as a single global variable when the Builder option ""Only Show Global Objects in one unit"" was set to TRUE. In VectorCAST version 2024 SP2, the static variable is treated as unique in each unit in which it appears.","Correction in newer version (release notes)","NoRisk, it is a display error only.","No Risk"
"k a","Template class array member incorrectly sized in Parameter Tree","VC-21","In versions of VectorCAST/C++ since VectorCAST 2023 SP5, array members of template-based types could be treated as the wrong size if the array size was dependent on a template parameter. This problem is fixed in VectorCAST version 2024 SP2.","Correction in newer version (release notes)","Potential Risk. An incorrectly sized array can lead to buffer overflows or other undefined behavior during test execution which could result in a test passing when it should have failed. This is a silent failure.
A problem solving process has been initiated to investigate the impact of these problems/bugs on medical devices already developed with the software tool.","Risk exists"
"k a","Environment script file (.env) should allow leading white space on commands inside user code sections","71297","Previously, VectorCAST/C++ ignored commands in user code sections of the environment script (.env) if they started with whitespace. This problem has been resolved in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a usability bug with a script file. The error would be obvious.","No Risk"
"k a","Instrumented unit not recompiled during execution with VCAST_AUTO_CLEAR_TEST_USER_CODE set","96087","Previously, if the instrumented test harness was not already compiled, VectorCAST/C++ did not recompile the instrumented test harness prior to batch execution if a unit's test included test case user code and the Execution option ""Automatically clear test user code"" (VCAST_AUTO_CLEAR_TEST_USER_CODE) was set to True. This problem has been resolved in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. easily detected as one gets a build environment fail.","No Risk"
"k a","Specifying additional testable functions for uninstantiated template members suppressed them instead","96612","Previously, if the user unnecessarily specified an uninstantiated template function as ""additionally testable"" (via 'ENVIRO.ADDITIONAL_TESTABLE_FUNCTION' in the environment script), VectorCAST/C++ suppressed the function rather than leaving it testable. This problem has been resolved in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. It is a role of the dev team to justify which functions need to be tested and which not. If a function could not be tested in VectorCAST this would be detected.","No Risk"
"k a","Harness link error when SBF for templates helper struct named differently due to differences in template body","98531","In previous versions of VectorCAST/C++, templates instrumented for SBF stubbing could result in a link error when the template was used in multiple units and the preprocessor generated differing amounts of non-code lines in the template body. This problem is fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a linker error easily detected.","No Risk"
"k a","Parse error for _Noreturn keyword when using the TASKING or MPLAB compilers","99102","In VectorCAST version 2023 SP7 and earlier, VectorCAST/C++ gave an error when parsing TASKING or MPLAB code containing the '_Noreturn' keyword. This problem has been resolved in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","SBF Code inserted before label causes compilation error","99186","Previously, VectorCAST/C++ generated harness code that would not compile when labels were declared in the body of an SBF function. This has been fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Harness compile error because stubbed variable in namespace needs global scope qualifier before type","99272","Previously, VectorCAST/C++ generated incorrect stub code for undefined externs that were declared using a namespace alias from a different scope, causing compile errors. This issue has been fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Template-based member function in a multi-unit environment fails to generate SBF code","99279","Previously, VectorCAST/C++ failed to generate SBF code for some template-based member functions in multiple unit environments if the parent class was testable in a later unit. This caused the SBF capability to be absent in the parameter tree for these functions. This issue has been fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. Lack of SBF capability for template methods. This Is known problem.","No Risk"
"k a","Replace LM_LICENSE_FILE with VECTOR_LICENSE_FILE in FlexNET errormessages","99508","In VectorCAST 2024, license error messages when using FlexNET-based licensing might refer to environment variable LM_LICENSE_FILE. In VectorCAST version 2024 SP1, error messages instead refer to VECTOR_LICENSE_FILE to reflect the fact that FlexNET licensing requires use of VECTOR_LICENSE_FILE.","Correction in newer version (release notes)","No Risk. This is a usability enhancement.","No Risk"
"k a","Coverage instrumentation inserted incorrectly with __FILE__ macro used andVCAST_USE_VCPP enabled","99530","In previous versions of VectorCAST/C++, coverage instrumentation could be inserted incorrectly when the environment's source code utilized the __FILE__ macro and the Compiler option ""Use VectorCAST co-preprocessor"" (VCAST_USE_VCPP) was set to True, resulting in a compile error in the instrumented test harness. This problem is fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This bug causes a compile error which is easily detected.","No Risk"
"k a","Remove denylist options from compile command when using vcwrap workflow","99647","Previously, the vcwrap workflow removed the compiler denylist options from the preprocess command but not from the compile command. VectorCAST Cover version 2024 SP1 removes the compiler denylist options from the compile and dependency (if any) commands. It also removes -Werror from the compiler denylist for gcc, Clang, GreenHills and /WX for MSVC.","Correction in newer version (release notes)","No Risk. Incorrect compiler options would likely result in an obvious build failure.","No Risk"
"k a","Dependency file support for multiple files compile and link","99670","Previously, in a compile and link command with dependency file generation options, where some files were allow-listed while others were deny-listed, the vcwrap workflow incorrectly generated dependency files for instrumented source files. This problem has been fixed in VectorCAST Cover version 2024 SP1.","Correction in newer version (release notes)","No Risk. This bug would likely lead to an obvious build failure.","No Risk"
"k a","Ada harness error for types of not null access xxx'class","100062","In previous versions of VectorCAST/Ada, a type that is an access to a 'class type would not be correctly handled if it was declared as ""not null"", leading to invalid code in the test harness that triggered compiler warnings or errors, or potential harness runtime errors during test execution. This problem is fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. Build errors are easily recognizable and runtime errors are easily traceble with debugger.","No Risk"
"k a","Do not create backup files when instrumenting source files in vcwrap workflow","100228","Previously, when using the vcwrap workflow, VectorCAST Cover created backup files (.vcast.bak) while instrumenting source files when the source file directory and the object file directory were the same. This problem has been corrected in VectorCAST Cover version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a usability enhancement.","No Risk"
"k a","Coverage by execution should take precedence over CBA for MC/DC pairs inMC/DC Condition Tables","100299","Previously, when the coverage option Source File Perspective (SFP) was set to true, MC/DC Condition tables in various coverage reports incorrectly documented that a pair was ""satisfied by analysis"" when it was covered by both execution results and Coverage-By-Analysis (CBA). This problem has been resolved in VectorCAST version 2024 SP1 by correctly documenting that pair as satisfied by execution.","Correction in newer version (release notes)","Ni Risk. Coverage info is being valid only the message displayed for it is wrong and misleading.","No Risk"
"k a","Creating an example environment doesn't close an open project/environment","100311","In previous versions of VectorCAST Project, choosing an environment from the Help =>Example Environments menu would not properly close any already open project. This problem is fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI.","No Risk"
"k a","Eliminate harness warning for unused static functions","100331","In previous versions of VectorCAST/C++, the test harness declared two static functions that were not used in standard file I/O mode, leading to a compiler warning. This problem is fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a code quality improvement.","No Risk"
"k a","Stub of class member in anonynous namespace incorrectly declared as static","100379","Previously, VectorCAST/C++ incorrectly declared stubbed member functions of classes defined in unnamed namespaces as static when compiling for C++11 or later, causing compile errors. This issue has been fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Support compiling multiple source files sharing the same name in vcwrap workflow","100381","Previously, an error occurred or the wrong file would be instrumented when the Cover environment contained two source files of the same name in different locations when using the vcwrap workflow. This problem is fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This bug would likely lead to a build failure easily detected by a developer.","No Risk"
"k a","Instrumented function pointer cannot be compiled","100439","In previous versions of VectorCAST/C++ and VectorCAST Cover, instrumenting a constructor called via implicit conversion to a protected type with the ""Instrument for function call coverage"" option (VCAST_ENABLE_FUNCTION_CALL_COVERAGE) set to True would result in a syntax error in the instrumented source code or instrumented test harness. This problem has been fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Improve FlexNET license retry functionality","100460","VectorCAST version 2024 SP1 supports an improved facility for configuring VectorCAST to retry failed license checkouts when using legacy FlexNET-based licensing. The new environment variable VCAST_LICENSE_RETRY_DURATION specifies the maximum number of seconds VectorCAST should spend retrying license checkouts after a failure. (In previous versions, VCAST_LICENSE_RETRY_DURATION was only honored for a limited set of failure kinds.) If set to 0, then no retries are attempted. The environment variable VCAST_LICENSE_RETRY_COUNT is deprecated and will only be used if VCAST_LICENSE_RETRY_DURATION is not set. It specifies the maximum number of retries that VectorCAST attempts after a checkout failure. If set to 0, then no retries are attempted. If neither environment variable is specified, VectorCAST only retries checkouts that fail due to certain server errors that suggest a retry could be successful. In all retry scenarios, VectorCAST sleeps for 1 second between retry attempts. (In previous versions, retries with VCAST_LICENSE_RETRY_COUNT would happen with no delay.)","Correction in newer version (release notes)","No Risk. This is a usability/performance enhancement related to licensing.","No Risk"
"k a","'clicast -lc -o' counterintuitively uses VCAST_LAST_WORKING_DIR in .vcast-qt file","100519","Previously, VectorCAST would not honor the clicast parameters -lc -o when the option ""Remember Last Working Directory"" was enabled. This problem is resolved in VectorCAST version 2024 SP1. The clicast parameters will override any the value of Last Working Directory.","Correction in newer version (release notes)","No Risk. This is a usability bug.","No Risk"
"k a","Test case editor fails to save string input data with allocation command","100537","Previously, VectorCAST/C++ could not save a string parameter of a stub's return which required an allocation, but no error was given. Subsequent execution of this test failed with a signal raised. This problem has been fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a usability bug which is easily detected.","No Risk"
"k a","Environment build crashes for some _Generic constructs with GNU statement expressions","100545","Previously, VectorCAST/C++ crashed when building environments for some source codecontaining _Generic constructs with GNU statement expressions. This problem has beenresolved in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a build crash which is an obvious build blocker.","No Risk"
"k a","The vcwrap workflow should not add -C or /C by default to the preprocess command","100571","Previously, the vcwrap workflow preprocess command added options to not discard commentsby default even when the compile command did not contain such an option. VectorCAST Coverversion 2024 SP1 no longer adds those options, and instead, the preprocess command has thesame behavior regarding retaining or discarding comments as the compile command.","Correction in newer version (release notes)","No Risk. This bug would likely lead to an obvious build failure.","No Risk"
"k a","System Testing environment marked as needing update after user imports results to it","100580","Previously, when the user opened a migrated System Testing environment in a VectorCASTProject and applied Coverage by Analysis or Imported results to it and accepted the changes in the dialog, the environment icon and tooltip in Project tree would incorrectly indicate theenvironment still needed to be updated due to a coverage script (*.cvr) change. Double-clicking the environment would prompt the user to perform an unnecessary incrementalbuild/execute to update the environment before opening it. In VectorCAST Project version 2024 SP1, in this circumstance, the environment icon and tooltipcorrectly indicate the environment is up to date and the user is not prompted to update theenvironment when opening it.","Correction in newer version (release notes)","No Risk. This is a usability bug. The bug would be obvious to the developer.","No Risk"
"k a","Pair row indexes are incorrect in Aggregate Coverage Report with manysubconditions in SFP mode","100592","Previously, when generating the Aggregate Coverage Report or MC/DC Equivalence Tables fora C/C++ unit test or Cover environment, with the coverage option ""Source File Perspective""(SFP) set to True, the report did not generate the indices correctly for pair rows if the expression contained more than 31 subconditions. The problem has been fixed in VectorCASTversion 2024 SP1.","Correction in newer version (release notes)","No Risk, ""Source File Perspective"" is not used.","No Risk"
"k a","SFP source complexity is always equal to zero","100595","Previously, VectorCAST coverage environments using Source File Perspective (SFP) did not display the correct value for code complexity. This problem has been fixed in VectorCASTversion 2024 SP1.","Correction in newer version (release notes)","No Risk, ""Source File Perspective"" is not used.","No Risk"
"k a","Instrumentation crash - error: assertion failed at ""il_to_str.cpp""","100661","In previous versions of VectorCAST/C++ and VectorCAST/QA, instrumenting a templatestruct/class method with a decltype return could result in an error during instrumentationbecause of a failed assertion. ""internal error: assertion failed at: ""il_to_str.cpp"""" This has been fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is an instrumentation crash which is an obvious build blocker.","No Risk"
"k a","Display license path for more FlexNET license errors","100671","VectorCAST version 2024 SP1 improves error messages, displaying the complete license pathfor more FlexNET license errors.","Correction in newer version (release notes)","No Risk. This is a usability enhancement.","No Risk"
"k a","RGW2 IBM Doors value error","100696","Previously, VectorCAST RGW2 with IBM doors could generate the following error whenexporting results: ""An error occurred performing the gateway operation: DOORSprocess failed to write 'done' file."" This problem is fixed in VectorCAST version2024 SP1.","Correction in newer version (release notes)","No Risk. This is a usability bug. A developer would notice that the export failed.","No Risk"
"k a","C++-style casts not controlled byVCAST_COMPILER_SUPPORTS_CPP_CASTS in some modes","100705","Previously, VectorCAST/C++ did not honor the Builder option ""Compiler supports C++-stylecasts"" (VCAST_COMPILER_SUPPORTS_CPP_CASTS) when selecting a compiler in any of theIAR, Code Warrior HCS08, or Code Warrior HCS12 families, causing C++-style casts to neverbe available in the test harness, even if these casts were supported by the compiler. This issue has been fixed in VectorCAST version 2024 SP1. Users should ensure that the optionis set correctly according to the capabilities of their compiler.","Correction in newer version (release notes)","No Risk. This bug would likely lead to a compile error which is easily detected.","No Risk"
"k a","Renamed package used in renamed object leads to Type Not Supported error","100750","Previous versions of VectorCAST/Ada would not resolve a rename when it was used withinanother rename statement. For example, ""Global_A : integer renames(renamed_pkg).Global_B;"" would declare ""type_not_supported"" when set in a test. Thisis fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This bug would likely lead to a build failure easily detected by a developer.","No Risk"
"k a","Macro detection fails for all macros when 1 uses array indexing on an entity not visible from global scope","100804","Previously, macro detection failed for all of the macros in a source file if one macro definitionused array indexing on an entity that was not visible from global scope. This problem has beenresolved in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This bug would likely cause an obvious build failure.","No Risk"
"k a","Compile error during instrumentation with Template Instantion Coverage enabled","100853","In previous versions of VectorCAST/C++, instrumenting a template function of a templateclass which is instantiated with a lambda could result in an error in the instrumented file whenthe ""Instrument template instantiations"" option is enabled. This has been fixed inVectorCAST/C++ version 2024 SP1.","Correction in newer version (release notes)","No Risk. This bug causes a compile error easily detected.","No Risk"
"k a","Compile errors with file instrumented with GNU using vcwrap workflow onCygwin","98637","In previous versions of VectorCAST Cover, a source file with coverage optionappend_cover_io set would result in compilation errors in the instrumented file whencompiling with the GNU compiler in Cygwin with the vcwrap workflow. This problem has beenfixed in VectorCAST version 2024.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Diab Parse error with call to template-based overload that is consideredambigous","99539","Previously, VectorCAST/C++ incorrectly gave the parse error ""more than one instance ofoverloaded function... matches the argument list"" for some Diab code containingtemplate-based overloads. This problem has been resolved in VectorCAST version 2024.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Parse error when using directory beginning with 'u' or 'U' with vcwrapworkflow","100344","Previously, when using the vcwrap workflow on Windows, and the path to the Coverenvironment's directory contained a directory starting with the character 'u' or 'U', VectorCASTincorrectly interpreted this character as an ""incorrectly formed universal charactername"" and failed to correctly instrument the source files. This problem has been fixed inVectorCAST version 2024.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","constexpr methods are not testable in TDD environments","VC-91","Previously, VectorCAST/C++ did not make defined functions testable in Test-Driven Development (TDD) environments if they could not be stubbed, such as when they were declared as constexpr. Starting with VectorCAST version 2025 SP4, those functions are now testable.","Correction in newer version (release notes)","No Risk. If a function is intended to be tested but the tool marks it as untestable this would be notified and concequent actions would be done, i.e. the function could be tested in another way, it could be reviewed one more thoroughly, etc.","No Risk"
"k a","VCAST_ONLY_SHOW_GLOBAL_OBJECTS_IN_ONE_UNIT incorrectly applied to static globals when using parallel processing","VC-145","In previous versions of VectorCAST/C++ when using parallel processing, where VCAST_NUM_JOBS is set to a number greater than 1, the Builder option VCAST_ONLY_SHOW_GLOBAL_OBJECTS_IN_ONE_UNIT would be incorrectly applied to static globals, preventing them from being set or checked via the parameter tree in more than one unit. This problem is fixed in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk, VCAST_NUM_JOBS is always one by default (option is not used).","No Risk"
"k a","Inconsistent highlight color in find operations in Source File Perspective","VC-276","In previous versions of VectorCAST, when the coverage option ""Source File Perspective"" (SFP) was set to True, the Find feature used a highlight color in the Coverage Viewer that did not match the one used elsewhere in the GUI. Beginning with VectorCAST version 2025 SP4, this behavior has been unified to provide a consistent user experience across all areas that support Find highlighting.","Correction in newer version (release notes)","No Risk. This is a purely cosmetic UI/usability bug. It does not affect the correctness of the search results or the test data.","No Risk"
"k a","Harness compile error when function pointer contains internal type declaration","VC-370","Previously, VectorCAST/C++ generated test harness code which did not compile for some code which had function pointers with parameters having types declared in the function pointer. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build. It's a classic ""fix it and move on"" type of issue.","No Risk"
"k a","Using clicast ""Actuals to Expecteds"" should clear execution results","VC-373","Previously, running the clicast command 'test actuals_to_expected' did not clear the execution results for the test, but subsequent reports would continue to show incorrect execution results. This problem has been resolved in VectorCAST version 2025 SP4. Execution results are now cleared when the 'test actuals_to_expected' command is run.","Correction in newer version (release notes)","No Risk - command not used.","No Risk"
"k a","actuals_to_expected command generates invalid expected lines for some tests using TEST.STUB","VC-384","Previously, running the 'clicast -e <env> test actuals_to_expected' command and then exporting the test script with VectorCAST/C++ could sometimes add a bad TEST.EXPECTED line when the test contained the TEST.STUB command. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. An invalid line in an exported script would likely cause a subsequent import or build to fail with a clear error message. This is an easily detected issue.","No Risk"
"k a","Parse error for extern __asm in --arm mode","VC-390","Previously, VectorCAST/C++ incorrectly gave the error '""asm"" is not allowed' when parsing extern __asm statements in ARM compiler code. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a parsing error that would prevent the environment from being built which is an obvious blocker.","No Risk"
"k a","Target execute command for Ada PPC Green Hills Sim missing -ada","VC-542","In previous versions of VectorCAST/RSP for Ada PPC Green Hills Simulator or PPC Green Hills Bare, harness executions could fail due to the simppc command lacking the -ada flag. This problem is fixed in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. The missing flag would result in a clear execution failure easily detectable by a developer.","No Risk"
"k a","vcshell fails using option '-isystem' when command verb is 'c++'","VC-757","In previous versions of VectorCAST/C++, using vcshell with -isystem and the command verb 'c++' caused the vcshell database to be incorrect, resulting in an environment build error later. This problem has been fixed in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This bug causes a build error which is easily detected and fixed.","No Risk"
"k a","""vcutil instrument"" hangs when compile command line is very long","VC-789","Previously, when using VectorCAST's vcutil utility to instrument source files on Linux, the instrumentation would hang when a compile command exceeded the operating system's pipe buffer size (typically 64KB). This problem has been fixed in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. The tool hanging is a performance and usability issue not a silent correctness bug. A developer would immediately notice and stop the process.","No Risk"
"k a","Harness compile error for code with _Complex using Tasking compiler","VC-802","Previously, VectorCAST/C++ generated test harness code using '__complex__' instead of '_Complex' when Tasking compilers were selected, causing a compile error. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Ada environment fails to build from GPR file without cache specified","VC-932","In previous versions of VectorCAST/Ada, an environment could fail to build with a .gpr file unless a GPR Cache File was explicitly specified. This problem is fixed in VectorCAST version 2025 SP4. A default cache is built and used when no cache is otherwise specified.","Correction in newer version (release notes)","No Risk. This is a build error that is a clear blocker and easily detected by a developer.","No Risk"
"k a","Calls to VCAST_REGISTER_SUBPROGRAM slow down Ada instrumented executable in some cases","VC-1429","Previously, VectorCAST/Ada and VectorCAST/QA for Ada would sometimes add extra unnecessary function calls into the instrumented executable (in the form of VCAST_REGISTER_SUBPROGRAM function calls) when buffered I/O was set, causing the instrumented executable to be larger and slower than it should be. This problem is fixed in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a performance issue that does not affect the correctness of the test results or reports.","No Risk"
"k a","vcdb's command ""setappendio"" fails when given relative path to --file","VC-1486","In previous versions of VectorCAST/C++, the 'vcdb setappendio' command failed to find a file when given a relative path on Windows. This problem has been fixed in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a usability bug with a command-line utility. A developer would notice the command failing.","No Risk"
"k a","Exporting coverage-by-analysis (CBA) to script omits notes when environment is Ada","VC-1696","Previously, VectorCAST/Ada and VectorCAST/Cover with Ada sources would sometimes omit any specified notes when exporting CBA results to a cover script (.cvr). This problem is fixed in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. Missing notes does not break or corrupt harness output/execution.","No Risk"
"k a","Integration with TESTinsights removed","VC-1808","Starting with VectorCAST version 2025 SP4, the integration with TESTinsights is no longer available in anticipation of the planned decommissioning of the TESTinsights service.","Correction in newer version (release notes)","No Risk. This is a planned feature removal not a bug.","No Risk"
"k a","Parse error for clang code initializating const array","VC-1814","Previously, VectorCAST/C++ incorrectly gave the error ""expression must have a constant value"" for clang C code when some const variables were used in initializations and the parser flags included a value for clang_version below 170000. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a parsing error easily detected.","No Risk"
"k a","Save visibility state of text search bar across VectorCAST instances","VC-1831","Previously, the visibility state of the search bar in text editors was not preserved between different instances of VectorCAST, requiring users to show the search bar each time a new text editor instance was opened. This behavior has been improved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a usability bug with the GUI.","No Risk"
"k a","Text highlighting fails for regex matching first or last character in text","VC-1857","editors Previously, using regular expressions like ^. or .$ to match the first or last character of non-empty lines failed to highlight the expected characters in VectorCAST's text editor. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a usability bug with the search feature that doesn't affect the correctness of the test data.","No Risk"
"k a","Reduce stack usage in C++ test harness","VC-1881","In VectorCAST/C++ version 2025 SP4, test harness stack usage has been reduced by eliminating a stack-based char array that was sized by VCAST_MAX_STRING_LENGTH.","Correction in newer version (release notes)","No Risk. This is a performance enhancement that reduces resource consumption but doesn't affect the correctness of test execution.","No Risk"
"k a","Error in specialized test leads to unapplied test data content appearing before main test entry","VC-1898","Previously, if a specialized test contained an error, the unapplied test data was written to the test script before or above the other test information, causing VectorCAST to behave as if there were two tests when that script was subsequently imported. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. A developer would notice the extra incorrect data in the test script making this an easily detected issue.","No Risk"
"k a","Import error when test script created prior to VectorCAST 2022 uses auto-generated concrete classes that were children of typedefed classes","VC-1901","Previously, VectorCAST/C++ version 2022 and later displayed an error when importing test scripts created with VectorCAST versions preceding 2022 that contained auto concrete classes which were children of typedefed classes. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. An import error is a clear blocker and easily detected.","No Risk"
"k a","Symbolic constant origin mischaracterized when parallel codegen enabled","VC-1953","When using parallel processing, where VCAST_NUM_JOBS is set to a number greater than 1,VectorCAST/C++ versions starting with 2024 SP2 classified symbolic constants from vcdb as if they were from configuration options, causing a spurious error when importing test scripts using those symbolic constants. This problem has been resolved in VectorCAST version 2025 SP4. To get the new behavior, you must rebuild any affected environments.","Correction in newer version (release notes)","No Risk. This bug causes an """"spurious error when importing test scripts"""" making it a easily detectable.","No Risk"
"k a","Column names and order in SFP coverage viewer do not match that of C++ environment or VectorCAST Project","VC-1987","Previously, when the coverage option ""Source File Perspective"" (SFP) was set to True,VectorCAST displayed the coverage type columns in the coverage viewer in a different order than the rest of the tool. This problem is fixed in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a cosmetic usability bug in the GUI's display. It does not affect the correctness of the coverage data.","No Risk"
"k a","Parse error for code containing the arrow operator when the first operandis a pointer to a clang ext_vector_type type","VC-1998","Previously, VectorCAST/C++ incorrectly gave the error ""expression must have pointer-to-class type but it has type..."" when parsing code with the arrow operator when used with pointers to clang ext_vector_type types. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a parsing error easily detected.","No Risk"
"k a","Clang ext_vector_type types not supported when VCAST_COMPILER_SUPPORTS_CPP_CASTS disabled","VC-2002","Previously, VectorCAST/C++ did not provide type support for clang ext_vector_type typeswhen the configuration option VCAST_COMPILER_SUPPORTS_CPP_CASTS was set to False.This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This bug would likely lead to a compile error which is an easily detected.","No Risk"
"k a","Elided text is not properly highlighted during search","VC-2008","VectorCAST version 2025 SP4 resolves an issue where elided text was not properly highlighted when using the search feature in the VectorCAST GUI. In prior releases, search failed to match inside elided sections, making it difficult for users to locate terms in large datasets. This fix ensures that search highlighting is applied consistently, even within previously hidden or truncated text segments.","Correction in newer version (release notes)","No Risk. This is a usability bug with the search feature that does not affect test correctness.","No Risk"
"k a","Parse error for clang OpenCL __builtin_astype(x,y)","VC-2048","Previously, VectorCAST/C++ gave an error when parsing clang code containing the OpenCL __builtin_astype operator. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a parsing error easily detected.","No Risk"
"k a","Environment builder fails to use all directories when C_INCLUDE_FLAG isnot -I","VC-2062","VectorCAST/C++ versions starting with 2025 SP1 failed to use some search directories when the configuration option C_INCLUDE_FLAG was set to a value other than -I, such as -iquote, causing some environment build failures when the vcqik utility was called. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This bug causes build failures which are easily detected.","No Risk"
"k a","Parse error in GHS mode for compiler warning","VC-2084","VectorCAST/C++ versions starting with 2025 SP2 incorrectly gave the error ""argument of type... is incompatible with..."" for some pointer expressions when parsing code using the parser flag --ghs. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a parsing error easily detected.","No Risk"
"k a","Failure to import user code for entities with private types in Ada unit test environment","VC-2138","Previously, VectorCAST/Ada incorrectly gave the error ""Type... not in environment -value ignored"" when importing test scripts containing parameter user code for private types. This problem has been resolved in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. The bug gives a clear import error message making it an easily detected blocker.","No Risk"
"k a","Bool macros defined in code not available as symbolic constants when using parallel processing","VC-2195","In previous versions of VectorCAST when using parallel processing, where VCAST_NUM_JOBSis set to a number greater than 1, VectorCAST/C++ did not make bool macros defined in codeavailable as symbolic constants when building environments, leading to errors when importingtest scripts using those values. This problem has been resolved in VectorCAST version 2025SP4.","Correction in newer version (release notes)","No Risk. This bug leads to ""errors when importing test scripts"" which is easily detected.","No Risk"
"k a","Text search criteria persists after it is cleared","VC-2221","Previously, when the text search was closed after the user manually cleared the search bar,reopening the text search would still display the removed search text. In VectorCAST version 2025 SP4, this behavior has been corrected.","Correction in newer version (release notes)","No Risk. This is a usability bug in the search feature.","No Risk"
"k a","Crash when renaming test case during coverage initialization","VC-2258","Previously, VectorCAST could crash if a test case was forced into rename mode while coverage was being initialized. This problem has been fixed in VectorCAST version 2025 SP4.","Correction in newer version (release notes)","No Risk. This is a GUI crash which is an easily detected usability bug.","No Risk"
"k a","Parse error for Code Composer code using memcpy","VC-347","Previously, VectorCAST/C++ incorrectly gave the error ""more than one instance ofoverloaded function 'std::memcpy' matches the argument list"" for some codecontaining memcpy calls when using Code Composer compilers other than ARM. This problemhas been resolved in VectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is a parsing error easily detected.","No Risk"
"k a","Harness compile error when default parameter initialization is function call that returns struct","VC-377","Previously, VectorCAST/C++ generated test harness code that did not compile for somefunctions with function calls returning structs as default parameter values. This problem hasbeen resolved in VectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Harness compile error for file scope defaulted functions when VCAST_SPLIT_UC_FILES enabled","VC-383","Previously, VectorCAST/C++ did not generate test harness code properly for file scopedefaulted functions when the Builder configuration option ""Compile test-specific user code inseparate unit"" (VCAST_SPLIT_UC_FILES) was set to True, causing a compile error. Thisproblem has been resolved in VectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Const class pointer fields should not have parameter tree support","VC-385","Previously, VectorCAST/C++ appeared to have support in the Test Case Editor's parameter tree for const and volatile fields if they were pointers to classes or structs with constructors. However, the test harness did not set these fields properly, causing problems during execution. Starting with VectorCAST version 2025 SP3, parameter tree support is disabled for such fields.","Correction in newer version (release notes)","No Risk. During test run if any errors occur, those will be easily notified and easily fixed using test case user code.","No Risk"
"k a","Test harness compile error for typedef const struct parameter object","VC-398","In previous versions of VectorCAST/C++, functions with parameters or return types that weretypedefs of const anonymous structs or classes would result in a test harness compile errorduring environment build. This problem is fixed in VectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Jobs window is empty when building Ada environment with Green Hills","VC-400","Previously in VectorCAST/Ada, environment builds using a Green Hills compiler would fail toshow subprocesses in the Jobs window. This problem is fixed in VectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is a usability bug with the Jobs window. The build would still proceed but the display of jobs is broken.","No Risk"
"k a","Implicit default instrumentation errantly displays entire switch statement","VC-1001","Previously, when the coverage option ""Instrument implicit default case for switch-case blocks""(VCAST_REPORT_ON_IMPLICIT_DEFAULT_CASE) was set to True, VectorCAST/C++ and VectorCAST Cover would represent the implicit default with the entire switch block when instrumenting for Branch coverage. This problem has been fixed in VectorCAST version 2025SP3 so that the implicit default is now shown at the end of the switch which is typically the closing brace of the switch body. Also, probe points are no longer allowed for the implicit default.","Correction in newer version (release notes)","No Risk, ""Instrument implicit default case for switch-case blocks"" not used.","No Risk"
"k a","Parse error for some forward declared types in function parameters with --ms_c++latest parser flag","VC-1266","Previously, VectorCAST/C++ gave the error ""Internal error: assertion failed"" whenparsing source code with unused templates utilizing incomplete parameter types while using --microsoft flag and the --ms_c++latest parser flag. This problem has been resolved inVectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Remove unneeded C++ harness variables","VC-1511","VectorCAST version 2025 SP3 removes three unneeded global variables from theVectorCAST/C++ test harness: vCAST_PARAM_LENGTH, VCAST_index_size, andVCAST_index_count.","Correction in newer version (release notes)","No Risk. This is a performance/code quality improvement. It does not affect test correctness.","No Risk"
"k a","Defined variables and search directories included twice when listing macros using parallel processing","VC-1531","In previous versions of VectorCAST/C++, when using parallel processing (i.e. the environmentvariable VCAST_NUM_JOBS > 1), the internal command used to detect macros duringenvironment build unnecessarily duplicated some arguments, leading to excessively longcommand lines, which in some cases, exceeded the Windows command line length limitation.This problem has been fixed in VectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This bug causes a build failure due to an overly long command line which is an obvious and easily detected blocker.","No Risk"
"k a","Report sections lack color for coverage reports when using Translation Unit perspective","VC-1544","In previous versions of VectorCAST version 2025, the Full and Aggregate Coverage reportswere missing the colors used to represent covered and uncovered lines when the coverageoption ""Source File Perspective"" (SFP) was set to False, or Translation Unit perspective. Thisproblem is fixed in VectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is a cosmetic usability bug in the reports. The underlying data is not affected.","No Risk"
"k a","Failure to inherit search directory type on Windows when there are spaces in a sub directory name","VC-1610","Previously, VectorCAST/C++ did not recognize inherited search directories containing spaceson Windows when the environment script specified a parent search directory that did notcontain a space. This problem has been resolved in VectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This bug would likely lead to an obvious build failure easily detected by a developer.","No Risk"
"k a","Harness compile error for missing P object definition","VC-1624","Previously, VectorCAST/C++ could fail to set functions as testable or fail to define neededharness parameter objects when a testable function parameter type was a template-basedtype with a member whose template-based type had an explicitly declared copy constructor.These problems are resolved in VectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Harness compile error when generic SBF code instantiated for template-based abstract class constructor","VC-1642","Previously, VectorCAST/C++ created a stub-by-function (SBF) stub for the generic templateconstructor in the test harness, which did not compile if the class was abstract and theconstructor was called by a child class constructor. This problem has been resolved inVectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Invalid harness #undef for typedef enum used as a const parameter","VC-1659","Previously, VectorCAST/C++ generated a test harness with a #undef of decltype() for typedefanonymous enumerals when the enumeral type was used in a const parameter. The use of thedecltype caused a test harness build failure under some configurations. Starting withVectorCAST version 2025 SP3, the #undef uses the name of the typedef.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Automatic test compile failure only shows tail of error message","VC-1713","In previous versions of VectorCAST/C++, failure of the automatic test compile performed afterpreprocess or parse errors would result in an error dialog that showed only the last 20 lines ofthe compile error message. In VectorCAST version 2025 SP3, the error dialog shows the first400 lines of the combined stderr and stdout from the compile command that failed.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that provides more of the error message for an obvious failure.","No Risk"
"k a","Parse error regression for code using __attribute__((always_inline)) withGHS","VC-1736","In VectorCAST version 2025 SP2, a parse error could occur when processing C++ code thatused __attribute__((always_inline))in template definitions with a Green Hills compilertemplate set. This regression has been fixed in VectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","VectorCAST crashes when using icon personalization on Linux","VC-1823","Previously, using the personalization feature to change icon colors in the VectorCAST GUIcaused a crash in VectorCAST on the Linux platform. This problem has been corrected inVectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is a GUI crash which is an easily detected usability bug.","No Risk"
"k a","Environment build with DONT_STUB unit that does not compile shouldabort the build","VC-1824","Previously, VectorCAST/C++ continued building the environment when a DONT_STUB unit didnot parse successfully and then did not successfully test compile. Starting with VectorCASTversion 2025 SP3, the environment builder aborts after these errors.","Correction in newer version (release notes)","No Risk. This is a usability enhancement. The tool now provides a clearer failure message for what was already a build blocker.","No Risk"
"k a","Crash when clearing in Project configuration editor","VC-1833","In previous versions of VectorCAST Project, clearing a configuration item in the Project'sConfiguration Editor could trigger a crash. This issue has been resolved in VectorCAST version2025 SP3.","Correction in newer version (release notes)","No Risk. This is a GUI crash which is an easily detected usability bug.","No Risk"
"k a","Parse error regression for __inline__ keyword in GHS C code","VC-1869","VectorCAST/C++ version 2025 SP2 did not recognize the __inline__ keyword when parsingGreen Hills code. This problem has been resolved in VectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Updated application icons in Start menu and taskbar","VC-1918","Previously, after installation, VectorCAST used an older style icon in the Windows Start menuand taskbar. This inconsistency has been fixed starting with VectorCAST version 2025 SP3,which now displays the updated icon style in both locations.","Correction in newer version (release notes)","No Risk. This is a cosmetic usability enhancement.","No Risk"
"k a","Environment build fails for some templates where trailing return type uses","VC-1981","decltype VectorCAST/C++ versions 2025 SP1 and 2025 SP2 could fail with an ""internal error"" whenbuilding environments for source code with templates where a trailing return type referencedfunction parameters. This problem has been resolved in VectorCAST version 2025 SP3.","Correction in newer version (release notes)","No Risk. This is an internal error that is an obvious build blocker.","No Risk"
"k a","Incorrect printing of floating point values with some MinGW-based compilers","VC-315","Previously, when using a MinGW-based GNU compiler, VectorCAST/C++ would print floating point values incorrectly, leading to incorrect range determination or test execution failures.This problem is fixed in VectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk, MigGW compiler not used.","No Risk"
"k a","Improve vcshell behavior when calling vcdb getcommand with --abspathoption","VC-397","Previously, when executing the command 'vcdb getcommand --file <filename> --abspath' on a vcshell database created with repeated empty include options (such as ""-I -I""), VectorCAST did not correctly return the full path as requested by the use of the '-- abspath' option. In a similar vein, when executing the command 'vcdb getcommand --file <filename> --abspath' on Windows but using a vcshell database created on Linux, VectorCAST gave acryptic error message but did not suggest using the option '--vcpathstyle=unix'. Theseproblems have been fixed in VectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk. This is a usability enhancement for a command-line utility. The old behavior would either fail with a cryptic message or return an incorrect path which a developer would notice.","No Risk"
"k a","Target Variant changes to HOST in some Ada target environments","VC-406","In previous versions of VectorCAST/Ada, setting an option using clicast could incorrectly reset the TARGET_VARIANT option to HOST. This problem is fixed in VectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk. This is a configuration bug but easily detected as it leads to build errors. If the software is designed for an embedded target with a different processor architecture (e.g., ARM, PowerPC, or MIPS), it will not compile on a Windows host using a native compiler.","No Risk"
"k a","Parse error for C23 enum with fixed underlying type","VC-409","Previously, VectorCAST/C++ gave an error when parsing C23 code containing enumdeclarations with a fixed underlying type. This problem has been resolved in VectorCASTversion 2025 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Parse error for C code initializing const entity with const address","VC-418","Previously, VectorCAST gave the error ""expression must have a constant value"" when parsing C code with an initialization of a const array or struct with a const address. Thisproblem has been resolved in VectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Test script lines with invalid values should be saved to Unapplied Test Data","VC-801","Previously, VectorCAST/C++ set invalid and out-of-range values to 0 or the minimum possible value during test script import. Starting with VectorCAST version 2025 SP2, invalid and out-of-range values cause the test script line to be saved in the Unapplied Test Data test script, and an error message is displayed.","Correction in newer version (release notes)","Potential Risk. The previous behavior would silently set invalid values to 0. This could lead to a test running with incorrect data producing a false positive or negative. The new behavior is a significant improvement that prevents a silent failure.
A problem solving process has been initiated to investigate the impact of these problems/bugs on medical devices already developed with the software tool.","Risk exists"
"k a","Import of non-UTF-8 test scripts cause internal error and potential crash","VC-905","Previously, VectorCAST/C++ and VectorCAST/Ada reported an internal error or crashed whenimporting test scripts containing non-UTF-8 characters. Starting with VectorCAST version 2025 SP2, the error message identifies the line where the non-UTF-8 character occurs, and then thetest script import aborts with no tests imported.","Correction in newer version (release notes)","No Risk. The bug causes an """"internal error or crashed"""" which is an obvious easily detected blocker.","No Risk"
"k a","RGW: Improved test case export messaging","VC-957","VectorCAST RGW version 2025 SP2 improves the Requirements Gateway's test case exportprocess by providing detailed explanations for each test case's readiness status. Previously,unready test cases were flagged without clarification, complicating troubleshooting. Now, allgateways explicitly identify the reasons why a test case is not ready for export which are either""Blocked"" due to the environment having one or more impacted requirements that needreview, or ""Omitted"" due to not needing exporting because the test's status has not changed since the last export.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that provides more detailed feedback in a report.","No Risk"
"k a","Test Case Data report displays incorrect control flow when more than 9changes of control flow","VC-976","Previously, the Test Case Data report (and Full report) in VectorCAST/C++ andVectorCAST/Ada displayed the control flow events in the incorrect order compared to the orderof control flow events in the test's Execution report, when the test contained more than ninechanges of control flow. The problem in the Test Case Data report has been fixed inVectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk, Control Flow is not used.","No Risk"
"k a","Parse error when very many recursive template instantiations","VC-1059","Previously, VectorCAST/C++ incorrectly gave the error ""cannot deduce the return typeof function"" for some code containing very many recursive template instantiations. Thisproblem has been resolved in VectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Crash when closing project while environment actions are running","VC-1080","Previously, VectorCAST allowed projects to be closed while environment actions were stillrunning, causing unstable behavior. This problem is fixed in VectorCAST version 2025 SP2.Users are now prompted to wait for any ongoing environment actions or abort them in the JobMonitor before closing the project.","Correction in newer version (release notes)","No Risk. This is a usability bug (a crash) that is a clear blocker.","No Risk"
"k a","'break' immediately following a 'return' is not instrumented whenVCAST_INSTRUMENT_UNREACHABLE_CODE option is True","VC-1088","Previously, when the coverage option ""Instrument unreachable code"" was set to True,VectorCAST/C++ and VectorCAST Cover would incorrectly not instrument a 'break' immediately following a 'return' when instrumenting for Statement coverage. This problem has been fixed in VectorCAST version 2025 SP2 so that such a 'break' is now instrumented.","Correction in newer version (release notes)","No Risk. This bug leads to missing coverage for 'break' statements immediately following by a 'return'.","No Risk"
"k a","Parse error for GHS when template type used before declaration","VC-1091","Previously, VectorCAST/C++ gave an error when parsing Green Hills code where a templatetype was used before it was declared. This problem has been resolved in VectorCAST version2025 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Harness compile error for generated concrete subclass when parametertypes reference nested types","VC-1145","When VectorCAST/C++ version 2023 SP6 or later versions made stubs for virtual functions ofautomatically generated concrete classes, it did not fully qualify parameter types that weremembers of grandparent classes. The omission of the scope qualification caused a compileerror in the test harness in scenarios where the name was also used for a different entity in anearer parent class. This problem has been resolved in VectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Import error when test script created prior to VectorCAST 2022 uses auto-generated concrete classes with scoped types in template parameters","VC-1179","Previously, VectorCAST/C++ displayed an error when importing a test script generated byVectorCAST version 2021 SP8 or earlier, if the test script contained automatically generatedconcrete classes with scoped types in template parameters. This problem has been resolved inVectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk. An import error is a clear easily detected blocker.","No Risk"
"k a","Exclude Coded Tests file node from TCM report totals","VC-1317","Previously, when generating the Test Case Management report, VectorCAST/C++ incorrectly included the Coded Tests file node as a test execution failure in the total display. This problemis fixed in VectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk. This bug causes an incorrect failure (false positive) which is easily detected.","No Risk"
"k a","Stubbed units get coverage instrumentation when parallel codegen ineffect","VC-1321","Previously, VectorCAST/C++ added coverage instrumentation for stubbed units when the environment variable VCAST_NUM_JOBS was greater than 1. Starting with VectorCAST version2025 SP2, stubbed units are no longer instrumented for coverage.","Correction in newer version (release notes)","No Risk - VCAST_NUM_JOBS is always one, i.e. never used.","No Risk"
"k a","Harness compile error for template SBF when instantiation uses type from appendix user code","VC-1323","Previously, VectorCAST/C++ generated stub-by-function (SBF) test harness code that did notcompile when a template instantiation used a type from appendix user code and the templateclass was in a namespace while the template argument type was not. This test harness compileerror has been resolved in VectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","RGW Polarion: Python error when local testcase has no external ID","VC-1372","VectorCAST RGW version 2025 SP2 enhances the Polarion gateway by improving testcaseexport reliability. If any previously-exported testcases are missing their external IDs due todata loss, the gateway now gracefully handles absent descriptions and retrieves completeWorkItem data from Polarion using a follow-up query. This improvement prevents Pythonexceptions during re-exports, ensuring seamless operations.","Correction in newer version (release notes)","No Risk. The bug causes a Python error which is a clear and easily detected blocker for the export process.","No Risk"
"k a","Parse error for GHS wchar_t and wide character literals","VC-1466","Previously, VectorCAST/C++ gave errors when parsing some Green Hills code containingwchar_t types or wide character literals. This problem has been resolved in VectorCASTversion 2025 SP2. The corrected behavior requires the target architecture to be specified in the ""Parser flags""option (C_EDG_FLAGS) via the '--ghs_version' flag, such as '--ghs_version=arm', '--ghs_version=arm64', or '--ghs_version=ppc'. The compiler templates for associated GHSconfigurations now add one of these parser arguments when the template is selected.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Other FlexNet-enabled tools may fail to get license when called byVectorCAST","VC-1489","In previous versions of VectorCAST since 2024, other FlexNet-enabled third-party tools calledfrom VectorCAST could fail to get a license if they relied on license server settings cached byFlexNet (e.g. via the command 'lmutil lmpath'). This problem is fixed in VectorCAST version2025 SP2. A workaround for older versions is to explicitly set the LM_LICENSE_FILEenvironment variable as needed for the other tool.","Correction in newer version (release notes)","No Risk. This is a licensing issue that would be an obvious blocker when calling another tool.","No Risk"
"k a","Default directory incorrect during GUI initialization","VC-1503","An issue was introduced in VectorCAST version 2025 SP1 where the VectorCAST applicationincorrectly set the current working directory during GUI initialization. As a result, the File Opendialog showed an unexpected directory by default when the ""Remember last directory"" option was not enabled. This problem has been fixed in VectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI.","No Risk"
"k a","Change to layout for the option to select language","VC-1529","VectorCAST version 2025 SP2 includes a reorganization of the GUI tab in the Options dialog.The language selection has been updated to use radio buttons instead of the menu, andavailable languages are now displayed in their native script for better recognition and usability.","Correction in newer version (release notes)","No Risk. This is a usability enhancement to the GUI.","No Risk"
"k a","Harness compile error when option VCAST_SPLIT_UC_FILES enabled withprobe points and coverage","VC-1558","Previously, VectorCAST/C++ failed to generate a needed test harness file when the Builderconfiguration option VCAST_SPLIT_UC_FILES was set to True and both a probe point and acoverage type were specified, leading to a compile error in the test harness. This problem hasbeen resolved in VectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Environment rebuild blocked by QtWebEngineProcess.exe after idle period","VC-1589","A previous fix (VC-1163) addressed an issue where the VectorCAST GUI, when launched onWindows with '%VECTORCAST_DIR%vcastqt -e <environment>', caused the Chromium-based HTML renderer to lock the environment directory, preventing environment update,rebuild, and rename operations. However, directory locks could still occur in other scenarios,such as after an idle period. VectorCAST version 2025 SP2 includes a fix to ensure that the environment directory is fullyunlocked after the Chromium-based HTML renderer starts, allowing subsequent rebuild andrename operations to succeed without error.","Correction in newer version (release notes)","No Risk. This is a usability bug that would be an obvious blocker when a developer tries to rebuild an environment.","No Risk"
"k a","Parse error for some arm64 code in GHS mode","VC-1603","Previously, VectorCAST/C++ could issue errors when parsing ARM64 code that relied on theprecise size and alignment of some types when '--ghs' and '--64_bit_target' parser flagswere used together. This problem has been resolved in VectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Test results not updated in Line Details when executed test covers selected line","VC-1613","Previously, VectorCAST/C++ failed to update the Test Results tab in the Source FilePerspective Coverage Viewer after a test case execution produced coverage. This problem isfixed in VectorCAST version 2025 SP2.","Correction in newer version (release notes)","No Risk. The issue manifests when a test case is executed or re-executed, and it covers a source line that should update the Test Results tab in the Source File Perspective Coverage Viewer. This is most commonly observed during incremental testing or single test re-runs, where the expectation is immediate feedback in the coverage viewer. It is easily detectable.","No Risk"
"k a","RGW Codebeamer: Export tab does not show duplicate tracker items withunique parent names","VC-214","Previously, the Requirements Gateway (RGW) dialog for the Codebeamer profile displayedwork items in a flat list without hierarchy, complicating navigation and obscuring specific items.This issue has been addressed in VectorCAST version 2025 SP1 by introducing a hierarchicaltree structure on the Export tab, which organizes test configurations clearly, enhancesnavigation, and ensures all items are visible, significantly improving usability.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI. The underlying data is not compromised.","No Risk"
"k a","Ada harness compile error for private type of generic package instantiation","VC-310","In previous versions of VectorCAST/Ada, a harness compile error would occur for source codereferencing a private type of a generic package instantiation in a multi-unit environment. Thisproblem is fixed in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Harness calculation for NaN matches 0.0 for some targets","VC-341","In previous versions of VectorCAST/C++, VectorCAST would incorrectly report testcaseruntime values as NaN when they were actually 0.0. This would occur for platforms wheredividing by a variable with value 0.0 resulted in 0.0 rather than NaN or an infinity. VectorCASTversion 2025 SP1 resolves this problem by providing a new harness macro('VCAST_LITERAL_DIVISOR_ZERO') to enable NaN and infinity calculations via a literal 0.0 divisor instead of a variable. Add 'VCAST_LITERAL_DIVISOR_ZERO' to the clicast option 'C_DEFINE_LIST' when using any platform with this problem. clicast -lc options_append C_DEFINE_LIST VCAST_LITERAL_DIVISOR_ZERO","Correction in newer version (release notes)","High Risk. This is a critical bug. The tool could misreport a test case runtime value which compromises the integrity of the test results. This is a silent failure that is extremely dangerous for safety-critical software.
A problem solving process has been initiated to investigate the impact of these problems/bugs on medical devices already developed with the software tool.","Risk exists"
"k a","Error when parsing '__attribute__((section((""x""))))'","VC-346","Previously, VectorCAST/C++ incorrectly gave the error ""expected a string literal"" for GNU or clang code using '__attribute__' with two sets of parentheses around a string literal.This problem has been resolved in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Ada build failure when custom stubbing needed for multiple units","VC-394","In previous versions of VectorCAST/Ada, building an environment with custom stubbing andmultiple dependent units would abort the environment build after prompting for the firstdependent unit. This problem has been fixed in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This bug causes a clear build failure which is easily detected.","No Risk"
"k a","Quickparse duplicates arguments passed to preprocess command","VC-396","In previous versions of VectorCAST/C++, the preprocess command executed during theQuickparse stage of environment build unnecessarily duplicated some arguments, leading toexcessively long command lines, which in some cases, exceeded the Windows command linelength limitation. This problem has been fixed in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This bug would likely lead to an obvious build failure.","No Risk"
"k a","Remove VCAST_PREPROCESS_PREINCLUDE from GNU templates >= 3.0","VC-415","In previous versions of VectorCAST/C++, selecting any GNU compiler template would set thecompiler option ""Preprocess include file"" (VCAST_PREPROCESS_PREINCLUDE) to anintrinsics.h header file which declared various functions that are built-in to gcc and g++.The declarations are no longer needed by VectorCAST to parse code for gcc and g++, and thusVectorCAST version 2025 SP1 no longer sets the VCAST_PREPROCESS_PREINCLUDE option tothis header file when selecting a compiler template for most GNU compiler versions.","Correction in newer version (release notes)","No Risk. This is a code quality/performance improvement. It does not affect test correctness.","No Risk"
"k a","Display corrupted monitored cover environment as invalid","VC-471","Previously, VectorCAST Projects with a corrupted monitored cover environment would trigger amodal dialog when hovered over, instead of displaying as invalid and showing the error as atooltip. This issue has been resolved in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that provides a clearer warning for a corrupted environment.","No Risk"
"k a","Support output for testcases failing due to a signal failure","VC-481","Previously, when using clicast to execute testcases in a VectorCAST unit test environment, the console execution report output did not support testcases that intentionally or unintentionally raised a signal, and therefore they displayed as though they were passing. Signals and exceptions are now supported in VectorCAST version 2025 SP1, where tests are correctly identified as failing and additional information is provided.","Correction in newer version (release notes)","Potential Risk. The previous behavior would incorrectly report a failing test as passing. This is a silent failure that compromises test integrity and is a severe risk for safety-critical software.
A problem solving process has been initiated to investigate the impact of these problems/bugs on medical devices already developed with the software tool.","Risk exists"
"k a","VectorCAST's vcshell and vcutil should decline to instrument c_cover_io file","VC-483","Previously, using the VectorCAST utilities vcshell and vcutil to instrument source code whileincluding VectorCAST's c_cover_io.c file caused an error when building the instrumentedexecutable. This problem has been fixed in VectorCAST version 2025 SP1, where VectorCAST'sinternal files c_cover_io.c, c_cover_io.cpp, and c_cover.h are not instrumented even ifthey are present in the vshell database.","Correction in newer version (release notes)","No Risk. This bug causes an obvious build error easily detected.","No Risk"
"k a","Parse errors #including standard headers like iostream or string for GNU 14","VC-496","Previously with VectorCAST/C++, parse errors would occur for GNU 14 code using'__bfloat16' literals or builtin operators '__is_array' and '__is_reference'. These problems are fixed in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. These are parse errors easily detected.","No Risk"
"k a","Parse errors for vector-related builtins in GNU 14 when #includingx86intrin.h","VC-498","Previously, VectorCAST/C++ could issue errors for some vector-related builtin functionsrecognized by GNU version 14. This problem is fixed in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. These are parse errors easily detected.","No Risk"
"k a","Probe Point Pane fails to display when returning to Probe Points tab in darkmode","VC-653","Previously, when the coverage option ""Source File Perspective"" was set, the VectorCAST ProbePoint editor would fail to refresh and resize its panes properly when toggling between tabs.This issue, which occurred exclusively in dark mode, has been resolved in VectorCAST version2025 SP1.","Correction in newer version (release notes)","No Risk. This is a usability bug with the GUI.","No Risk"
"k a","Eliminate C++ harness variables vCAST_VALUE*","VC-707","In previous versions of VectorCAST/C++, the harness would unnecessarily convert all datainputs to signed integer, unsigned integer, and floating point values using the harnessvariables vCAST_VALUE_INT, vCAST_VALUE_UNSIGNED and vCAST_VALUE. In someuncommon cases, the unnecessary conversions took several seconds of additional processingtime. In VectorCAST version 2025 SP1, data type conversions are now done only as needed, and thevCAST_VALUE* variables have been eliminated.","Correction in newer version (release notes)","No Risk. This is a performance/code quality improvement. It does not affect test correctness.","No Risk"
"k a","Support removing all probe points for a subprogram","VC-821","Previously, the context menu item 'Remove Probes for this subprogram' was missing in theProbe Point editor when the coverage option ""Source File Perspective"" was set. This problem isfixed in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This is a usability enhancement.","No Risk"
"k a","Parse error for cast of const value with Keil","VC-822","Previously, VectorCAST/C++ incorrectly gave the error ""expression must have aconstant value"" when parsing Keil ARM code containing a cast of a const variable used in aconstant expression. This problem has been resolved in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Save changes to probe point text automatically","VC-824","Previously, when the coverage option ""Source File Perspective"" was set, the VectorCAST ProbePoint editor prompted users to save changes when switching between editors, causinginconvenience to the user. In VectorCAST version 2025 SP1, edits are automatically savedwhen the editor loses focus.","Correction in newer version (release notes)","No Risk. This is a usability enhancement.","No Risk"
"k a","Disabled probe icons displayed as empty","VC-827","Previously, when the coverage option ""Source File Perspective"" was set, the VectorCAST ProbePoint editor displayed the probe indicator as a circle, suggesting it had no code at all, when allprobe points were deactivated. The display caused confusion for users expecting the probe iconto be shown in grey. This problem is fixed in VectorCAST version 2025 SP1. The probe iconnow correctly appears in grey when all probe points are deactivated.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI display.","No Risk"
"k a","Display all environment names for a coverable line in the Line Details, even if uncovered","VC-877","In previous versions of VectorCAST Project, when viewing the aggregated coverage for a source file from the Files tab, VectorCAST provided the environment name(s) providingcoverage for that line in the Line Details section, but only for covered lines. In VectorCAST version 2025 SP1, the names of all environments that are associated with thatline are now provided, whether it is covered or not by test execution. This information isespecially helpful when seeking the relevant environment in order to add tests to achieveincreased coverage.","Correction in newer version (release notes)","No Risk. This is a usability enhancement. It provides more information to the user.","No Risk"
"k a","Parse error for clang builtin '__datasizeof'","VC-882","Previously, VectorCAST/C++ gave a parse error for clang code containing the builtin operator'__datasizeof'. This problem has been resolved in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Parse error for clang builtin '__is_trivially_relocatable'","VC-883","Previously, VectorCAST/C++ gave a parse error for clang code containing the builtin operator'__is_trivially_relocatable'. This problem has been resolved in VectorCAST version2025 SP1.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Incorrect source highlighting on multi-line Probe Point instrumentation points","VC-918","Previously, when the coverage option ""Source File Perspective"" was set, the VectorCAST ProbePoint editor redrew the highlighting on only the first line of probes spanning multiple lines,causing incomplete highlighting and orphan highlighted lines when switching between single-line and multi-line probes. This problem is fixed in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI.","No Risk"
"k a","Choosing ""Edit Probe Points"" menu item from coverage viewer doesn't jump to line when Probe Point editor already open","VC-919","Previously, when the coverage option ""Source File Perspective"" was set, the VectorCAST ProbePoint editor did not select the correct line when opening from the coverage viewer. Thisproblem is fixed in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI.","No Risk"
"k a","Improve colors in html reports in dark and high contrast modes","VC-953","VectorCAST version 2025 SP1 improves the colors used in HTML reports for dark mode andhigh-contrast mode.","Correction in newer version (release notes)","No Risk. This is a usability enhancement.","No Risk"
"k a","Provide warning and reduce output when invalid compiler template used in project","VC-980","Previously, when a VectorCAST project encountered an invalid compiler tag, it generated anexcessively large error message. In VectorCAST version 2025 SP1, this issue has beenresolved. The system now displays a concise error message indicating that the tag is invalid.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that provides a clearer warning for an obvious problem.","No Risk"
"k a","Move release notes to navigation bar on Welcome page","VC-992","Previously, the link to the Release Notes was accessible only from the Welcome page's ""Home""menu item, requiring users to switch to the Home page to find the link to the Release Notes.To improve the user experience and ease of access, VectorCAST version 2025 SP1 moves thelink to the Release Notes to the navigation bar on the Welcome page, replacing the ""Updates""menu item.","Correction in newer version (release notes)","No Risk. This is a usability enhancement.","No Risk"
"k a","For a range-based for loop only the 'f' portion considered as the branch for SFP display","VC-1007","Previously, when the coverage option Source File Perspective (SFP) was set to True,VectorCAST/C++ and VectorCAST Cover displayed only the character 'f' to represent thesource related to the instrumentation point in the coverage viewer and Aggregate Coveragereport for branch-based coverage types. This problem has been fixed in VectorCAST version2025 SP1.","Correction in newer version (release notes)","No Risk, ""Source File Perspective"" (SFP) is not used.","No Risk"
"k a","""Instrumenter parse failed"" error when template function contains aparameter of a type which is undefined","VC-1069","In previous versions of VectorCAST Cover, instrumenting a template function with noinstantiations and a function parameter of a type that was undefined could result in aninstrumentation error. This problem has been fixed in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This is an instrumentation error which is an obvious build blocker.","No Risk"
"k a","Coverage missing branch outcome for conditions using #pragma weakfunction1=function2 functions","VC-1078","Previously, VectorCAST/C++ did not recognize that 'if (function1)' should have two branch outcomes when preceded by a ""#pragma weak function1=function2"" statement. This problem has been resolved in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","Minor Risk. This bug leads to missing coverage information on very specific occasions and is easily detected during a query or review.","No Risk"
"k a","Unhandled exception when instrumenter triggers a failed assertion","VC-1103","In previous versions of VectorCAST, an unhandled exception could occur due to a failedassertion in the internal parser. This issue has been resolved in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This bug causes an obvious crash.","No Risk"
"k a","Crash generating Basis Path or MC/DC testcase for code with an ifstatement containing _Static_assert","VC-1115","Previously, VectorCAST/C++ crashed when generating basis path and MC/DC testcases whenthe code contained an if-statement that had a _Static_assert. This problem has beenresolved in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This bug causes an obvious crash.","No Risk"
"k a","""Cannot backup directory"" message when updating or rebuilding environment on Windows after HTML report","VC-1163","Previously, when launching the VectorCAST GUI on Windows using'%VECTORCAST_DIR%vcastqt -e <environment name>', the current directory was set tothe environment directory, causing the Chromium-based HTML report renderer to lock thedirectory. As a result, after generating a report in HTML, the user was prevented from updatingor rebuilding the environment with the error message ""Cannot backup directory."" Thisproblem has been resolved in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This is a usability bug that would be an obvious blocker when a developer tries to rebuild an environment.","No Risk"
"k a","Parse errors due to not recognizing partial ordering of member templateswhen one of the templates is conditionally-explicit","VC-1385","Previously, VectorCAST/C++ could fail to establish partial ordering of member templates whenone of the templates is conditionally-explicit, causing parse errors designating a constructorcall as ambiguous. This problem has been resolved in VectorCAST version 2025 SP1.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Remove legacy RGW versions 1 & 2","99553","VectorCAST version 2025 completes the migration of Requirements Gateway (RGW) andremoves all legacy versions of the RGW subsystems. Details on how to configure the Requirements Gateway (RGW) are included in the VectorCASTUser's Guide. For assistance in migrating any legacy RGW databases to the latest RGW data model version(using .json files), contact Vector Tech Support at support@vector.com or visithttps://support.vector.com/.","Correction in newer version (release notes)","No Risk. This is a feature removal. It's a change in the tool's functionality not a bug.","No Risk"
"k a","Increase default width for Execution Results column in TEXT ExecutionReports","100568","Previously, the default width of the Pass/Fail column in the Execution Report in TEXT formatwas 13 characters, which sometimes was too narrow for large numbers of compared ExpectedValues, causing the data to wrap to the next line. Beginning with VectorCAST version 2025, thedefault width has changed from 13 to 16 characters. clicast -lc|-lada option VCAST_RPTS_RESULT_COLUMN_WIDTH <width, incharacters>The default value is 16.","Correction in newer version (release notes)","No Risk. This is a usability enhancement for report formatting.","No Risk"
"k a","Remove original source coverage report","100787","VectorCAST version 2025 removes the Original Source Coverage Report for Projects. Thisfunctionality has been replaced by the Source File Perspective view and reports in Coverageenvironments and Projects.","Correction in newer version (release notes)","No Risk. This is a feature removal.","No Risk"
"k a","Base directory is no longer added as a testable source directory whencreating a Cover environment","101363","Previously, when adding a base directory in a Cover environment, the base directory itself wasadded as a testable source directory (TESTABLE_SOURCE_DIR) to the CCAST_.CFG file. Thisproblem is fixed in VectorCAST version 2025.","Correction in newer version (release notes)","No Risk. This bug would likely lead to an obvious build failure easily detected by a developer.","No Risk"
"k a","Update the oldest environment version that can be used with VectorCAST2025","101647","VectorCAST unit test environments and coverage environments created before version 2021will not open with VectorCAST version 2025. Before updating from versions prior to 2021, generate regression scripts for all environmentsusing your current VectorCAST version. Then, after installing VectorCAST 2025, recreate eachenvironment from those scripts. This procedure is also recommended for monitoredenvironments within a VectorCAST project. Pre-2021 VectorCAST projects can still be opened with the newest version of VectorCAST.However, any existing pre-2021 environments within these projects must be rebuilt beforethey can be opened.","Correction in newer version (release notes)","No Risk. This is a documentation change.","No Risk"
"k a","Static analysis tools removed","101698","Beginning with VectorCAST version 2025, the following static analysis functionality is removed: >The custom tool entries for PC-lint Plus, CodeSonar, and Axivion >The ability to right-click a source file to analyze the source code or to view theanalysis in a VectorCAST/C++ unit test or Cover environment or from the Files tab ofa VectorCAST Project >The ability to push static analysis results with a TESTinsights data push >The Static Analysis main menu and sub-menus However, the Lint analysis DataAPI support remains, but will be removed in the VectorCAST2026 release. The Static analysis option LINT_MISRA remains for use with regression scripts. It is recommended to perform static analysis and results viewing using your local installation ofthe static analysis tool.","Correction in newer version (release notes)","No Risk. This is a feature removal.","No Risk"
"k a","Project File List in opened migrated environment incorrect","VC-149","Previously, VectorCAST Projects would generate an invalid Project File List Report when generated while an environment was open. This issue is fixed in VectorCAST version 2025.","Correction in newer version (release notes)","No Risk as the test binaries are not compromised.","No Risk"
"k a","No longer convert legacy (pre-6.3) RSP DATA files","VC-306","Previously, VectorCAST RSP would determine if the RSP configuration (CCAST_.CFG file) hadbeen created before VectorCAST version 6.3 and if so, VectorCAST would check for any legacyDATA files that had been moved in the VectorCAST version 6.3 installation. If the configurationwas found to be using any of the moved files, the settings were automatically updated to usethe new file locations. In VectorCAST version 2025, this configuration scanning and updating no longer occurs. Usersupgrading from versions older than 6.3 may need to make RSP changes to use the newversion. As part of this change, the C_COMPILER_CFG_SOURCE option is no longer updated toCONFIG_FILE_63.","Correction in newer version (release notes)","No Risk. This is a usability change. The documentation clarifies what the user needs to do to address the issue.","No Risk"
"k a","Instrumentation for lambdas in CUDA","VC-365","Previously, VectorCAST Cover in CUDA mode would instrument all lambda functions as if theywere host functions. Starting with VectorCAST version 2025, lambdas in CUDA mode areinstrumented based on the attributes of their enclosing function.","Correction in newer version (release notes)","No Risk, CUDA is not used by OB.","No Risk"
"k a","Add VCAST_DESKTOP_LICENSE_TYPE to NVLM information in diagnosticreport","VC-387","Starting with VectorCAST version 2025, the value of the environment variableVCAST_DESKTOP_LICENSE_TYPE is displayed in the licensing section of the diagnostic reportwhen NVLM licensing is being used.","Correction in newer version (release notes)","No Risk. This is a usability enhancement.","No Risk"
"k a","Remove obsolete csv2tst utilities","VC-475","VectorCAST version 2025 no longer includes the undocumented and obsolete csv2tst.exeand csv2tst.pl utilities. Test case generation from CSV data continues to be supported withCSV Map test cases. For VectorCAST C/C++ and VectorCAST/Ada users unfamiliar with the CSV Map test case, seethe Knowledge Base Article named ""CSV Mapping in VectorCAST/C++"".","Correction in newer version (release notes)","No Risk. This is a feature removal.","No Risk"
"k a","For, if, and while not instrumented correctly for branch-based coveragetypes","VC-527","Previously, when instrumenting source code containing a for loop with an empty condition or an if, else-if, or while condition with a declaration, VectorCAST/C++ and VectorCAST Cover considered the entire loop or condition block as part of the condition branch for branch-based coverage types. This problem has been fixed in VectorCAST version 2025.","Correction in newer version (release notes)","No Risk. Minor incorrect instrumentation issue which is easily detected and also false positive.","No Risk"
"k a","Update HTML reports to comply with W3C Markup Validator","VC-533","In VectorCAST version 2025, the HTML report generator has been updated to produce HTMLcode in compliance with the W3C HTML Validator, and to better enable all CSS styles to beavailable for user customization.","Correction in newer version (release notes)","No Risk. This is a code quality improvement for reports.","No Risk"
"k a","Expanding large arrays causes performance issues","VC-568","Previously, VectorCAST/C++ automatically expanded large newly-allocated arrays, causingexcessive delays when displaying data in the Parameter Tree. This problem has been resolvedin VectorCAST version 2025. Large arrays now display significantly faster.","Correction in newer version (release notes)","No Risk. This is a performance enhancement that doesn't affect test correctness.","No Risk"
"k a","Minimum system requirements updated","VC-621","The system requirement for VectorCAST version 2025 on Windows is Windows 10 or higher orWindows Server 2016 or higher. The system requirement for VectorCAST version 2025 onLinux is glibc 2.17 or higher.","Correction in newer version (release notes)","No Risk. This is a documentation change.","No Risk"
"k a","Parse error for extern ""C"" unconstrained array in anonymous namespace","VC-672","Previously, VectorCAST/C++ incorrectly gave a parse error for code containing extern ""C""unconstrained arrays in anonymous namespaces. This problem has been resolved inVectorCAST version 2025.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Syntax error in instrumented source code with multiple declarations in an ifstatement","VC-716","Previously, after instrumenting source code with an if condition containing multipledeclarations, VectorCAST/C++ and VectorCAST Cover displayed a compile error whencompiling the instrumented source file. This problem is fixed in VectorCAST version 2025.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Instrumenter places ""vcast_is_false"" incorrectly in constexpr if block forstatement+branch coverage","VC-788","Previously, after instrumenting source code containing a 'constexpr if' with no 'else', forStatement+Branch coverage, VectorCAST/C++ and VectorCAST Cover displayed a compileerror when compiling the instrumented source file. This problem is fixed in VectorCAST version2025.","Correction in newer version (release notes)","No Risk. This bug causes a compile error easily detected.","No Risk"
"k a","Project View Size is Not Preserved","VC-836","Previously, after opening and then closing a cover environment or unit test environment from aVectorCAST Project, the Project View pane did not properly restore to its original size andinstead shrank unexpectedly. This issue has been fixed in VectorCAST version 2025.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI.","No Risk"
"k a","Set QTWEBENGINE_CHROMIUM_FLAGS to --no-sandbox option","VC-947","To ensure proper HTML report rendering on the Linux platform, VectorCAST version 2025 sets the environment variable QTWEBENGINE_CHROMIUM_FLAGS to --no-sandbox to address display issues in Qt WebEngine on certain Linux distributions. This option disables sand boxing. If sand boxing is a requirement for your development system, then the use of this option needs to be considered. If desired, you can restore default sandboxing behavior by setting the QTWEBENGINE_CHROMIUM_FLAGS environment variable before starting VectorCAST.","Correction in newer version (release notes)","No Risk - only impact on linux usability.","No Risk"
"k a","Test case editor incorrectly saving string value as symbolic constant","VC-1017","Previously, entering a string value in the Parameter Tree when there was a macro of the samename but a different type caused VectorCAST/C++ to incorrectly save the value as a symbolicconstant, leading to an error when executing the test. This problem has been resolved inVectorCAST version 2025.","Correction in newer version (release notes)","No Risk. The bug causes a test to fail with an error which is easily detected.","No Risk"
"k a","Functions returning a template type with const arguments are not considered testable","99634","Previously, VectorCAST/C++ did not consider functions with template return types to be testable if the return type had const-qualified template arguments. The affected function(s) would be missing in the test case tree. This issue has been fixed in VectorCAST version 2023 SP7.","Correction in newer version (release notes)","No Risk. This is a usability issue where certain functions were not made available for testing. The issue is easily detected during test development as the affected functions would be visibly absent from the test case tree, prompting the developer to investigate and find an alternative testing approach.","No Risk"
"k a","Crash in C++ Wizard while loading environment script","99705","Previously, VectorCAST/C++ could crash when the user clicked the Load button or specified a vcshell database in the Create New Environment wizard while already loading an environment script. This problem has been fixed in VectorCAST version 2023 SP7 by preventing user interaction with the wizard while completing the loading process.","Correction in newer version (release notes)","No Risk. This is a GUI crash which is an easily detected usability bug that acts as an obvious blocker during environment setup. It does not affect the correctness of tests or reports once an environment is successfully created.","No Risk"
"k a","Compile error in test harness when using IAR __near and __far qualifiers","99821","Previously, VectorCAST/C++ did not retain the IAR __near, __far, __far_func, and __near_func qualifiers in the test harness, which resulted in compile errors for some IAR targets. This problem has been fixed in VectorCAST version 2023 SP7.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build. It's a classic 'fix it and move on' type of issue that prevents any further progress until resolved.","No Risk"
"k a","The vcdb --abspath parameter does not need to quote paths containing dashes","100257","In previous versions of VectorCAST, specifying --abspath to vcdb would produce output where paths containing '-' would always be quoted. In VectorCAST version 2023 SP7, the presence of '-' in a path does not trigger quoting on its own.","Correction in newer version (release notes)","No Risk. This is a cosmetic output formatting issue in a command-line utility that does not affect the functionality of the tool or the correctness of test results. The paths are still correctly identified.","No Risk"
"k a","Internal error when building environment with library stubs and pointer-to-member specialization","100539","Previously, VectorCAST/C++ encountered internal errors while checking for library stubs in environments containing class templates specialized on pointer to member, where the templates also defined member functions. This led to crashes in the environment builder. This issue has been fixed in VectorCAST version 2023 SP7.","Correction in newer version (release notes)","No Risk. This is a crash during environment build which is an obvious and easily detected blocker. No tests can be created or executed until the environment is successfully built, making this a clear failure point.","No Risk"
"k a","Support Test Case Tree display of functions with same name differing only in case","96665","Previously, VectorCAST/C++ did not correctly display functions having the same name but differing only in case in the Test Case Tree. This problem has been resolved in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a display bug in the GUI where functions were not shown correctly in the tree view. The underlying test data and execution are not affected, and the missing functions would be immediately obvious to a developer reviewing the test case tree.","No Risk"
"k a","Instantiating a class in the global part of the parameter tree is not working, no vtable created for param class","98638","Previously, VectorCAST/C++ incorrectly allocated memory when initializing a class instance in which the class constructor took an array of default constructable classes, causing the test harness to crash during execution. This issue has been resolved in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This bug causes a test harness crash which is an obvious runtime failure easily detected during test execution. The crash would immediately alert the developer to the problem.","No Risk"
"k a","Using clicast command with non-existing environment gives a misleading message","99010","Previously, running a clicast command on Linux with an environment that did not exist triggered an error message stating the environment was in a read-only directory. Starting with VectorCAST version 2023 SP6, the environment directory is correctly reported as missing.","Correction in newer version (release notes)","No Risk. This is a usability bug with error messaging. While the error message was misleading, the command still failed clearly, alerting the user to the problem. The corrected message simply provides better diagnostic information.","No Risk"
"k a","Garbled Japanese text in message window when building QA environment in VectorCAST Project","99232","In previous versions of VectorCAST, UTF-8 characters were not displayed properly in the message window. This issue has been fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a character encoding display issue in the GUI that affects the readability of messages but does not affect the underlying functionality, test execution, or results.","No Risk"
"k a","Harness compile error when finalization used in SBF unit","99316","In previous versions of VectorCAST/Ada, SBF units that used a finalization subprogram would result in a harness compile error due to required objects being missing. This problem is fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and blocks the build, preventing any further testing until resolved.","No Risk"
"k a","Compile error in Ada whitebox environments with private subprograms with abstract parameter type","99344","In previous versions of VectorCAST/Ada, a harness compile error could occur for whitebox environments where a private subprogram had a parameter of an abstract type. This problem is fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is an obvious build blocker, easily detected during the build process.","No Risk"
"k a","Compile error with Template Instantiation Coverage when passing lambda to template function with rvalue reference argument","99395","In previous versions of VectorCAST/C++, instrumenting a class's member function where the class object is instantiated with a lambda could result in a generated type name being inserted into the instrumented source file, which would cause errors at compile time. This has been fixed in VectorCAST/C++ version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error in the instrumented source file which is easily detected during the build process.","No Risk"
"k a","Support Buffered I/O in vcwrap workflow with Green Hills compilers","99407","VectorCAST Cover version 2023 SP6 supports cover environments with Buffered I/O when using the vcwrap workflow and a Green Hills compiler.","Correction in newer version (release notes)","No Risk. This is a new feature addition that extends support for a specific workflow and compiler combination, not a bug fix.","No Risk"
"k a","Vcwrap problem with ""clicast build --intercept"" command on Ubuntu 22.04","99417","In VectorCAST version 2023 SP6, the vcwrap workflow now supports recording additional system calls used to spawn processes.","Correction in newer version (release notes)","No Risk. This is a feature enhancement to improve compatibility with Ubuntu 22.04, extending support for additional system calls.","No Risk"
"k a","Add scrollbar to Options dialog when screen resolution is very small","99554","Previously, if the user's screen was set to a low resolution (800x600), the OK and Cancel buttons in the Options dialog were unreachable. VectorCAST version 2023 SP6 adds a vertical scrollbar to the Options dialog when needed.","Correction in newer version (release notes)","No Risk. This is a GUI usability improvement for low-resolution displays. It does not affect test correctness or functionality.","No Risk"
"k a","Code Coverage Summary Environment Counts column invisible","99726","In previous versions of VectorCAST, the Code Coverage Summary would display an unsupported Environment Count column when a VectorCAST Project was open in Source File Perspective mode. The cells for this column would always be empty. This issue has been resolved in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a GUI display issue where an unsupported column was shown. The underlying data was correct, and the empty column would be immediately obvious to users.","No Risk"
"k a","Coverage by Analysis results improperly taking precedence over execution results in DataAPI and Metrics report","99789","By definition, an MC/DC condition is covered by execution when at least one of its pairs is covered by execution. In previous versions of VectorCAST/C++ and VectorCAST Cover, the DataAPI would incorrectly mark a condition as covered by analysis (CBA) if it contained a pair that was covered by analysis, even if the condition also contained a pair that was covered by execution. The MC/DC pair metrics are retrieved from the DataAPI when generating the Metrics report in Translation Unit Perspective (TUP) mode, causing incorrect MC/DC pair metrics to be displayed in the report and conflicting with the metrics displayed in the Source File View Coverage Columns and Coverage Viewer. In VectorCAST version 2023 SP6, the DataAPI correctly marks an MC/DC condition as covered by execution when at least one of its pairs is covered by execution, even if it also contains a pair(s) that is covered by analysis, thus correcting the MC/DC pair metrics in the Metrics report in TU perspective as a result.","Correction in newer version (release notes)","No Risk. Cover By Analsysis (CAB) coverage is not used. This bug causes incorrect MC/DC coverage reporting where Coverage by Analysis incorrectly takes precedence over execution coverage. This is a silent reporting failure. However, the impact is mitigated by the fact that: (1) execution coverage is more rigorous than CBA, so the actual coverage level achieved is higher than reported, and (2) the discrepancy between different reports would likely be noticed during review.","No Risk"
"k a","Support search in Object Initialization User Code window","99853","VectorCAST/C++ version 2023 SP6 supports searching for an object while using the Object Initialization User Code window.","Correction in newer version (release notes)","No Risk. This is a new feature addition that adds search functionality to a GUI window, improving usability without affecting existing functionality.","No Risk"
"k a","Improve handling of errors from corrupted compound","99862","In previous versions of VectorCAST, invalid slots within compound test cases would result in unclear error messages. In VectorCAST version 2023 SP6, the error messages are clarified to indicate that the slot data is invalid.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that improves error messaging. The underlying errors were already being detected and reported, just with less clear messaging.","No Risk"
"k a","Code Coverage Summary not showing correct coverage with tic files","99871","In previous versions of VectorCAST Project, with the default Translation Unit perspective set, the Code Coverage Summary could incorrectly report a function's coverage when it was contained in multiple translation units (represented in the Files tab as tic files) across a Project. This problem has been fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","Potential Risk. This is a silent reporting bug where coverage for functions in multiple translation units could be incorrectly calculated in the summary. This could mislead a reviewer about the actual coverage achieved, compromising the integrity of test documentation for regulatory compliance.","Risk exists"
"k a","Coverage is not updated for headers after full build-execute in Project","99878","Previously, stale Source File Perspective coverage could be displayed after a Build/Execute request in a VectorCAST Project. This issue has been fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. Source File Perspective is not used. This bug causes stale coverage data to be displayed for headers after a rebuild/execute, which is a silent failure.","No Risk"
"k a","Incorrect instrumentation data with constexpr function calls with vcwrap workflow","99902","When using the vcwrap work flow in previous versions of VectorCAST Cover, constant objects instantiated by aggregate initializers containing constexpr calls could potentially be instrumented incorrectly if Function Call instrumentation was enabled, resulting in syntax errors in the instrumented source file. This problem has been fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This bug causes syntax errors in the instrumented source file which are easily detected during compilation.","No Risk"
"k a","Cannot open unit test environment in VectorCAST Project in certain circumstances","99934","Previously, VectorCAST Project was unable to open migrated unit test environments in a Project after a Cover environment was opened and closed, and then the coverage viewer was displayed while a C++ Enterprise Edition license was available. This problem has been resolved in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a usability bug under very specific conditions that prevents opening an environment. The failure is obvious and immediate, acting as a clear blocker that would prompt investigation.","No Risk"
"k a","No error shown when VectorCAST cannot open an environment","99936","In previous versions of VectorCAST/C++ or VectorCAST/Ada, if the environment builder exited with a success status but failed to produce a valid environment directory, VectorCAST could fail to show an error that the environment could not be opened. This problem is fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a usability bug with error messaging. While the error message was missing, the fact that the environment cannot be opened would be immediately obvious to the developer when they attempted to use it.","No Risk"
"k a","Incremental execute does not rerun testcases after the environment is reinstrumented","100024","In previous versions of VectorCAST, the command 'clicast execute incremental' did not rerun tests that had results even if coverage data was missing due to a prior change of coverage type. In VectorCAST version 2023 SP6, tests will be re-executed if coverage is enabled but no coverage result is present.","Correction in newer version (release notes)","No Risk. This bug could lead to incomplete coverage which is easily detected false positive warning.","No Risk"
"k a","When using vcwrap workflow, create the temporary preprocess file in the environment directory","100055","Previously the preprocess file was created in the source working directory. This could cause problems due to insufficient permissions in some situations. In VectorCAST version 2023 SP6, the temporary preprocess file is saved to the VectorCAST environment directory.","Correction in newer version (release notes)","No Risk. This is a usability improvement that changes where temporary files are stored to avoid permission issues. Any problems with the old location would have resulted in obvious build failures.","No Risk"
"k a","Control Flow Graph fails to generate when source file has overloaded methods","100136","Previously, VectorCAST/C++ could not generate the Control Flow Graph report via custom tool when the selected subprogram contained overloaded methods. This problem has been fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a report generation failure that would be immediately obvious when attempting to generate the Control Flow Graph for overloaded methods. It does not affect test execution or other reports.","No Risk"
"k a","Support case insensitivity on Windows when using the vcwrap workflow","100175","Previously, when using the vcwrap workflow, if the source file names specified in the vcwrap compile command were in a different case than the source filenames that were added to the Cover environment, those source files were not instrumented. VectorCAST version 2023 SP6 supports case insensitivity on Windows, especially for the situation where the user does not have control over the filename case used in the compile commands/build system.","Correction in newer version (release notes)","No Risk. This bug could lead to source files not being instrumented due to case mismatch, resulting in missing coverage data. However, the vcwrap workflow is never used.","No Risk"
"k a","Test execution failure involving smart pointer parameters when using parallel processing","100203","Previously, when using parallel processing where VCAST_NUM_JOBS is set to a number greater than 1, VectorCAST/C++ incorrectly stored indexing information for smart pointer parameters, causing test execution failures. This issue has been fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This bug causes obvious test execution failures when using parallel processing with smart pointer parameters. The failures would be immediately detected during test execution.","No Risk"
"k a","Test case with only control flow expected values incorrectly considered to be empty","100211","Previously, VectorCAST treated test cases containing only expected control flow values as empty when the configuration option ""Fail empty testcases"" (VCAST_EMPTY_TESTCAST_FAIL) was set to True, causing the tests to fail during execution. Starting with VectorCAST version 2023 SP6, those tests are no longer treated as empty.","Correction in newer version (release notes)","No Risk. This bug causes valid tests to fail incorrectly, which is an obvious false-negative result easily detected during test execution review.","No Risk"
"k a","Inspecting units/subprograms in Project from Code Coverage Summary gives unexpected results","100229","In previous versions of VectorCAST, the project could open the wrong coverage viewer when double-clicking a subprogram in the Code Coverage Summary. This problem has been fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a GUI navigation bug where the wrong coverage viewer opens. The user would immediately notice they are viewing the wrong data and close/reopen the correct viewer.","No Risk"
"k a","ATG toolbar icon should be disabled for a QA environment","100239","In previous versions of VectorCAST, the ATG toolbar button was incorrectly enabled in QA environments. In VectorCAST version 2023 SP6, the ATG button is not available in QA environments.","Correction in newer version (release notes)","No Risk. This is a GUI bug where a button is enabled when it shouldn't be. Clicking the button in QA environments would result in an obvious error or no action.","No Risk"
"k a","Virtual functions set to ""ignore"" should not be instrumented","100265","Previously, with VectorCAST/Coupling, virtual functions marked as ""ignore"" in the manual analysis file would continue to be instrumented and ""promoted"" to control couples if they were covered at run time. In VectorCAST version 2023 SP6, ignored virtual functions will not be instrumented and therefore cannot be promoted from runtime coverage. This promotion behavior still exists for virtual functions with the status ""analyze"" which is the default status. These ignored virtual functions will also be displayed in the coupling coverage report section labeled ""Uncovered Virtual Control Couples Detail by Reference"". Their status will show as ignored to indicate they are not relevant.","Correction in newer version (release notes)","No Risk. Coupling is not used. This bug could lead to functions marked as 'ignore' being incorrectly instrumented and included in coupling analysis, potentially affecting the accuracy of coupling coverage reports. However, the impact is mitigated by the fact that ignored functions being promoted would be visible in reports, making this detectable during review.","No Risk"
"k a","Licensed features not available when a FlexNet license time zone failure occurred","100317","VectorCAST version 2023 SP4 and later versions incorrectly did not permit license checkouts after a checkout failure due to incorrect server time zone. This problem has been resolved in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a licensing issue that causes an obvious blocker - the tool cannot be used without a valid license checkout. The failure is immediate and clear.","No Risk"
"k a","Incorrect subprogram access type stored when using parallel processing","100355","Previously, when using parallel processing, VectorCAST/C++ treated private and protected member functions as accessible during test script import, which caused test scripts to import without error when an error should have been given. This problem has been fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This bug allows test scripts to import when they should fail due to access violations. However, subsequent test execution would fail when attempting to call private/protected functions, making this an easily detected issue.","No Risk"
"k a","Support Visual Studio Code as an option for the external text editor","100360","VectorCAST version 2023 SP6 updates the list of supported text editors available as VectorCAST external editor for text files, and optionally for source code files. Located in the Options dialog, under the GUI tab, in the Text Editor Options sub-tab, the External Editor option now includes: > <custom> (allowing users to specify their own external editor) > VS Code (Visual Studio Code) > Emacs > Notepad > vi Please note that for VectorCAST to utilize an external editor, the editor must either be on the system's PATH environment variable, or the full path to the application must be entered.","Correction in newer version (release notes)","No Risk. This is a new feature addition that extends editor support options without affecting existing functionality.","No Risk"
"k a","Crash when generating concrete classes with parameter types that alias private types","100383","Previously, when auto-generating concrete classes, VectorCAST/C++ would crash when processing classes with member functions whose parameter types aliased private types declared in a different scope. This issue has been fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a crash during environment build which is an obvious and immediate blocker, easily detected during the build process.","No Risk"
"k a","enviroedg crashes when attempting to build environment","100407","Previously, VectorCAST/C++ encountered internal errors while generating type handling code for pointers to std::function types declared using a typedef as the function signature. This caused the environment builder to abort and the build to fail. This issue has been fixed in VectorCAST version 2023 SP6.","Correction in newer version (release notes)","No Risk. This is a crash during environment build which is an obvious build blocker, easily detected when the builder aborts.","No Risk"
"k a","Alert user to license issue prior to attempting environment build","100424","Previously, VectorCAST did not attempt to acquire a license when the New Environment button on the toolbar was clicked, so it was not known if any licenses were actually available. In the situation where no license was available, the environment build would fail. Starting with VectorCAST version 2023 SP6, an error dialog is displayed when a user clicks on the New Environment button on the toolbar if no license is available.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that provides earlier feedback about license availability. The underlying licensing issue would still cause an obvious build failure, just at a later stage.","No Risk"
"k a","Pre-include file incorrectly added to user globals file when VCAST_WHITEBOX_SEARCH_DIRS_ONLY enabled","94202","In previous versions of VectorCAST/C++, the user globals unit erroneously #included the header file specified by the option ""Preprocess preinclude file"" (VCAST_PREPROCESS_PREINCLUDE) for whitebox C++ unit test environments when the Builder option ""Whitebox search directories only"" (VCAST_WHITEBOX_SEARCH_DIRS_ONLY) was set to True, causing a compile error in the test harness. This problem is fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This bug causes a compile error in the test harness which is an obvious build blocker, easily detected during compilation.","No Risk"
"k a","Show helpful error message when auto-detect templates fail","95650","In previous versions of VectorCAST/C++, if compiler template auto-detection failed for GNU, Clang, or Visual Studio compilers, a simple error dialog was presented without helpful details, and a python exception was given. As of VectorCAST version 2023 SP5, the error dialog directs the user to the Jobs window with the specific error encountered with respect to the auto-detection failure. The python exception is no longer displayed.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that improves error messaging during compiler template auto-detection failure. The underlying failure was already being detected and blocked progress; this simply provides better diagnostic information.","No Risk"
"k a","Harness compile error for SBF return of const volatile lvalue reference","96505","Previously, VectorCAST/C++ did not correctly generate Stub-by-function (SBF) return statements for functions returning const volatile lvalue references, causing a compile error in the test harness during environment build. This problem has been fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This bug causes a compile error in the test harness which is an obvious build blocker, easily detected during compilation.","No Risk"
"k a","HTML Execution report differs from TEXT version when code under test calls exit()","96653","Previously, when the environment's source code called the exit() function, VectorCAST/C++'s Execution report in TEXT format correctly indicated ""Exit was called from code under test"" whereas the Execution report in HTML format incorrectly indicated ""This event causes a failure."" This problem has been fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a reporting inconsistency easily detected.","No Risk"
"k a","Test harness limits length of string to 65535 characters","97088","In previous versions of VectorCAST/C++, test executions in environments with the Target option VCAST_NO_STDIN set to True would fail if the test harness input data contained any lines longer than 65535 bytes. In VectorCAST version 2023 SP5, harness input data lines can be any length less than the size of VCAST_MAX_STRING_LENGTH. Existing environments must be rebuilt to get the new behavior.","Correction in newer version (release notes)","No Risk. This bug causes test execution failures when string lengths exceed 65535 characters, which would be immediately obvious during test execution. The limitation and failure would be clear to a developer.","No Risk"
"k a","Support using OpenOCD with VectorCAST RSP","97350","VectorCAST RSP version 2023 SP5 supports using the Open On-Chip Debugger (OpenOCD), which provides debugging, in-system programming, and boundary-scan testing for embedded target devices. VectorCAST uses the GDB debugger to connect to the OpenOCD server and executes testcases using an OpenOCD GDB script specified on the Execute command and Execute with Debug command. For information on how to use Open OCD with your target, contact Vector Support at https://support.vector.com.","Correction in newer version (release notes)","No Risk. This is a new feature addition that adds support for OpenOCD, not a bug fix.","No Risk"
"k a","Support use of a custom gdb execution script with VectorCAST RSP","97351","VectorCAST RSP version 2023 SP5 includes an improved implementation of the scripts used when executing tests on your target with the GDB debugger, and now supports the use of a custom GDB script. For more information, contact Vector Support at https://support.vector.com.","Correction in newer version (release notes)","No Risk. This is a feature enhancement that improves flexibility for debugging workflows but does not affect test correctness or introduce any silent failures.","No Risk"
"k a","Improve error message when cygpath conversion fails","98278","When used with cygwin-based GNU compilers, VectorCAST utilizes the cygpath tool to convert cygwin-style paths to Windows-style paths in translation unit line directives. In previous versions of VectorCAST, failures in this process did not show the error output from cygpath. In VectorCAST version 2023 SP5, the stderr and exit status will be shown if cygpath fails.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that provides better error reporting. The previous behavior would still have resulted in a failure, just with less informative error messages.","No Risk"
"k a","New examples demonstrating use of the DataAPI","98474","VectorCAST version 2023 SP5 includes examples demonstrating some ways to use the DataAPI to gather information about unit test environments and VectorCAST projects. The examples are located in the VectorCAST distribution directory, examples/DataAPI sub-directory. A Readme.txt file at this top level directory describes the set of examples and how to invoke them via VectorCAST's vpython.","Correction in newer version (release notes)","No Risk. This is documentation/example code that does not affect the tool's functionality or test correctness.","No Risk"
"k a","Parameter with string value with double-quotes exported to test script fails to import as same value","99252","Previously, VectorCAST/C++ and VectorCAST/Ada incorrectly imported string values in test scripts which started with two double quotes (""""). Those string values were treated as if they started with a single double quote (""), and if they ended with two double quotes, the ending was treated as a single double quote as well. Also, VectorCAST/Ada generated two sets of double quotes instead of one around string literals for basis path tests created using clicast. These problems have been resolved in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","Potential Risk. This bug could lead to incorrect string values being imported from test scripts, which could cause tests to pass or fail incorrectly. However, a developer would likely notice that string values with double quotes were being imported incorrectly when reviewing test data. The impact is limited to test cases with strings starting/ending with double quotes.","Risk exists"
"k a","Scripting errors in type support for Keil packed structs","99293","Previously, VectorCAST/C++ incorrectly handled array members of structs declared with the Keil'packed' attribute. Such members were not visible on the parameter tree. In addition, test valuestargeting members of nested 'packed' structs in Keil mode failed to export properly. These issueshave been fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. The missing array members on the parameter tree and export failures are easily detected usability issues. A developer would immediately notice that they cannot access the array members in the parameter tree.","No Risk"
"k a","Compile error on structured bindings with function call coverage","99329","In previous versions of VectorCAST/C++, assigning auto reference variables via a structuredbinding would result in an instrumented source file with syntax errors when instrumented forFunction Call coverage and compiled. This has been fixed in VectorCAST/C++ version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build. It's a classic 'fix it and move on' type of issue.","No Risk"
"k a","Parse errors including <type_traits> for GNU 13.1.0","99377","Previously, VectorCAST/C++ and VectorCAST Cover gave the error 'identifier ""__remove_cv""is undefined' when parsing GNU version 13 code with a #include of type_traits. Thisproblem has been resolved in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a parse error which is easily detected and would block the build.","No Risk"
"k a","Harness compile error for deleted default constructor called in type handling codefor smart pointers","99399","Previously, VectorCAST/C++ generated incorrect type handling code for smart pointers with astruct template argument whose members were not default constructible. This resulted in a call tothe implicitly deleted default constructor of the template argument, causing compile errors. Thisissue has been fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build.","No Risk"
"k a","Environment build error for template class using Visual Studio 2017 or 2019","99485","Previously, VectorCAST/C++ failed to build environments for Visual Studio 2017 and later thatincluded source code with testable functions defined within dependent name contexts. This issuehas been resolved in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a build error which is easily detected and would block environment creation.","No Risk"
"k a","Parse error in clang mode for _Atomic class types","99511","Previously, VectorCAST/C++ gave the error ""_Atomic class types are disabled"" for clangcode with _Atomic class types. This problem has been resolved in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a parse error which is easily detected and would block the build.","No Risk"
"k a","VectorCAST crash when linking requirement to compound test","99570","Previously, when using VectorCAST Requirements Gateway (RGW) in a unit test environment withmore than one unit, a DataAPI error and crash occurred when saving a Compound test case afterlinking a requirement to it. This problem has been fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a GUI crash which is an easily detected usability bug that does not affect test correctness. The crash would be immediately obvious to the user.","No Risk"
"k a","ATG fails to generate testcases if one UUT contains no functions","99599","Previously, when using Automatic Test Generation (ATG) on a C/C++ unit test environment whereone unit contained no subprograms, ATG would fail to generate any test cases for the other units.This problem has been fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. ATG failure to generate test cases is an obvious blocker that would be immediately detected by the user. The user would notice that no test cases were generated.","No Risk"
"k a","Incorrect handling of floating point values when using European encodings","99623","In previous versions of VectorCAST, localization-related environment variables such asLC_NUMERIC could incorrectly impact the interpretation of floating point string values in unit testenvironment test cases. This problem is fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","High Risk. This is a critical bug. The tool could silently misinterpret floating-point values based on locale settings (e.g., using comma vs. period as decimal separator), leading to incorrect test execution results. A test might pass when it should fail or vice versa, and this is a silent failure that is extremely dangerous for safety-critical systems. A problem solving process has been initiated to investigate the impact of these problems/bugs on medical devices already developed with the software tool.","Risk exists"
"k a","Prevent user from opening Configuration Editor for monitored environments","99644","In previous versions of VectorCAST, the Project menu's ""Open Configuration"" item was alwaysenabled, thus allowing the Configuration Editor to be opened for levels without configuration, suchas monitored environments. In VectorCAST version 2023 SP5, the menu item is disabled when alevel without configuration is selected in the Project View.","Correction in newer version (release notes)","No Risk. This is a usability enhancement that prevents a user action that would have no effect. It does not fix a bug that affects test correctness.","No Risk"
"k a","Coverage not refreshed in VectorCAST Project's coverage viewer after rebuildingenvironment","99654","Previously, VectorCAST Project did not correctly refresh the coverage viewer after the user changedthe source code displayed in that coverage viewer and then rebuilt the environment. This problemhas been fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI where the display is not refreshed. The underlying coverage data is correct; it's just not being displayed. A user would notice this immediately.","No Risk"
"k a","Eliminate deprecated option VCAST_EDG_RANGE_FILE_MAX_SIZE","99708","VectorCAST version 2023 SP5 removes the long-deprecated optionVCAST_EDG_RANGE_FILE_MAX_SIZE. Regression scripts that refer to this option should bemodified to use RANGE_FILE_MAX_SIZE.","Correction in newer version (release notes)","No Risk. This is a feature removal of a deprecated option. The documentation clearly states the replacement option to use.","No Risk"
"k a","TESTinsights improvements","99733","VectorCAST version 2023 SP5 provides several updates to the integration with TESTinsights, whichis provided as Software as a Service (SaaS) to registered TESTinsights users. For more information,see the new TESTinsights section of the Welcome page that displays on application startup. > When pushing collaborative test objects including Source Code Management (SCM)information, a python error occurred. This problem has been fixed. > The Push dialog shows a command line preview, from which a user can copy thiscommand to a terminal to perform the same PUSH action manually. > When pushing Requirements Gateway (RGW) data, any non-covered trace items areidentified. As always, the recommendation for a team is to use the same VectorCAST version. When updatingVectorCAST, migrate the collaborating clients in a common step to the newer version.","Correction in newer version (release notes)","No Risk. The python error when pushing to TESTinsights would be an obvious failure that prevents the push operation. The other items are feature enhancements.","No Risk"
"k a","Add support for std::wstringstream","99784","Previously, VectorCAST/C++ did not support use of the C++ std::wstringstream class type andfailed with compilation errors in the harness. VectorCAST version 2023 SP5 supports this class type,enabling the user to use wstrings for Input and Expected Values.","Correction in newer version (release notes)","No Risk. The lack of support for std::wstringstream would result in compilation errors in the harness, which are easily detected build blockers.","No Risk"
"k a","MC/DC Pairs coverage in SFP erroneously increasing when merge is requested","99799","In previous versions of VectorCAST Project, the Project's MC/DC Pair metrics could display erroneous totals while the coverage option Source File Perspective (SFP) was set to True. This issue has been resolved in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. Source File Perspective option is not used. This is a silent reporting bug where MC/DC pair metrics could be incorrectly inflated.","No Risk"
"k a","RGW IBM CLM: Link to attachment in Test Results","99802","Previously, when exporting testcase reports from VectorCAST RGW, the reports were not directlylinked to the test result and the export had to be done manually. In VectorCAST version 2023 SP5,the report is linked directly to the test result.","Correction in newer version (release notes)","No Risk. This is a usability enhancement for report linking in RGW. It does not fix a bug that affects test execution or correctness.","No Risk"
"k a","Environment builder crash when processing C++17 deduction guide","99806","Previously, VectorCAST/C++ incorrectly considered C++17 deduction guides as possible candidatesfor additional testable functions, causing the environment builder to crash when processing theseconstructs. This issue has been fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a builder crash which is an obvious build blocker. The crash would be immediately detected by the user.","No Risk"
"k a","vcastqt -lc and -lada incorrectly overrides the preferred license edition","99807","Previously, starting VectorCAST with -lc, -lada, or -x command line option caused the preferredlicense edition previously set by the clicast edition command to be ignored. This problem has beenresolved in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a licensing configuration issue that does not affect test execution or correctness. The wrong license edition might be checked out, but this would be obvious to the user.","No Risk"
"k a","File with ""<span>"" displayed incorrectly","99812","Previously, files or reports could appear blank when displayed in the VectorCAST GUI if the file'sfirst line contained text (such as ""#include <span>"") that could be misinterpreted as an HTMLtag. This problem is fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a cosmetic display bug in the GUI where files appear blank. The underlying data is not affected, and a user would immediately notice the blank display.","No Risk"
"k a","Cover environments marked as out-of-date when opening old versions of Project","99827","Previously, VectorCAST Project failed to update the schema for its cover environment scripts(.enc), which would cause the cover environments within the Project to be perpetually out-of-date.This issue has been fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a usability bug where environments are incorrectly marked as out-of-date. A user would notice this status and investigate. It does not affect test execution correctness.","No Risk"
"k a","Parse error: incomplete type is not allowed; detected during instantiation of classxxx<Id> [with Id=<error-constant>]","99839","Previously, VectorCAST/C++ incorrectly gave the error ""incomplete type is not allowed"" forsome code with instantiation of class xxx<Id> [with Id=<error-constant>]. This problem hasbeen resolved in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a parse error which is easily detected and would block the build.","No Risk"
"k a","Environment builder crash when processing unnamed template type parameter pack","99865","Previously, the VectorCAST/C++ environment builder crashed when processing instantiatedtemplate types with unnamed template type parameter packs while generating the test harness code. This issue has been fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a builder crash which is an obvious build blocker.","No Risk"
"k a","Crash when processing type-dependent conversion operator","99866","Previously, VectorCAST/C++ encountered internal errors when processing source code containingclass template conversion operators which were type-dependent, causing the environment builderto crash. This issue has been fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a builder crash which is an obvious build blocker.","No Risk"
"k a","Coverage Viewer erroneously shows a CBA checkbox for the True case of a False-only branch","99912","In previous versions of VectorCAST Cover, the Coverage Viewer erroneously displayed a Coverageby Analysis (CBA) checkbox for the True case of a False-only branch in an environment with theoption Source File Perspective set and instrumented with Branch coverage. Single-conditionexpressions occurring with MC/DC instrumentation are not affected. If the user provided a CBA annotation for the False-only checkbox inadvertently, the coverageMetrics would be greater than 100% for that expression. This problem has been fixed inVectorCAST version 2023 SP5. Users experiencing this problem are advised to remove existing CBAresults from the environment and re-add them to ensure data integrity.","Correction in newer version (release notes)","No Risk. CBA and SFP are not used. This bug could lead to coverage metrics exceeding 100%, which is an obvious anomaly. However, the release notes explicitly warn users to remove and re-add CBA results, indicating that incorrect CBA annotations may have been applied.","No Risk"
"k a","DATA_PKG_ADACAST.TEST_NAME should be initialized at harness startup","99923","In previous versions of VectorCAST/Ada, the test harness global variable TEST_NAME was notinitialized until the harness input files were read. In VectorCAST version 2023 SP5, the TEST_NAMEvariable is initialized to all spaces at harness startup and then initialized to the relevant test namewhen the input files are read.","Correction in newer version (release notes)","No Risk. This is a variable initialization timing issue. The variable is correctly initialized before use; it just happens at a different time. Any code that relied on TEST_NAME before the input files were read would have encountered an obvious error.","No Risk"
"k a","Diagnostic report should show edition products","99924","Previously, selecting Help > Available licenses in VectorCAST did not display the edition licenses.This problem has been resolved in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a cosmetic usability bug in a diagnostic report that does not affect test execution or correctness.","No Risk"
"k a","Instrumentation fails when the original source directory is not writeable withvcwrap workflow","99986","Previously, VectorCAST Cover would unnecessarily report an error and skip instrumentation if thesource location was not writable while using the vcwrap workflow. This problem is resolved inVectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. The error and skipped instrumentation would be an obvious blocker that prevents the workflow from proceeding. This is easily detected.","No Risk"
"k a","New macro VCAST_USE_SETUNBUF to get unbuffered coverage data output","100009","VectorCAST version 2023 SP5 provides a new macro named VCAST_USE_SETUNBUF to directVectorCAST/C++ or VectorCAST Cover to enable unbuffered coverage data output in situationswhere line-buffered output doesn't work correctly, particularly on Windows. Using one of the twoexisting macros (VCAST_USE_SETVBUF and VCAST_USE_SETLINEBUF) with the new macro, or thenew macro alone, makes it possible for coverage data to be saved even if the test harness orinstrumented application terminates abnormally.","Correction in newer version (release notes)","No Risk. This is a new feature that provides an alternative buffering mode for coverage data output. It does not fix a bug; it provides a workaround for situations where existing buffering modes don't work correctly.","No Risk"
"k a","Unsigned array struct parameter type incorrectly interpreted as ""string"" whenusing parallel processing","100033","Previously, when using parallel processing where VCAST_NUM_JOBS is set to a number greaterthan 1, VectorCAST/C++ incorrectly interpreted unsigned array types as strings when in --c11mode, causing test script import errors. This issue has been fixed in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. The incorrect type interpretation causes test script import errors, which are obvious blockers that prevent tests from being imported. This is easily detected.","No Risk"
"k a","Clicast test deletion fails to remove test from compound tests if the test is inconsecutive slots","100051","Previously, the clicast ""test delete"" command did not remove the specified testcase from compound tests if it appeared in consecutive slots. This problem has been resolved in VectorCASTversion 2023 SP5.","Correction in newer version (release notes)","No Risk. The test not being deleted from the compound test would be obvious when inspecting the compound test structure. This is easily detected.","No Risk"
"k a","""Exception raised in RECHECK_LICENSE"" error message occurs sometimes whenexiting VectorCAST","100084","Previously, VectorCAST sometimes displayed a pop-up dialog labeled ""License Verification FAILED""containing the text ""Exception raised in RECHECK_LICENSE"" after File > Exit was selected inthe VectorCAST main window. This problem has been resolved in VectorCAST version 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a cosmetic error message that appears when exiting the application. It does not affect test execution or correctness.","No Risk"
"k a","Crash instrumenting/uninstrumenting SFP unit test env while a unit is selectedin the lower left ""Source Files"" pane","100101","In previous versions of VectorCAST, the C++ GUI could crash when instrumenting a differentcoverage type while in Source File Perspective mode. This issue has been resolved in VectorCASTversion 2023 SP5.","Correction in newer version (release notes)","No Risk. This is a GUI crash which is an obvious usability bug that does not affect test correctness. The crash would be immediately detected by the user.","No Risk"
"k a","Environment build failure in C++ with subclasses with member function having same name as a union member of parent class","93313","Previously, VectorCAST/C++ generated incorrect references to fields within nested anonymous unions, causing compile errors if the field name was shadowed. This issue has been fixed inVectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build.","No Risk"
"k a","Ada test harness loses precision for very large integers in ranges or partitions","95628","In previous versions of VectorCAST/Ada, test cases using very large integer values in ranges orpartitions could lose precision during execution on targets with smaller floating point types. This problem is fixed in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk as Ada is not used. This is a critical bug if Ada is used though. The test harness could silently lose precision for very large integer values in ranges or partitions, leading to incorrect test execution. A test might pass when it should fail or vice versa. This is a silent failure that is extremely dangerous for safety-critical systems, especially when testing boundary conditions with large integers.","No Risk"
"k a","VectorCAST overly restrictive when requiring template types to be fully defined","95807","Previously, VectorCAST/C++ considered template instantiations with incomplete argument types tobe not supported when the incomplete arguments were not referenced in the template definition.This problem has been fixed in VectorCAST version 2023 SP4 and these types are now supported inthe Parameter Tree.","Correction in newer version (release notes)","No Risk. The lack of support for certain template types in the Parameter Tree would be immediately obvious to a user attempting to use them. The user would see that the type is not available in the Parameter Tree. This is easily detected.","No Risk"
"k a","Environment build error when path to Startup File is missing path separator afterenvironment variable","96168","Previously, VectorCAST/C++ displayed an environment build error when the path separatorbetween an environment variable specification in the form $(<env var>) and the path to a StartupFile was missing. This problem has been fixed in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk. This is a build error which is easily detected and would block environment creation. The error message would clearly indicate the issue with the path.","No Risk"
"k a","Wizard incorrectly drops unit user code when directory list changes","98081","In previous versions of VectorCAST/C++, unit user code would be dropped from the new environment wizard when the source directory list changed. This problem is fixed in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI wizard. The loss of user code would be immediately visible to the developer when they review the wizard configuration before completing the environment creation. The issue is easily detected and corrected before any test execution occurs.","No Risk"
"k a","Crash when closing Manage Status monitor widget while rebuilding environment","98780","Previously, closing an undocked Manage Status window while rebuilding an environment in a VectorCAST Project resulted in a crash. This problem has been resolved in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk. This is a GUI crash that is an obvious and easily detected usability bug. It does not affect test execution or results, and users would simply avoid closing the window during rebuild.","No Risk"
"k a","VectorCAST Project prevents environment rename if working directory contains target name","99111","In previous versions of VectorCAST, the Environment Rename dialog would erroneously flag a valid rename request as invalid. This issue has been fixed in VectorCAST Version 2023 SP4.","Correction in newer version (release notes)","No Risk. This is a GUI usability bug that prevents a valid rename operation. The issue is immediately obvious to the user and does not affect test correctness.","No Risk"
"k a","Verify base directories before loading staged instrumentation","99149","Previously, when using the vcwrap workflow with a Cover environment, VectorCAST's main window could crash if the environment contained a Base Directory with an invalid path and the user attempted to load staged instrumentation. This problem is resolved in VectorCAST version 2023 SP4 by asking the user to fix any invalid Base Directories prior to loading staged instrumentation.","Correction in newer version (release notes)","No Risk. This is a GUI crash that is an obvious and easily detected usability bug. The fix improves error handling by prompting the user to correct the invalid path.","No Risk"
"k a","Fixes to suppress test code coverage in VectorCAST Cover","99181","Previously, code coverage was not properly collected for some templates instantiated in files that are suppressed for coverage. This problem is fixed in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","Potential Risk. This bug could lead to incorrect coverage data being collected for template instantiations in suppressed files.","Risk exists"
"k a","Various failures relating to constructor ordering","99285","Previously, when using parallel processing, VectorCAST/C++ stored subprogram data for constructors in the wrong order, causing possible test execution failures. This issue has been fixed in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","Potential Risk. This bug could cause test execution failures when using parallel processing. If the failures are obvious (e.g., crashes), the risk is low. However, if the failures are subtle (e.g., wrong constructor called but test still runs), this could be a silent failure that compromises test integrity.","Risk exists"
"k a","Incorrect error message displayed when maximum seats used for Coupling","99321","When all available Coupling licenses were in use, VectorCAST displayed the message ""VectorCAST License not Found for Coupling"", which was not accurate. Starting with VectorCAST version 2023 SP4, VectorCAST instead displays a more accurate message indicating ""Licensed number of users already reached.""","Correction in newer version (release notes)","No Risk. This is a usability bug with the licensing error message. The tool still prevents unauthorized use, just with a less helpful error message.","No Risk"
"k a","Harness compile error when overloaded subprogram renamed and parameter type was abstract without 'class","99340","Previous versions of VectorCAST/Ada would add 'class to abstract parameters when renaming overloaded subprograms, even if the renamed subprogram's parameter wasn't defined with 'class, leading to a compile error. This problem is fixed in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk. This is a compile error in the test harness which is an obvious build blocker that is easily detected.","No Risk"
"k a","Compile error in test harness when initializing a const pointer reference parameter with default value","99452","Previously, VectorCAST/C++ generated incorrect harness code for functions with const reference parameters whose default value was a const global variable. This issue has been fixed in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk. This is a compile error in the test harness which is an obvious build blocker that is easily detected.","No Risk"
"k a","Internal function name provided by DataAPI in rare circumstance","99481","In previous versions of VectorCAST Cover with the option ""Instrument template instantiations"" set to True, instrumenting a lambda function inside of generic lambda function could very rarely result in the lambda function's name containing a placeholder string in an internal file and as retrieved from the DataAPI. This problem has been fixed in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk. This is a cosmetic reporting bug where a function name is not displayed correctly. It does not affect test execution or results, and the issue is rare and easily noticed in reports.","No Risk"
"k a","Support symlinked source files for JIT on Windows","99646","Previously, when using the vcwrap workflow on Windows, allow-listed source files would not be instrumented if the base directories were configured with canonical paths and the build system used symlinks. This problem is fixed in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk. vcwrap workflow is not used.","No Risk"
"k a","Add support for C++17 std::byte","99658","VectorCAST/C++ version 2023 SP4 adds support for the C++17 std::byte datatype in the Parameter Tree, Parameter and Testcase user code, test execution, and reports.","Correction in newer version (release notes)","No Risk. This is a new feature that adds support for a C++17 datatype. It does not fix a bug that affects test correctness.","No Risk"
"k a","Deleting a test from a multi UUT environment causes other tests to disappear after reloading environment","99674","In recent versions of VectorCAST, using vcastqt to delete a test case from a multiple-UUT unit test environment could result in additional tests missing after the environment is closed and reopened. This problem is fixed in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk. Any missing tests could be easily detected by the source control system.","No Risk"
"k a","Parameter user code omitted from test harness for stubbed global array variables","99724","Previously, VectorCAST/C++ omitted parameter user code for stubbed global array variables from the test harness if they were set under the uut_prototype_stubs node in the parameter tree. This problem has been resolved in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk. This bug could cause user code to be omitted from the test harness, which is easily detected during test development.","No Risk"
"k a","Support use of INCLUDE environment variable when creating vcshell database","97101","Previously, when using VectorCAST/C++ with Microsoft Visual Studio 2019 or later to create a vcshell database with the INCLUDE environment variable set, VectorCAST was not able to correctly find Microsoft's include path from the compile command line. This problem has been fixed in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. This bug would likely lead to an obvious build failure when include paths are not found correctly.","No Risk"
"k a","VectorCAST incorrectly returns ""class is too large"" parse error","98280","VectorCAST/C++ previously returned a parse error ""class is too large"" for some code containing large classes when certain parser flags were used. This problem has been resolved in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. This is a parse error that is an obvious build blocker and is easily detected.","No Risk"
"k a","Green Hills BCI not honoring -o limitation for preprocessor","98873","VectorCAST version 2023 SP3 provides support for using the '-object_dir' argument and removes support for '-o<no space>' with Green Hills Systems compilers.","Correction in newer version (release notes)","No Risk. This is a command-line argument handling fix for a specific compiler. Incorrect handling would likely lead to an obvious build failure.","No Risk"
"k a","Compile error with anonymous template param","98937","In previous versions of VectorCAST Cover, when the Coverage option ""Instrument template instantiations"" was set to True, instrumenting source containing a class with a deleted constructor with an anonymous SFINAE template parameter could result in a syntax error in the instrumented source, causing an error when compiling the instrumented sources. This problem has been corrected in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build.","No Risk"
"k a","Execution report is sometimes incorrect when option ""Detect unused expected user code"" True","98996","Previously, VectorCAST generated different Execution reports depending on whether the test was executed with TEXT or HTML report format set, with the Execute option ""Detect unused expected user code"" (VCAST_DETECT_UNUSED_EXPECTED_UC) set to True and the source code making use of very long variable names. This problem is fixed in VectorCAST version 2023 SP3. Note that long variable names are no longer truncated in the Test Case Data report and Execution report when generated in TEXT format.","Correction in newer version (release notes)","No Risk, only impact on usability.","No Risk"
"k a","Instrumentation data is removed if a function is implemented more than once in a source file","99035","In VectorCAST version 2023 SP3, the vcwrap workflow now supports having multiple functions in the same source file with the same name and signature. This circumstance typically occurs when functions have separate implementations in different parts of a source file that are included/excluded from different executable files. As a result of this change, VectorCAST can no longer detect if a function moves in a file, or if the new instance is simply a separate implementation for carry-forward of results. Any change in a source file results in the discarding of all of that source's instrumentation data and test results.","Correction in newer version (release notes)","No Risk. vcwrap workflow is never used.","No Risk"
"k a","Crash building TDD environment for code containing dependent name references","99069","Previously, VectorCAST/C++ failed to build test-driven development environments for code that included dependent name references. This issue has been fixed in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. This is a build failure which is easily detected and would block environment creation.","No Risk"
"k a","Crash using external editor for unapplied test data script","99079","In previous versions of VectorCAST/C++ or VectorCAST/Ada, opening the Unapplied Test Data test script with an external text editor configured caused the VectorCAST main window to crash. This problem is fixed in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. This is a GUI crash which is an easily detected usability bug that does not affect test correctness.","No Risk"
"k a","Incorrect coverage when using both source file perspective and global buffer optimizations","99084","In previous versions of VectorCAST Cover and VectorCAST/C++, coverage data was incorrect in the Coverage Viewer and coverage reports when both options ""Source File Perspective"" (VCAST_COVERAGE_SOURCE_FILE_PERSPECTIVE) and ""Reduce memory overhead using global buffers"" (VCAST_GLOBAL_BUFFER_OPTIMIZATIONS) were set to True. This problem has been resolved in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. SFP option is not used.","No Risk"
"k a","Instrumentation error when using the vcwrap workflow with Visual Studio","99112","Starting with VectorCAST Cover version 2022 SP9, using VectorCAST's vcwrap workflow on Windows with Microsoft Visual Studio (MSVC) caused unintended effects on instrumented files and their resulting object files when specifying a mixture of allow-listed and deny-listed source files. Building with MSVC produces a temporary response (rsp) file that vcwrap did not expand correctly, causing some sources to remain uninstrumented. This problem has been fixed in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. This is MS Visual Studio IDE related issue which is not used for test development.","No Risk"
"k a","Support Source File Perspective in Code Coverage Summary in VectorCAST Project","99122","Previously, the Code Coverage Summary table did not correctly display coverage metrics when the Project had the coverage option ""Source File Perspective"" (SFP) set to True at the Project level. This problem has been fixed in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk - SFP option is not used.","No Risk"
"k a","VectorCAST Project shows tic files in SFP mode","99231","Previously, multiple environments with coverage for the same file within a VectorCAST Project with SFP enabled could result in coverage results that failed to merge correctly. This error caused tic files to be generated unnecessarily. This problem has been resolved in VectorCAST version 2023 SP3. Coverage paths from multiple environments on Windows will now combine in a case-insensitive manner.","Correction in newer version (release notes)","No Risk - SFP option is not used.","No Risk"
"k a","Parse error in code composer mode with __far entity bound to non-__far reference","99245","In previous versions of VectorCAST/C++, a parse error could occur with Code Composer code which bound a __far-qualified entity to a non-__far-qualified reference. This problem is fixed in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. This is a parse error which is easily detected and would block the build.","No Risk"
"k a","Test Case Management Report incorrectly includes all UUTs' results in Overall Results","99309","Previously, when generating the Test Case Management report in a multi-unit C++ or Ada unit test environment, the Overall Results section included data from all units' test cases, even if fewer than all units were selected for inclusion in the report. This problem has been corrected in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk - more results than required are included.","No Risk"
"k a","Test case disappears from Test Case Tree in some circumstances","99332","Previously, after editing a failed test case in VectorCAST's Parameter Tree and saving it, sometimes the test case would disappear from the Test Case Tree due to using an invalid test case record ID. This problem has been resolved in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk - this is easily detected as the test case is being under development.","No Risk"
"k a","Parser error for clang: placement ""new"" expression refers to non-placement function ""operator delete(void*, size_t)""","99360","Previously, VectorCAST/C++ and VectorCAST Cover incorrectly gave the parse error 'placement ""new"" expression refers to non-placement function' for some clang code overloading operator new. This problem has been resolved in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. This is a parse error which is easily detected and would block the build.","No Risk"
"k a","Using vcwrap workflow in symlinked directory can leave stale coverage data for incremental rebuilds","99373","Previously, when using the vcwrap workflow in a symlinked working directory on Linux, VectorCAST Cover could incorrectly retain stale instrumentation data after an incremental rebuild, causing coverage reports to contain incorrect information. This problem has been resolved in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. vcwrap workflow is never used.","No Risk"
"k a","Instrumenter fails to apply probe point within lambda with ""auto"" pack parameter","99391","Previously, VectorCAST would fail to compile a probe point within a lambda function with an auto pack parameter (i.e. ""auto ...""), with an error that VectorCAST ""Failed to instrument coverage."" This has been fixed in VectorCAST version 2023 SP3, and these probe points compile successfully.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build.","No Risk"
"k a","Incorrect settings for --cpu and --fpu flags for IAR 9.x compiler templates","99413","Previously, in VectorCAST RSP, the compiler templates for IAR 9.x Cortext-M7 and Cortex-M7f compiler templates incorrectly reversed the values for the '--fpu' flag. Additionally, the Linker Options command was incorrect for all IAR 9.x compiler templates. These problems have been resolved in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","Potential Risk. Incorrect compiler flags could cause the test harness to be compiled with different floating-point settings than the production code, leading to a harness that behaves differently. This is a silent failure that could compromise test integrity.","Risk exists"
"k a","vcwrap fails when executed in the Linux virtual file system symlink /proc/self/cwd","99420","Previously, when using the vcwrap workflow from the Linux virtual file system directory /proc/self/cwd, VectorCAST Cover could not locate the source files prior to compilation. This problem has been fixed in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. This bug would cause an obvious build failure easily detected by a developer.","No Risk"
"k a","Data API error trying to display execution report","99422","Previously, corrupt test data or an incomplete test execution could cause the report generator to crash while generating the Test Execution Report. This problem is resolved in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. This is a crash which is an easily detected usability bug that does not affect test correctness when the test data is valid.","No Risk"
"k a","With vcwrap workflow, instrumentation hangs if commands read from stdin","99465","Previously, when using the vcwrap workflow, instrumentation could hang if any of the intercepted commands read input from stdin. This problem has been fixed in VectorCAST version 2023 SP3.","Correction in newer version (release notes)","No Risk. This is a performance issue (a hang) that is an obvious blocker and easily detected.","No Risk"
"k a","Harness compile error when function under test has un-copyable parameter type","93404","Previously, VectorCAST/C++ incorrectly considered arrays of non-copyable class objects to be copyable, causing compile errors in the test harness. This issue has been fixed in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build.","No Risk"
"k a","Environment builder crash when decltype references template-dependent parameter","93422","In previous versions of VectorCAST/C++, the environment builder could crash when processing type names that were decltype of an expression that referenced a template-dependent parameter. This problem is fixed in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This is a builder crash which is easily detected and would block environment creation.","No Risk"
"k a","Support __const keyword when parsing for Metaware","94044","Previously, VectorCAST RSP failed to parse source code containing the '__const' keyword when using a Metaware compiler template, leading to parser errors during environment build. This problem has been fixed in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error which is easily detected and would block the build.","No Risk"
"k a","Harness compile error when testable function requires deleted constructor","94094","Previously, VectorCAST/C++ attempted to copy the return value of functions returning a type lacking a callable copy assignment and a callable move assignment, causing a compile error in the test harness. Starting with VectorCAST version 2023 SP2, the test harness no longer attempts to capture the return value.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected. The fix changes the behavior so the return value is not captured, which is a reasonable workaround.","No Risk"
"k a","Parse error with Keil code that allows multiple initializations of global variables","94236","Previously, VectorCAST/C++ failed to parse Keil code containing multiple initializations of Special Function Register (SFR) variables. This issue has been fixed in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This is a parse error which is easily detected and would block the build.","No Risk"
"k a","Importing a test script with TEST.ATTRIBUTES having incorrect parameter name causes functions to be stubbed","94282","Previously, VectorCAST incorrectly stubbed functions when a test script was imported containing a TEST.ATTRIBUTES line with a non-existent parameter name. Also, if the parameter name was correct, but the unit name was incorrect, the exported test script retained the bad unit name. These problems have been resolved in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","Risk Exists. Incorrectly stubbing functions is a silent failure that changes test behavior. A test might pass when it should have failed (or vice versa) due to the wrong function being stubbed. This compromises test integrity.","Risk exists"
"k a","Closing a large Cover environment in a VectorCAST Project is slow when SFP is set","95180","Previously, VectorCAST Project displayed poor performance when closing very large Cover environments when the Coverage option ""Source File Perspective"" (SFP) was set in the Project. This problem has been improved in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This is a performance issue that does not affect test correctness.","No Risk"
"k a","Import error for multi-dimensional array item incorrectly reported as ""missing range data""","95818","Previously, VectorCAST/C++ incorrectly gave the error ""VectorCAST is importing a test script that requires range data to be available"" when range data was available but a test script line for a multi-dimensional dimensional array was missing an index. This problem has been resolved in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This bug gives an incorrect error message for a malformed test script. The import fails either way, making it easily detected.","No Risk"
"k a","Call to testable function causes compile error when nested call returns incompletetype","97553","Previously, VectorCAST/C++ failed to build an environment containing a member function templateinstantiation which called an undefined member function returning an incomplete type, along withother slight variations of this scenario. These functions were erroneously being treated as testable,leading to compile errors in the test harness. This issue has been resolved in VectorCAST Version2023 SP2.","Correction in newer version (release notes)","No Risk. This bug causes a compile error in the test harness which is an easily detected build blocker.","No Risk"
"k a","Parse errors for ARM Neon intrinsic functions","98716","The ARM Neon intrinsic functions: __builtin_aarch64_get_lowv8hf, __builtin_aarch64_get_lowv4sf, __builtin_aarch64_get_lowv2df, __builtin_aarch64_get_lowv8hi, __builtin_aarch64_get_lowv16qi, __builtin_aarch64_get_highv4si, __builtin_aarch64_get_highv8hf, __builtin_aarch64_get_highv4sf, __builtin_aarch64_get_highv2df, and__builtin_aarch64_get_highv16qi were omitted in the default preprocess preinclude file in$VECTORCAST_DIR/DATA/gnu_target/arm_neon_preinclude.h, causing parse errors when they were encountered. This problem has been resolved in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This bug causes parse errors which are easily detected build blockers.","No Risk"
"k a","Compile error on source with template template parameters","98902","In previous versions of VectorCAST Cover, when the Coverage option ""Instrument templateinstantiations"" was set to True, instrumenting source with a template function which takes atemplate type parameter would result in invalid syntax in the instrumented source, causing acompile error when compiling the instrumented sources. This problem has been fixed in VectorCASTversion 2023 SP2.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Instrumentation error on source with generic lambdas","98949","In previous versions of VectorCAST/C++ and VectorCAST Cover, an instrumentation failureoccurred on source code containing a generic lambda whose last parameter is not generic and withcoverage option ""Instrument template instantiations"" set to True. This problem has been fixed inVectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This is an instrumentation failure which is an obvious build blocker.","No Risk"
"k a","'Insert MC/DC Test Cases' is disabled when SFP is set","98962","Previously, VectorCAST/C++ incorrectly dimmed the menu item used to insert MC/DC Test Caseswhen the Coverage option Source File Perspective (SFP) was set and the unit test environment wasinstrumented for MC/DC coverage or Statement+MC/DC coverage. VectorCAST version 2023 SP2correctly enables this menu item.","Correction in newer version (release notes)","No Risk. This is a usability bug in the GUI where a menu item is incorrectly disabled.","No Risk"
"k a","Missing coverage on function pointer calls when using the Coverage configuration option ""Instrument for function call coverage""","98963","Previously, VectorCAST/C++ and VectorCAST Cover environments were missing Function Call coverage on function pointer calls and member function calls when the Coverage configuration option VCAST_ENABLE_FUNCTION_CALL_COVERAGE was set to True. However, the coverage was correct when the environment was instrumented for Function + Function Call coverage. Beginning with VectorCAST version 2023 SP2, instrumenting either way provides the same coverage.","Correction in newer version (release notes)","No Risk. This bug leads to missing coverage for function pointer calls which is a silent failure. A developer might assume the code is covered when it is not, compromising the completeness of the coverage report and regulatory compliance.","No Risk"
"k a","TDD environment incorrectly tries to test abstract class constructor","98994","Previously, VectorCAST/C++ treated an abstract base class constructor as testable in a Test-DrivenDevelopment (TDD) environment where an agile source UUT defined a class inheriting from anabstract base class defined in a separate header file, leading to a compile error in the test harness.This issue has been resolved in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This bug causes a compile error easily detected.","No Risk"
"k a","Function is not testable when parameter is a typedef const struct pointer array","99011","Previously, VectorCAST/C++ incorrectly considered functions with typedef const struct arrayparameters to be untestable. This has been fixed in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. If a function is marked as untestable when it should be testable this would be easily detected and the function could be tested using another approach.","No Risk"
"k a","Link error with static template functions used in multiple units","99014","Previously, VectorCAST/C++ generated duplicate Stub-by-Function (SBF) template code for staticfunction template instantiations that were referenced in multiple units, leading to link errors in the test harness. This problem has been fixed in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This is a linker error easily detected.","No Risk"
"k a","Error generating Aggregate Coverage report in VectorCAST Project with SFP set","99027","In previous versions of VectorCAST Project, an error occurred when creating an AggregateCoverage report with the option ""Source File Perspective"" (SFP) set to True on a source fileinstrumented differently across environments for some coverage combinations. This issue has beenresolved in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This bug causes an obvious report generation error easily detected by a developer.","No Risk"
"k a","Parser stack overflow with some template-heavy translation units","99046","Previous versions of VectorCAST/C++ could fail to parse some translation units with heavy usage oftemplates, resulting in a stack overflow of the parser subprocess. This problem is fixed inVectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This is a parser crash which is an obvious build blocker.","No Risk"
"k a","Compile error when instrumenting for S+M+FC","99050","In previous versions of VectorCAST, instrumenting a constexpr C++ function call which returned areference with Statement+MC/DC+Function Call coverage resulted in syntax errors in theinstrumented source file, causing compile errors in the C++ unit test harness or instrumentedexecutable. This problem has been fixed in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Movable class with member template treated as non-capturable return type in test harness","99068","Starting with VectorCAST version 2022 SP6, VectorCAST/C++ incorrectly determined that certain template instantiations would form a void reference, and as a result, VectorCAST failed to generate correct type handling code for these instantiations in the test harness, causing test execution failures. This issue has been fixed in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk - the execution failure is easily recognized and consequent actions could be taken into account.","No Risk"
"k a","Missing test script import error when TEST.VALUE or TEST.EXPECTED line is missing "":<value>"" at end","99162","Previously, VectorCAST/C++ and VectorCAST/Ada did not report an error when importing a test script containing a TEST.VALUE or TEST.EXPECTED line missing the "":<value>"" portion at the end. With VectorCAST version 2023 SP2, an error is reported.","Correction in newer version (release notes)","Risk Exists. This is a critical bug. The tool silently accepted malformed test scripts without reporting errors, potentially leading to tests running with missing or incorrect expected values. This is a silent failure that could cause false positives or negatives in test results.","Risk exists"
"k a","Coverage on #included files missing when using vcwrap workflow","99251","Previously, when using the vcwrap workflow, source files #included by units in the Cover environment did not have instrumentation unless they were explicitly instrumented. This problem has been fixed in VectorCAST version 2023 SP2.","Correction in newer version (release notes)","No Risk. Missing coverage for included files - this is easily detectable false positive.","No Risk"
"k a","MC/DC coverage incorrect on source code with lambda when MC/DC optimization is off","92223","Previously, VectorCAST/C++ and VectorCAST Cover displayed incorrect coverage results for source code with lambda functions inside other functions when Statement+MC/DC or MC/DC coverage was used and the configuration option VCAST_USE_OPTIMIZED_MCDC_INSTRUMENTATION was set to False. This problem has been resolved in VectorCAST version 2023 SP1.","Correction in newer version (release notes)","Risk Exists. Incorrect MC/DC coverage results is a critical silent failure. The tool would misreport coverage metrics, potentially showing code as covered when it's not (or vice versa). This directly compromises safety-critical testing requirements.","Risk exists"
"k a","Test case import does not report an error when a non-user code value is given for an array containing an unsupported type","96911","Previously, VectorCAST/C++ did not report an error when importing a test script that set a non-user code value for an array containing an unsupported type. This problem has been resolved in VectorCAST version 2023 SP1. You must rebuild any existing environment for the change to take effect.","Correction in newer version (release notes)","Potential Risk. The tool silently accepted invalid test data for unsupported array types, which could lead to undefined behavior during test execution or incorrect test results.","Risk exists"
"k a","Unsupported array type incorrectly stored as an unconstrained array using parallel processing","98687","Previously, when using parallel processing, VectorCAST/C++ incorrectly generated range data for unsupported constrained array types, causing such types to be treated as unconstrained arrays. This problem has been fixed in VectorCAST version 2023 SP1.","Correction in newer version (release notes)","Potential Risk. Treating constrained arrays as unconstrained could lead to out-of-bounds access during testing or incorrect test behavior that might not be immediately obvious.","Risk exists"
"k a","Coverage does not merge properly when used on more than one line vs one line","98866","Previously, when using the vcwrap workflow to create two executables whose MC/DC or branch coverage results would be applied to a source file having a single constant expression on the same line as the function definition and the other source file having a typical expression, the coverage results did not merge together properly. This problem has been corrected in VectorCAST version 2022 SP11 and VectorCAST version 2023 SP1.","Correction in newer version (release notes)","No Risk - coverage information might miss which is easily detected false positive.","No Risk"
"k a","Coverable items from different translation units do not merge correctly in certain situations","98939","Previously, when blending coverage data from two different translation units for a coverable item, in rare circumstances, coverage that should have merged did not merge as expected. This problem has been corrected in VectorCAST version 2022 SP11 and VectorCAST version 2023 SP1.","Correction in newer version (release notes)","No Risk - in rare circumstances, coverage information might miss which is easily detected false positive.","No Risk"
"k a","Include template parameters on export with VCAST_SCRIPT_ALWAYS_USES_PARAMS","96976","Previously, VectorCAST/C++ left out template parameters that were only specialized once when the configuration option ""Test scripts always use function parameters"" (VCAST_SCRIPT_ALWAYS_USES_PARAMS) was set to True. This problem has been fixed in VectorCAST version 2023.","Correction in newer version (release notes)","No Risk. It concerns only test script exports.","No Risk"
"k a","Standard execution results report includes 'Compound Only' test cases","97647","Previously, VectorCAST incorrectly included compound-only test case results in the Execution Results report. This problem has been resolved in VectorCAST version 2023.","Correction in newer version (release notes)","No Risk - this is easily detected.","No Risk"
"k a","Ada stubs cannot raise some custom exception types with multi-unit whitebox enabled","53749","In previous versions of VectorCAST/Ada with multi-unit whitebox enabled, stubs could not raise an exception of a type defined in the UUT calling that stub. This problem is fixed in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk. This limitation would be detected during test development when attempting to configure exception raising in stubs, leading to compilation or execution errors.","No Risk"
"k a","Execution order of Test Case and Parameter User Code is inconsistent","94903","In previous versions of VectorCAST/C++, the order of execution of test-specific user code could vary depending on whether the user code was inserted for a single test versus inserted for all tests at once. In VectorCAST version 2023 SP5, the execution order matches in both scenarios.","Correction in newer version (release notes)","Risk Exists. Inconsistent execution order of user code is a critical bug that could lead to different test behavior depending on how the code was inserted. Tests might pass in one scenario but fail in another, or produce different results silently. This compromises test reproducibility and reliability.","Risk exists"
"k a","Support coverage on header files included with relative paths when using vcwrap workflow","98826","Previously, when using the vcwrap workflow with a Cover environment and the VectorCAST coverage option ""VCAST_COVERAGE_FOR_HEADERS"" set to True, if the compile command used relative search paths to include the directories containing the header files, the header files would not be instrumented for coverage. This problem has been fixed in VectorCAST version 2023 SP4.","Correction in newer version (release notes)","No Risk - this is easily notified during test development. Also, vcwrap workflow is not used.","No Risk"
"k a","Parse error with type of expression comparing vector types","98489","Previously, VectorCAST/C++ incorrectly returned the parse error ""return value type does not match the function type"" for some C source code containing comparisons of vector types. This problem has been resolved in VectorCAST version 2022 SP11.","Correction in newer version (release notes)","No Risk. This is a parse error that is easily detected during build time and prevents environment creation.","No Risk"
"k a","Compile error for overloaded operator functions and user-defined literal functions","98588","Previously, VectorCAST/C++ generated #undef statements for overloaded operator functions and user-defined literal functions with incorrect syntax in the test harness, causing a compilation error with some compilers. This problem has been resolved in VectorCAST version 2022 SP11.","Correction in newer version (release notes)","No Risk. This is a compile error that is easily detected and prevents test harness compilation.","No Risk"
"k a","VectorCAST executables fail to start on some Windows machines","98764","In versions of VectorCAST since 2022 SP6, some or all VectorCAST executables would fail to start on some Windows machines due to an error in an included DLL. This problem is fixed in VectorCAST version 2022 SP11.","Correction in newer version (release notes)","No Risk. This is a startup failure that is immediately obvious to users and prevents tool usage entirely.","No Risk"
"k a","VectorCAST doesn't parse named anonymous structures in mingw mode","89417","Previously, VectorCAST incorrectly returned the error ""struct... has no field"" for anonymous structs nested in other structs when parsing MinGW code. This problem has been resolved in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This is a parse error that is easily detected during environment build and prevents compilation.","No Risk"
"k a","Test settings dialog cannot compile file in path with a space","97930","In previous versions of VectorCAST/C++, the Test Settings dialog failed to compile files whose directory path contained a space. In addition, the test compile performed automatically after preprocess or parse errors during environment build also failed to quote the file being test compiled. These problems are fixed in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during environment build. The developer would immediately see the error message and can work around it by using paths without spaces.","No Risk"
"k a","Compile error on instrumented file when instrumenting structured binding for function call coverage","97974","In previous versions of VectorCAST, instrumenting a C++17 source file with a structured binding to a container class when Function Call coverage was enabled in the environment resulted in syntax errors in the instrumented source file, causing compile errors in the test harness or instrumented executable. This problem has been fixed in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build. The syntax errors would prevent the test harness from compiling, making this an obvious blocker.","No Risk"
"k a","Automatic Parser Configuration dialog does not expand environment variables","98059","In previous versions of VectorCAST/C++, the Automatic Parser Configuration dialog did not expand environment variables used in compile or preprocess commands, leading to errors when attempting to detect language settings. The Automatic Parser Configuration dialog is accessed by clicking the ""Generate Flags..."" button located on the Options dialog, C/C++ tab, Language sub-tab. This problem is fixed in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This is a configuration error which is easily detected when attempting to generate parser flags. The error would be immediately visible to the developer.","No Risk"
"k a","VCProjectApi exception occurs when cover.db is missing and SFP is enabled","98173","Previously, VectorCAST Projects returned a python traceback error when trying to instantiate a vector.apps.DataAPI.vcproject_api.VCProjectApi when the VCAST_COVERAGE_SOURCE_FILE_PERSPECTIVE option was set to true. This issue has been resolved in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This is a Python traceback error which is easily detected when using the API. The error is obvious and would prevent the API call from succeeding.","No Risk"
"k a","Unit test environment corruption when environment open and tooltip displayed for a monitored unit test environment","98393","Previously, VectorCAST Project could corrupt the information in an open unit test environment if the tooltip for a separate monitored unit test environment was displayed. The corruption could cause problems such as having the subprograms not show up in the test case tree the next time the environment was opened. This problem has been resolved in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","Potential Risk. This bug could silently corrupt the test environment data structure. While the missing subprograms would be noticed when reopening the environment, the corruption happens silently and could potentially affect test execution or results before being detected.","Risk exists"
"k a","Environment build error when source code contains a typedefed anonymous enum","98536","In previous versions of VectorCAST/C++, an anonymous enum declaration in C files could cause the unit test environment builder to insert an invalid #undef statement in the generated harness, leading to a compile error. This problem is fixed in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during harness compilation. The invalid #undef statement would cause an obvious build failure.","No Risk"
"k a","Crash when removing files from Coverage environment","98551","Previous versions of VectorCAST Cover could crash when a source file was removed from the environment in certain circumstances. This problem has been fixed in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This is a crash which is easily detected by the developer. The crash would be obvious and would not result in any silent failures or incorrect test results.","No Risk"
"k a","Environment builder crash when using parallel processing","98648","Previously, when using parallel processing, VectorCAST/C++ would occasionally crash when building an environment whose source code contained self-referencing types. This issue has been fixed in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This is a crash during environment build which is easily detected. The crash would prevent the environment from being built successfully.","No Risk"
"k a","Compilation error in member initializer with ""Instrument template instantiations"" set","98649","In previous versions of VectorCAST, instrumenting source code with a function call or lambda in a member initializer list of a template constructor would write a ""using"" type defined in the body of the constructor when the option ""Instrument template instantiations"" was set to True, causing compilation errors in the instrumented file. This problem has been fixed in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This is a compilation error which is easily detected during build. The compilation errors would prevent the instrumented code from compiling successfully.","No Risk"
"k a","Error instrumenting Template Instantiation Coverage for a namespace scoped non-template function which contains a generic lambda","98673","In previous versions of VectorCAST, instrumenting a namespace scoped non-template function which contains a generic lambda with Template Instantiation Coverage is enabled resulted in a syntax error in the instrumented file. This has been corrected in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This bug causes a syntax error in the instrumented file which would be immediately detected during compilation. It prevents the build from completing rather than producing incorrect test results.","No Risk"
"k a","Compilation error with auto reference parameters with ""Instrument template instantiations"" set","98746","In previous versions of VectorCAST, instrumenting source code with generic lambdas with auto reference parameters would result in instrumentation errors when the option ""Instrument template instantiations"" was set to True, causing compilation errors in the instrumented file. This problem has been fixed in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This bug causes compilation errors that are immediately detected and prevent the build from completing. It does not silently affect test integrity.","No Risk"
"k a","Compilation error when member function definition outside of template class with ""Instrument template instantiations"" set","98747","In previous versions of VectorCAST, instrumenting source code containing a member function definition outside of that function's template class definition would result in instrumentation errors when the option ""Instrument template instantiations"" was set to True, causing compilation errors in the instrumented file. This problem has been fixed in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This causes compilation errors that are immediately detected during build. The issue is obvious and prevents completion rather than causing silent failures.","No Risk"
"k a","Compilation error with variadic non-type parameters with ""Instrument template instantiations"" set","98756","In previous versions of VectorCAST, instrumenting source code with a template function taking variadic non-type parameters would result in instrumentation errors when the option ""Instrument template instantiations"" was set to True, causing compilation errors in the instrumented file. This problem has been fixed in VectorCAST version 2022 SP10.","Correction in newer version (release notes)","No Risk. This results in compilation errors that are immediately detected and block the build process. It does not produce incorrect test results.","No Risk"
"k a","TEST.REPLACE fails to delete compound results correctly if replaced slot is other than first","91166","In previous versions of VectorCAST/C++ and VectorCAST/Ada, when importing a test script that replaces an existing test, VectorCAST did not correctly delete the execution data for compound tests containing the replaced test if the test was in a slot other than the first slot. Starting with VectorCAST version 2022 SP9, test results are correctly removed for any compound that uses the test, regardless of the slot.","Correction in newer version (release notes)","No Risk. Compound tests are not used.","No Risk"
"k a","Tasking TriCore keywords __indirect, __trap, and __trap_fast not recognized","91729","Previously, VectorCAST/C++ gave errors when parsing Tasking TriCode code containing the keywords __indirect, __trap, and __trap_fast. This problem has been resolved in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a parsing error that would be immediately detected during environment build. It prevents completion rather than producing incorrect results.","No Risk"
"k a","Volatile qualifier for stub return is dropped for C environments","92995","Previously, when using C99 with the Tasking compiler, VectorCAST/C++ incorrectly elided the ""volatile"" qualifier when generating stubs with a volatile return type, causing compile errors in the test harness. This problem has been fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. While dropping volatile qualifiers could theoretically affect behavior, this bug causes compile errors that are immediately detected, preventing any runtime issues.","No Risk"
"k a","Environment builder incorrectly stubs function that is alias of existing definition","93210","Previously, VectorCAST/C++ attempted to stub functions that were declared with the GNU 'alias' attribute, causing compile errors in the test harness if the aliased symbol was already defined. This issue has been fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This causes compile errors in the test harness that are immediately detected during build. It does not produce incorrect test results.","No Risk"
"k a","Binary literals with Diab v5.9.7.0 cause parsing errors","93488","Previously, VectorCAST failed to parse source code containing binary literals when in Diab compiler mode. This problem has been fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a parsing error that prevents environment creation. It is immediately detected and does not affect test integrity.","No Risk"
"k a","Test harness should not call implicitly deleted union constructor","93889","Previously, VectorCAST/C++ called implicitly deleted union constructors in the test harness, causing a compile error. This problem has been resolved in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would prevent the build from completing. The developer would be immediately aware of the issue.","No Risk"
"k a","Unable to use ""execute run"" in commands file after the first command","93932","In previous versions of VectorCAST, the ""clicast tools execute_commands"" command could fail if the given commands file specified a command (such as ""execute run"") that used a -u argument and that command was not the first command in the file. This problem has been resolved in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a command execution failure that would be immediately obvious to the user running the commands.","No Risk"
"k a","Parse error in user globals user code should abort environment build","94104","Previously, VectorCAST/C++ failed to terminate an environment build when encountering a parse error in User Globals. This problem is resolved in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. The fix ensures that parse errors properly abort the build, making errors more visible rather than less visible.","No Risk"
"k a","Parse error for case statement with implicit use of 'this' pointer to access static const member","95497","Previously, VectorCAST/C++ incorrectly returned the error ""this"" cannot be used in a constant expression for some uses of the this pointer to access a static const member. This problem has been resolved in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a parse error that would prevent environment build and is easily detected.","No Risk"
"k a","Ada harness compile error for some string access types","96912","Previous versions of VectorCAST/Ada could generate faulty test harness code for an access to a string type, primarily seen with types in the xmlada library. This problem is fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a compile error that would be easily detected and prevent the build from completing.","No Risk"
"k a","Incorrect coverage for lambdas in template functions with ""Instrument template instantiations"" set","97068","In previous versions of VectorCAST, generic lambdas and lambdas within template functions did not differentiate between different instantiations in coverage reports when the Coverage option ""Instrument template instantiations"" was enabled. To prevent incorrect coverage reporting with the ""Instrument template instantiations"" option enabled, instrumentation of lambdas in template functions was disabled in VectorCAST version 2022 SP5, but this functionality is supported starting in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","Risk Exists. This bug could lead to incorrect coverage metrics for template instantiations with lambdas. The impact depends on whether such constructs are used in the medical device code.","Risk exists"
"k a","Aggregate Coverage Report in SFP shows uncovered pairs in header file even though covered","97506","Previously, the MC/DC Condition Tables in the Aggregate Coverage Report displayed covered pairs as uncovered while in ""Source File Perspective"" (SFP) mode. This problem has been fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk - SFP mode is not used.","No Risk"
"k a","Setting User Params User Code in GUI deletes base directory information from environment","97719","Previously, saving User Params User Code in the VectorCAST/C++ Parameter Tree deleted base directory information from the environment, causing any regression scripts subsequently created to omit the setting of the base directory environment variables. This problem has been fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a usability bug. The issue causes missing configuration in regression scripts which would result in an obvious build failure when the script is executed.","No Risk"
"k a","Crash when deleting imported coverage results","97727","Previously, VectorCAST/C++ crashed when the user deleted Imported Coverage Results in a unit test environment with a search directory that involved a symlink. This problem has been resolved in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a GUI crash which is an easily detected usability bug that does not affect test correctness.","No Risk"
"k a","Computing dependencies on a unit that does not compile shows wrong error message","97746","In previous versions of VectorCAST/C++, clicking ""Show Dependency View"" in the C++ unit test environment wizard would show an incorrect error message for units that failed to compile. In addition, attempting to repeat the action would cause VectorCAST to stop responding. These problems are fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a usability bug. A misleading error message for a unit that fails to compile is still an obvious build blocker.","No Risk"
"k a","Compile error on instrumented file with lambda function defined in constructor initialization section","97920","In previous versions of VectorCAST, instrumenting MC/DC on source code with lambdas within member initializers would sometimes cause the instrumented file to have a syntax error, resulting in compile errors in the instrumented test harness or the instrumented executable. This issue has been fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Generated call to inherited default constructor that is deleted","97928","Previously, when a unit used a class that inherited a deleted default constructor, VectorCAST/C++ would incorrectly generate harness code that would not compile. This problem has been fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Fail to rebuild environment after making changes in options dialog to Current Environment Directories option","98095","Previously, using VectorCAST/C++ and going to Tools -> Options, C/C++ tab, Current Environment Directories, editing the directories and selecting Apply or OK deleted base directory information from the environment, causing an environment rebuild to fail if the current environment directories contained any base directories. Also, if a directory was added, and the environment was closed and reopened, the directory no longer appeared in the Current Environment Directories list. These problems have been resolved in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This bug causes an obvious environment rebuild failure easily detected by a developer.","No Risk"
"k a","Generic template stub generates ambiguous call","98131","Previously, when stubbing a function template that shadowed another function template at a different scope, VectorCAST/C++ generated an ambiguous call to the underlying function in the stub, causing compile errors in the test harness. This problem has been fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build.","No Risk"
"k a","Deleted inherited constructor used in concrete class generation","98177","Previously, VectorCAST/C++ incorrectly generated concrete classes with inherited constructors that were deleted in the base class, causing compile errors in the test harness. This problem has been fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected and would block the build.","No Risk"
"k a","vcast::move is not defined for stubs in non-stubbed units","98224","Previously, when generating stub code in stubbed and not-stubbed units requiring move semantics, VectorCAST generated code that did not compile. This issue has been fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This bug causes a compile error which is easily detected and would block the build.","No Risk"
"k a","MC/DC Table Report in SFP showing pair was satisfied by analysis instead of by execution","98285","Previously, the MC/DC Equivalence Tables report generated in C/C++ Coverage environment in Source File Perspective (SFP) incorrectly stated that a pair was covered by analysis (CBA) when in fact test execution results covered the pair with CBA also contributing. VectorCAST version 2022 SP9 corrects this problem.","Correction in newer version (release notes)","No Risk - SFP and CBA options are not used.","No Risk"
"k a","Test script import errors when using parallel processing","98340","Previously, when using parallel processing, VectorCAST/C++ did not permit the user to correctly test const reference parameters even though the configuration ""Ignore type qualifiers for testable objects"" (VCAST_TI_IGNORE_QUALIFIERS) was set to True, causing test script import errors. This issue has been fixed in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk. This bug causes a test script import error which is an easily detected blocker.","No Risk"
"k a","MC/DC Equivalence Tables sometimes missing row pair information in SFP","98352","Previously, VectorCAST Cover generated the MC/DC Equivalence Tables in the Aggregate Coverage report with some missing information about row pairs when in Source File Perspective (SFP). This problem has been corrected in VectorCAST version 2022 SP9.","Correction in newer version (release notes)","No Risk - SFP is not used.","No Risk"
"k a","#undef every identifier used in generated harness code (TIs, driver, data_if ...)","23950","Previously, VectorCAST/C++ test harness code caused compile errors when identifiers such as testable function and class names were used in macros in the source code. This problem has been resolved in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build.","No Risk"
"k a","Parse error when passing Diab '__ev64_s32__' type to function taking an '__ev64_opaque__' pointer","85269","Previously, VectorCAST/RSP incorrectly gave the error ""__ev64_s32__ is incompatible with parameter of type __ev64_opaque__ *"" for Diab code where '__ev64_s32__' was passed to a function taking an '__ev64_opaque__' pointer. This problem has been resolved in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","No Risk. This is a parse error easily detected.","No Risk"
"k a","Properly handle private constant pointers in Ada unit test environments","92496","Previous versions of VectorCAST/Ada would generate invalid harness code for private constant pointers. This was most commonly seen with the xmlada library. This problem is fixed in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","No Risk. This bug causes invalid harness code which would result in a compile error easily detected and would block the build.","No Risk"
"k a","Stub fails to handle parameters of type pointer to member function","95308","Previously, VectorCAST/C++ did not properly generate stubs where a parameter type was a pointer to member function. The incorrect stub would fail to handle test-specified inputs or expected values for that parameter. This problem has been fixed in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","Potential Risk. This bug could lead to incorrect stub behavior. A test might not properly exercise the function being tested if the stub does not handle the parameter correctly. This is a subtle failure that could compromise test integrity. A problem solving process has been initiated to investigate the impact of these problems/bugs on medical devices already developed with the software tool.","Risk exists"
"k a","Compile error in generic stub with parameter pack template argument","96622","Previously, VectorCAST/C++ generated incorrect SBF code for overloaded template functions with parameter pack template parameters, causing compile errors due to incorrect argument deduction. This issue has been fixed in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected and would block the build.","No Risk"
"k a","Constructor initialization not complete for arrays, enums, and bools when using C++ 98/03","96859","Previously, when an environment's compiler was configured for C++98, VectorCAST/C++ could not correctly stub constructors of classes that contained fields of other classes, that in turn contained const arrays, const bools, or const enums and did not have a user-defined constructor. This stubbing problem led to a compile error in the test harness, which has been fixed in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","No Risk. This bug causes a compile error which is easily detected and would block the build.","No Risk"
"k a","Harness link error when SBF for templates helper struct named differently due to differences in template body","98531","In previous versions of VectorCAST/C++ , templates instrumented for SBF stubbing could result in a link error when the template was used in multiple units and the preprocessor generated differing amounts of non-code lines in the template body. This problem is fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a linker error easily detected.","No Risk"
"k a","SBF Code inserted before label causes compilation error","99186","Previously, VectorCAST/C++ generated harness code that would not compile when labels were declared in the body of an SBF function. This has been fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build.","No Risk"
"k a","Harness compile error because stubbed variable in namespace needs global scope qualifier before type","99272","Previously, VectorCAST/C++ generated incorrect stub code for undefined externs that were declared using a namespace alias from a different scope, causing compile errors. This issue has been fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build.","No Risk"
"k a","Coverage instrumentation inserted incorrectly with __FILE__ macro used and VCAST_USE_VCPP enabled","99530","In previous versions of VectorCAST/C++, coverage instrumentation could be inserted incorrectly when the environment's source code utilized the __FILE__ macro and the Compiler option ""Use VectorCAST co-preprocessor"" (VCAST_USE_VCPP) was set to True, resulting in a compile error in the instrumented test harness. This problem is fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build.","No Risk"
"k a","Ada harness error for types of not null access xxx'class","100062","In previous versions of VectorCAST/Ada, a type that is an access to a 'class type would not be correctly handled if it was declared as ""not null"", leading to invalid code in the test harness that triggered compiler warnings or errors, or potential harness runtime errors during test execution. This problem is fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build.","No Risk"
"k a","Stub of class member in anonynous namespace incorrectly declared as static","100379","Previously, VectorCAST/C++ incorrectly declared stubbed member functions of classes defined in unnamed namespaces as static when compiling for C++11 or later, causing compile errors. This issue has been fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected and would block the build.","No Risk"
"k a","Instrumented function pointer cannot be compiled","100439","In previous versions of VectorCAST/C++ and VectorCAST Cover, instrumenting a constructor called via implicit conversion to a protected type with the ""Instrument for function call coverage"" option (VCAST_ENABLE_FUNCTION_CALL_COVERAGE) set to True would result in a syntax error in the instrumented source code or instrumented test harness. This problem has been fixed in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a syntax error in instrumented code easily detected during compilation.","No Risk"
"k a","Environment build crashes for some _Generic constructs with GNU statement expressions","100545","Previously, VectorCAST/C++ crashed when building environments for some source code containing _Generic constructs with GNU statement expressions. This problem has been resolved in VectorCAST version 2024 SP1.","Correction in newer version (release notes)","No Risk. This is a builder crash which is an obvious build blocker.","No Risk"
"k a","Environment builder crash when source file contains argument-dependent variable template instance","97408","Previously, when a C++ source file in a unit test environment contained variable template instances resulting from instantiations using a dependent argument list, VectorCAST/C++ would crash when generating harness code. This problem has been fixed in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","No Risk. This is a build crash which is an obvious blocker easily detected by a developer.","No Risk"
"k a","Fail to compile harness files with 'volatile __near' return type on Renesas","97429","Previously, when using C/C++ source code with '__far' or '__near' type qualifiers in a unit test environment with a Renesas compiler, VectorCAST/C++ would generate test harness code that contained incorrect qualifiers, causing compile errors. This problem has been fixed in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Implicitly deleted move constructor treated as testable","97496","Previously, when constructing a class required a call to a constructor with a different exception specification, VectorCAST/C++ generated harness code that attempted to construct the type using these inconsistent constructors, which led to compilation errors. This problem has been fixed in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Invalid concrete class generation when type alias is overloaded","97530","Previously, VectorCAST/C++ did not qualify template class names that were shadowed by an alias in a different scope, causing compile errors in concrete class generation during environment build. This problem has been fixed in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Pointer indirection incorrectly added for return type std::unique_ptr","97594","Previously, VectorCAST/C++ incorrectly treated std::unique_ptr and std::unique_ptr reference return types in the same environment as the same type, resulting in compile errors in the test harness during environment build. This problem has been fixed in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Function pointer candidate incorrectly considered with no file-scope prototype","97602","Previously, VectorCAST/C++ considered block-extern function declarations as valid possible candidates for function pointer type handling when no file-scope prototype was available, causing compiler errors in the test harness. This issue has been fixed in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Link error due to stubs missing for template functions when using parallel processing","97630","Previously, when using parallel processing, VectorCAST/C++ did not properly compile some stubbed-by-function (SBF) stubs for template functions into the environment, causing linker errors in the test harness. This issue has been fixed in VectorCAST version 2022 SP8.","Correction in newer version (release notes)","No Risk. This is a linker error easily detected.","No Risk"
"k a","Harness compile error in TI for std::map type where value type is an array type","96838","Previously, when std::map types with array types as the value type were used, VectorCAST/C++ generated harness code that led to compilation errors. This problem has been fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","Environment build error for UUT with C99 VLA parameter types","96933","Previously, VectorCAST/C++ incorrectly handled C99 variable length arrays (VLAs), leading to environment build errors. This problem has been fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This is a build error which is easily detected.","No Risk"
"k a","Instrumentation failed for generic lambda with an unnamed parameter when template instantiation coverage is enabled","96948","Previously, in VectorCAST versions 2022 SP4 and later, Coverage environments failed to instrument the source files for coverage if they contained generic lambda with an unnamed parameter and template instantiation coverage (clicast option VCAST_COVERAGE_FOR_TEMPLATE_INSTANTIATIONS) is enabled. This is fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This bug would prevent instrumentation which is easily detected.","No Risk"
"k a","Constructor stub generated with call to private constructor","97056","Previously, when a type required accessing a private constructor, VectorCAST/C++ generated harness code that called the private constructor, which led to compilation errors during environment build. This problem has been fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","Constructor stub generates bad member initialization","97059","Previously, VectorCAST/C++ incorrectly initialized template parameter packs in constructor template stubs, causing potential compile errors during environment build. This problem has been fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","Compile error attempting to initialize member taking a reference to an abstract class template","97079","Previously, when a type required an abstract type during initialization, VectorCAST/C++ generated test harness code that attempted to construct the abstract type, which led to compilation errors during environment build. This problem has been fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","VectorCAST attempts to initialize unique_ptr member of a forward-declared type with non-default deleter","97080","Previously, VectorCAST/C++ incorrectly generated constructor stubs for classes containing a std::unique_ptr member with a forward-declared type and a user-provided deleter, causing compile errors. This problem has been resolved in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","User code tags translated incorrectly for stub parameters when using parallel processing","97166","Previously, when using parallel processing to build an environment with multiple UUTs, VectorCAST/C++ incorrectly generated user code tags in the test harness for some parameters of stubbed units, causing user code compile errors during test execution. This issue has been fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","Compile error in test harness when stubbing class constructor templates","97212","Previously, VectorCAST/C++ incorrectly stubbed templated class constructors taking rvalue reference parameters that depended on the constructor template type parameters, causing compile errors in the test harness. This issue has been fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","Compile error in generated type handling code for std::string pointer type wrapped in std::remove_reference","97341","Previously, VectorCAST/C++ generated incorrect type handling code for std::string pointers wrapped in std::remove_reference, causing compiler errors. This issue has been fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","Invalid results or fatal error while re-instrumenting constant branch or MC/DC expression","97395","Previously, if VectorCAST/C++ instrumented a source file with a constant Branch or MC/DC expression and then instrumented the file again, but this time the expression is no longer constant (or is a different constant value), it is possible to encounter invalid results or a fatal instrumentation error. This problem is resolved in VectorCAST version 2022 SP6. Reinstrument the affected source files to apply the fix.","Correction in newer version (release notes)","Potential Risk. Re-instrumentation producing invalid results is a subtle bug that could lead to incorrect coverage reporting or metrics. This is a silent failure that could affect test documentation.","Risk exists"
"k a","Harness compile error for call to testable type conversion operator","96768","Previously, VectorCAST/C++ did not fully qualify function names while generating type conversion operators when using Microsoft Visual C++ (MSVC) compilers. This problem has been fixed in VectorCAST version 2022 SP7.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Failure to stub constructor when parameter is const& to struct with const members and no explicit constructor","96842","Previously, when configured for C++98, VectorCAST/C++ could not stub constructors of classes with members that were references to const ""plain old data"" structs containing const fields and no declared constructor, causing link errors in the test harness during environment build. This problem has been fixed in VectorCAST version 2022 SP7.","Correction in newer version (release notes)","No Risk. This is a linker error which is easily detected during build and is a classic fix-it-and-move-on issue.","No Risk"
"k a","Compile error when using both options VCAST_NO_EXIT and VCAST_MAIN_NO_ARGS","91824","Previously, VectorCAST/C++ caused a compile error in the test harness while trying to build an environment when the option VCAST_NO_EXIT was set to True, and the defined variable VCAST_MAIN_NO_ARGS was enabled. The problem has been fixed in VectorCAST version 2022 SP7.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Stub input for void *parameter does not work if pointer is const or volatile","92947","Previously, VectorCAST/C++ created stubs for functions with void *const and void *volatile parameters which did not properly copy test input values into those parameters, causing incorrect test behavior. This problem has been resolved in VectorCAST version 2022 SP7. You must rebuild any affected environments to get the new behavior.","Correction in newer version (release notes)","Risk Exists. This bug causes incorrect test behavior where stub input values are not properly set. Tests could pass or fail for incorrect reasons compromising test integrity. This is a silent failure. A problem solving process has been initiated to investigate the impact of these problems/bugs on medical devices already developed with the software tool.","Risk exists"
"k a","Compile error in test harness when options VCAST_ALT_WB_METHOD and VCAST_FORCE_NO_USERGLOBALS set","94203","In previous versions of VectorCAST/C++, C++ unit test environments with whitebox processing enabled and the options VCAST_ALT_WB_METHOD and VCAST_FORCE_NO_USERGLOBALS both True would result in a compile error during environment build, stating that the harness file S0000008_vcast.cpp was missing. This problem is fixed in VectorCAST version 2022 SP7.","Correction in newer version (release notes)","No Risk. This is a compile error easily detected.","No Risk"
"k a","Whitebox processing improperly changes 'private' to 'public' in C files within C++ environment","95407","In previous versions of VectorCAST/C++, mixed C/C++ unit test environments with whitebox processing enabled would incorrectly transform 'private' and 'protected' to 'public' in C files. This problem is fixed in VectorCAST version 2022 SP7.","Correction in newer version (release notes)","Risk Exists. This bug modifies source code interpretation which could lead to incorrect test behavior or exposure of unintended access. This is a subtle silent failure. A problem solving process has been initiated to investigate the impact of these problems/bugs on medical devices already developed with the software tool.","Risk exists"
"k a","Link error in environment where stubbed unit has protected overridden function","96350","Previously, VectorCAST/Ada displayed a link error in the test harness when building an environment with sources containing an overridden function from a protected derived class, and this function was set to be stubbed. This problem is fixed in VectorCAST version 2022 SP7.","Correction in newer version (release notes)","No Risk. This is a linker error easily detected.","No Risk"
"k a","Compile error for C++ type with implicitly deleted copy constructor due to user-declared destructor","97151","Previously, VectorCAST/C++ incorrectly treated classes with a user-declared destructor and no user-declared move constructor as implicitly moveable, causing compile errors in the test harness during environment build. This issue has been fixed in VectorCAST version 2022 SP7.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","Incorrect TI code generated for std::map with reference values","97226","Previously, VectorCAST/C++ incorrectly handled environments containing STL map types with references as values, resulting in a compile error during environment build. This issue has been fixed in VectorCAST version 2022 SP7.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","Typedef-ed nested struct with constant members does not compile","97437","Previously, in C++98/03 environments, VectorCAST did not correctly stub constructors for classes that contain typedef-ed classes with constant members, causing compile errors in the test harness. This problem has been fixed in VectorCAST version 2022 SP7.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","Treat std::array types with const elements as NOT_SUPPORTED","97490","Previously, VectorCAST/C++ generated incorrect type handling code for STL array types with const elements, resulting in a compile error during the environment build. This issue has been fixed in VectorCAST version 2022 SP7 and such types require user code in the parameter tree.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","Vcshell with --vcbg does not upgrade the db","79866","Previously, using the vctools command 'vcshell --vcbg' to record commands in the background did not properly upgrade an existing vcshell database that was created with VectorCAST version 2019 or earlier. This problem has been fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This bug would cause build failures if the database was needed which is easily detected.","No Risk"
"k a","Duplicate entries in vcdb getallcmdlines (linux)","93140","Previously, some captured commands would incorrectly appear twice in the output of the vcshell getallcmdlines command. This problem has been resolved in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This is a usability bug in command output that is easily detected.","No Risk"
"k a","Function call that forms reference to void should not be testable","95218","Previously, VectorCAST incorrectly treated functions that depended on class template instantiations that formed void references as testable, causing compile errors in the test harness. This issue has been fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","Environment builder incorrectly treats template-based type as non-copyable","96402","Previously, VectorCAST/C++ considered user-defined copy constructors in class templates as unavailable if no class instance invoked the copy constructor, causing functions using that class to appear as untestable and unstubbable, and also causing test harness link errors under certain circumstances. This problem has been fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This bug would cause link errors which are easily detected during build.","No Risk"
"k a","Compile error for source using std::remove_reference typedef parameters","96547","Previously, when stubbing a function with typedef arguments that were utilizing std::remove_reference as well as either a string or a container, VectorCAST/C++ generated test harness code that did not skip these typedefs, which resulted in compilation errors during environment build. This problem has been fixed in VectorCAST version 2022 SP6.","Correction in newer version (release notes)","No Risk. This is a compile error which is easily detected during build.","No Risk"
"k a","Deos RSP communication error","96608","In previous versions of VectorCAST/RSP, when using the DDC-I Deos compiler template to build a C/C++ environment and execute long-running test cases which required multiple hitmap dumps, the data coming from the target sometimes was corrupted. In VectorCAST version 2022 SP6, this error has been resolved by reducing the target hitmap size by 6 bytes to accommodate the header text 'VCAST\n' and accounted for that by removing the header on the host side when converting the output to VCAST_STDOUT.TXT.","Correction in newer version (release notes)","No Risk. This bug would cause obvious communication/data corruption which would be detected.","No Risk"
"k a","Environment builder crash while checking if template function is an additional stub","97509","Previously, VectorCAST/C++ incorrectly treated some member functions defined in template type-dependent classes as additionally stubbable, causing the environment builder to crash. This issue has been fixed in VectorCAST version 2022 SP11.","Correction in newer version (release notes)","No Risk. This is an environment builder crash which is easily detected and prevents build completion. It's a clear blocker that cannot produce corrupt binaries.","No Risk"
